!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABCParser	abc_parser.py	/^class ABCParser(object):$/;"	c
ABCParser	extractor.py	/^from abc_parser import ABCParser$/;"	i
ADOPT_module_key_flags	gflags.py	/^def ADOPT_module_key_flags(module, flag_values=FLAGS):$/;"	f
ADOPT_module_key_flags	gflags_python3.py	/^def ADOPT_module_key_flags(module, flag_values=FLAGS):$/;"	f
ALIGNMENT	extractor-ghkm.py	/^ALIGNMENT = "\/p\/mt-scratch2\/chung\/stages\/train\/training.a"$/;"	v
AMR	amr.py	/^class AMR(object):$/;"	c
AMR	amr_old.py	/^class AMR(object):$/;"	c
AMR	amr_without_alignment.py	/^class AMR(object):$/;"	c
AMREdge	amr_graph.py	/^class AMREdge(object):$/;"	c
AMRFragment	amr_fragment.py	/^class AMRFragment(object):$/;"	c
AMRGraph	amr_graph.py	/^class AMRGraph(object):$/;"	c
AMRNode	amr_graph.py	/^class AMRNode(object):$/;"	c
AddValidator	gflags.py	/^  def AddValidator(self, validator):$/;"	m	class:FlagValues
AddValidator	gflags_python3.py	/^  def AddValidator(self, validator):$/;"	m	class:FlagValues
Agenda	decode.py	/^class Agenda(object):$/;"	c
Alignment	alignment.py	/^class Alignment(object):$/;"	c
Alignment	em_trainer.py	/^from alignment import Alignment$/;"	i
Alignment	em_trainer64.py	/^from alignment import Alignment$/;"	i
Alignment	hg_show.py	/^from alignment import Alignment$/;"	i
AppendFlagValues	gflags.py	/^  def AppendFlagValues(self, flag_values):$/;"	m	class:FlagValues
AppendFlagValues	gflags_python3.py	/^  def AppendFlagValues(self, flag_values):$/;"	m	class:FlagValues
AppendFlagsIntoFile	gflags.py	/^  def AppendFlagsIntoFile(self, filename):$/;"	m	class:FlagValues
AppendFlagsIntoFile	gflags_python3.py	/^  def AppendFlagsIntoFile(self, filename):$/;"	m	class:FlagValues
ArgumentParser	gflags.py	/^class ArgumentParser(object):$/;"	c
ArgumentParser	gflags_python3.py	/^class ArgumentParser(object, metaclass=_ArgumentParserCache):$/;"	c
ArgumentSerializer	gflags.py	/^class ArgumentSerializer:$/;"	c
ArgumentSerializer	gflags_python3.py	/^class ArgumentSerializer:$/;"	c
BaseListParser	gflags.py	/^class BaseListParser(ArgumentParser):$/;"	c
BaseListParser	gflags_python3.py	/^class BaseListParser(ArgumentParser):$/;"	c
Bin	chart.py	/^class Bin(object):$/;"	c
BooleanFlag	gflags.py	/^class BooleanFlag(Flag):$/;"	c
BooleanFlag	gflags_python3.py	/^class BooleanFlag(Flag):$/;"	c
BooleanParser	gflags.py	/^class BooleanParser(ArgumentParser):$/;"	c
BooleanParser	gflags_python3.py	/^class BooleanParser(ArgumentParser):$/;"	c
CUT_INDEX	cut_type_top_down_sampler.py	/^    CUT_INDEX = TypeIndexer()$/;"	v	class:Sample
CUT_INDEX	edge_type_top_down_sampler.py	/^    CUT_INDEX = TypeIndexer()$/;"	v	class:Sample
CUT_INDEX	initial_sampler.py	/^    CUT_INDEX = CutTypeIndex(samples)$/;"	v	class:Sample
CUT_INDEX	simulated_sampler.py	/^    CUT_INDEX = TypeIndexer()$/;"	v	class:Sample
CantOpenFlagFileError	gflags.py	/^class CantOpenFlagFileError(FlagsError):$/;"	c
CantOpenFlagFileError	gflags_python3.py	/^class CantOpenFlagFileError(FlagsError):$/;"	c
Chart	chart.py	/^class Chart(object):$/;"	c
Chart	decode.py	/^from chart import Chart$/;"	i
Checker	gflags.py	/^    def Checker(value):$/;"	f	function:_RegisterBoundsValidatorIfNeeded
Checker	gflags_python3.py	/^    def Checker(value):$/;"	f	function:_RegisterBoundsValidatorIfNeeded
ComposedRuleExtractor	composed_rule_extractor.py	/^class ComposedRuleExtractor(object):$/;"	c
ConflictTester	cut_type_top_down_sampler.py	/^class ConflictTester(object):$/;"	c
ConflictTester	dump_sampler.py	/^class ConflictTester(object):$/;"	c
ConflictTester	edge_type_top_down_sampler.py	/^class ConflictTester(object):$/;"	c
ConflictTester	initial_sampler.py	/^class ConflictTester(object):$/;"	c
ConflictTester	parallel_sampler.py	/^class ConflictTester(object):$/;"	c
ConflictTester	simulated_sampler.py	/^class ConflictTester(object):$/;"	c
ConsensusTrainer	consensus_training.py	/^class ConsensusTrainer(object):$/;"	c
ConsensusTrainer	decoder.py	/^from consensus_training import ConsensusTrainer, NgramCounter$/;"	i
ConsensusTrainingCounter	consensus_training.py	/^class ConsensusTrainingCounter(object):$/;"	c
Convert	gflags.py	/^  def Convert(self, argument):$/;"	m	class:BooleanParser
Convert	gflags.py	/^  def Convert(self, argument):$/;"	m	class:FloatParser
Convert	gflags.py	/^  def Convert(self, argument):$/;"	m	class:IntegerParser
Convert	gflags.py	/^  def Convert(self, argument):$/;"	m	class:NumericParser
Convert	gflags_python3.py	/^  def Convert(self, argument):$/;"	m	class:BooleanParser
Convert	gflags_python3.py	/^  def Convert(self, argument):$/;"	m	class:FloatParser
Convert	gflags_python3.py	/^  def Convert(self, argument):$/;"	m	class:IntegerParser
Convert	gflags_python3.py	/^  def Convert(self, argument):$/;"	m	class:NumericParser
CorpusServer	corpus_server.py	/^class CorpusServer(object):$/;"	c
CorpusServer	decoder.py	/^from corpus_server import CorpusServer$/;"	i
Count	feature.py	/^class Count(Feature):$/;"	c
Cube	cube.py	/^class Cube(object):$/;"	c
Cube	decode.py	/^from cube import Cube$/;"	i
Cube	hypergraph.py	/^from cube import Cube$/;"	i
CutCommonSpacePrefix	gflags.py	/^def CutCommonSpacePrefix(text):$/;"	f
CutCommonSpacePrefix	gflags_python3.py	/^def CutCommonSpacePrefix(text):$/;"	f
CutSite	cut_type_top_down_sampler.py	/^class CutSite(object):$/;"	c
CutSite	dump_sampler.py	/^class CutSite(object):$/;"	c
CutSite	edge_type_top_down_sampler.py	/^class CutSite(object):$/;"	c
CutSite	initial_sampler.py	/^class CutSite(object):$/;"	c
CutSite	parallel_sampler.py	/^class CutSite(object):$/;"	c
CutSite	simulated_sampler.py	/^class CutSite(object):$/;"	c
CutType	cut_type_top_down_sampler.py	/^class CutType(object):$/;"	c
CutType	dump_sampler.py	/^class CutType(object):$/;"	c
CutType	edge_type_top_down_sampler.py	/^class CutType(object):$/;"	c
CutType	initial_sampler.py	/^class CutType(object):$/;"	c
CutType	parallel_sampler.py	/^class CutType(object):$/;"	c
CutType	simulated_sampler.py	/^class CutType(object):$/;"	c
CutTypeIndex	dump_sampler.py	/^class CutTypeIndex(object):$/;"	c
CutTypeIndex	initial_sampler.py	/^class CutTypeIndex(object):$/;"	c
DECLARE_key_flag	gflags.py	/^def DECLARE_key_flag(flag_name, flag_values=FLAGS):$/;"	f
DECLARE_key_flag	gflags_python3.py	/^def DECLARE_key_flag(flag_name, flag_values=FLAGS):$/;"	f
DEFINE	gflags.py	/^def DEFINE(parser, name, default, help, flag_values=FLAGS, serializer=None,$/;"	f
DEFINE	gflags_python3.py	/^def DEFINE(parser, name, default, help, flag_values=FLAGS, serializer=None,$/;"	f
DEFINE_bool	gflags.py	/^DEFINE_bool = DEFINE_boolean$/;"	v
DEFINE_bool	gflags_python3.py	/^DEFINE_bool = DEFINE_boolean$/;"	v
DEFINE_boolean	gflags.py	/^def DEFINE_boolean(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_boolean	gflags_python3.py	/^def DEFINE_boolean(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_enum	gflags.py	/^def DEFINE_enum(name, default, enum_values, help, flag_values=FLAGS,$/;"	f
DEFINE_enum	gflags_python3.py	/^def DEFINE_enum(name, default, enum_values, help, flag_values=FLAGS,$/;"	f
DEFINE_flag	gflags.py	/^def DEFINE_flag(flag, flag_values=FLAGS):$/;"	f
DEFINE_flag	gflags_python3.py	/^def DEFINE_flag(flag, flag_values=FLAGS):$/;"	f
DEFINE_float	gflags.py	/^def DEFINE_float(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_float	gflags_python3.py	/^def DEFINE_float(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_integer	gflags.py	/^def DEFINE_integer(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_integer	gflags_python3.py	/^def DEFINE_integer(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_list	gflags.py	/^def DEFINE_list(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_list	gflags_python3.py	/^def DEFINE_list(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_multi	gflags.py	/^def DEFINE_multi(parser, serializer, name, default, help, flag_values=FLAGS,$/;"	f
DEFINE_multi	gflags_python3.py	/^def DEFINE_multi(parser, serializer, name, default, help, flag_values=FLAGS,$/;"	f
DEFINE_multi_float	gflags.py	/^def DEFINE_multi_float(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_multi_float	gflags_python3.py	/^def DEFINE_multi_float(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_multi_int	gflags.py	/^def DEFINE_multi_int(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_multi_int	gflags_python3.py	/^def DEFINE_multi_int(name, default, help, lower_bound=None, upper_bound=None,$/;"	f
DEFINE_multistring	gflags.py	/^def DEFINE_multistring(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_multistring	gflags_python3.py	/^def DEFINE_multistring(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_spaceseplist	gflags.py	/^def DEFINE_spaceseplist(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_spaceseplist	gflags_python3.py	/^def DEFINE_spaceseplist(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_string	gflags.py	/^def DEFINE_string(name, default, help, flag_values=FLAGS, **args):$/;"	f
DEFINE_string	gflags_python3.py	/^def DEFINE_string(name, default, help, flag_values=FLAGS, **args):$/;"	f
DUMP_DIR	extractor-ghkm.py	/^DUMP_DIR = "rules-all"$/;"	v
DUMP_FILE	extractor-ghkm.py	/^DUMP_FILE = "extract"$/;"	v
DUMP_SIZE	extractor-ghkm.py	/^DUMP_SIZE = 100000$/;"	v
Decoder	decode.py	/^class Decoder(object):$/;"	c
Decoder	translation_job.py	/^from decode import Decoder$/;"	i
Deduction	best_path.py	/^from decode import Deduction$/;"	i
Deduction	consensus_training.py	/^from decode import Deduction$/;"	i
Deduction	decode.py	/^class Deduction(Edge):$/;"	c
Deduction	features.py	/^from decode import Deduction, Item$/;"	i
Deduction	hgshow.py	/^from decode import Item, Deduction$/;"	i
DerivationException	hgraph.py	/^from util.exceptions import DerivationException$/;"	i
DerivationException	rule.py	/^from util.exceptions import DerivationException$/;"	i
Deserializer	best_path.py	/^from hypergraph import Node, Deserializer$/;"	i
Deserializer	consensus_training.py	/^from hypergraph import Node, Deserializer$/;"	i
Deserializer	hgshow.py	/^from hypergraph import Deserializer, Node, Edge$/;"	i
Deserializer	hypergraph.py	/^class Deserializer(object):$/;"	c
DictionaryValidator	gflags_validators.py	/^class DictionaryValidator(Validator):$/;"	c
DocToHelp	gflags.py	/^def DocToHelp(doc):$/;"	f
DocToHelp	gflags_python3.py	/^def DocToHelp(doc):$/;"	f
DotChart	decode.py	/^from dot_chart import DotChart$/;"	i
DotChart	dot_chart.py	/^class DotChart(object):$/;"	c
DotItem	dot_chart.py	/^class DotItem(object):$/;"	c
DuplicateFlag	gflags.py	/^class DuplicateFlag(FlagsError):$/;"	c
DuplicateFlag	gflags_python3.py	/^class DuplicateFlag(FlagsError):$/;"	c
DuplicateFlagCannotPropagateNoneToSwig	gflags.py	/^class DuplicateFlagCannotPropagateNoneToSwig(DuplicateFlag):$/;"	c
DuplicateFlagCannotPropagateNoneToSwig	gflags_python3.py	/^class DuplicateFlagCannotPropagateNoneToSwig(DuplicateFlag):$/;"	c
DuplicateFlagError	gflags.py	/^class DuplicateFlagError(DuplicateFlag):$/;"	c
DuplicateFlagError	gflags_python3.py	/^class DuplicateFlagError(DuplicateFlag):$/;"	c
EDGE_INDEX	edge_type_top_down_sampler.py	/^    EDGE_INDEX = TypeIndexer()$/;"	v	class:Sample
EMTrainer	em_trainer.py	/^class EMTrainer(object):$/;"	c
EMTrainer	em_trainer64.py	/^class EMTrainer(object):$/;"	c
ERROR_LOG	smatch-table.py	/^ERROR_LOG=sys.stderr$/;"	v
ERROR_LOG	smatch.py	/^ERROR_LOG=sys.stderr$/;"	v
ERROR_LOG	smatch_modified.py	/^ERROR_LOG=sys.stderr$/;"	v
EXTRACTOR_BIN	extractor-ghkm.py	/^EXTRACTOR_BIN = "frontier_new.pl"$/;"	v
Edge	composed_rule_extractor.py	/^from hypergraph import Node, Edge, Hypergraph$/;"	i
Edge	decode.py	/^from hypergraph import Edge, Node, Hypergraph$/;"	i
Edge	decoder.py	/^from hypergraph import Edge, Node, Hypergraph$/;"	i
Edge	fragment_hypergraph.py	/^from hypergraph import Node, Edge$/;"	i
Edge	hgshow.py	/^from hypergraph import Deserializer, Node, Edge$/;"	i
Edge	hypergraph.py	/^class Edge(object):$/;"	c
Edge	hypergraph_test.py	/^from hypergraph import Node, Edge, Hypergraph, INSIDE, LOGPROB$/;"	i
Edge	phrase_hypergraph.py	/^from hypergraph import Node, Edge$/;"	i
EdgeCount	feature.py	/^class EdgeCount(Feature):$/;"	c
EdgeIndex	abc_parser.py	/^class EdgeIndex(object):$/;"	c
EnumFlag	gflags.py	/^class EnumFlag(Flag):$/;"	c
EnumFlag	gflags_python3.py	/^class EnumFlag(Flag):$/;"	c
EnumParser	gflags.py	/^class EnumParser(ArgumentParser):$/;"	c
EnumParser	gflags_python3.py	/^class EnumParser(ArgumentParser):$/;"	c
Error	gflags_validators.py	/^class Error(Exception):$/;"	c
ExtractFilename	gflags.py	/^  def ExtractFilename(self, flagfile_str):$/;"	m	class:FlagValues
ExtractFilename	gflags_python3.py	/^  def ExtractFilename(self, flagfile_str):$/;"	m	class:FlagValues
Extractor	em_trainer.py	/^from extractor import Extractor, LexicalWeighter$/;"	i
Extractor	em_trainer64.py	/^from extractor import Extractor, LexicalWeighter$/;"	i
Extractor	extractor.py	/^class Extractor(object):$/;"	c
Extractor	hg_show.py	/^from extractor import Extractor$/;"	i
FE	feature.py	/^class FE(Feature):$/;"	c
FLAGS	HRGRule.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	Parallel_Sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	add_lexweights.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	anneal_hrg_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	chart.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	common.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	composed_rule_extractor.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	concept_init.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	corpus_server.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	cut_type_top_down_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	decode.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	decoder.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	decoding_flags.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	dot_chart.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	driver.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	dump_sample.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	dump_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	edge_type_top_down_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	em_trainer.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	extract_alignment.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	extractor.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	feature.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	features.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	forest_prev.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	fragment_forest.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	gflags.py	/^FLAGS = FlagValues()$/;"	v
FLAGS	gflags_python3.py	/^FLAGS = FlagValues()$/;"	v
FLAGS	grammar.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	hrg_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	hypergraph.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	initial_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	job_logger.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	lexical_weighter.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	load_samples.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	logger.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	parallel_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	phrase_forest.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	python_lm.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	rule.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	rule_dumper.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	rule_extraction_flags.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	rule_filter.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	scorer.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	simulated_sampler.py	/^FLAGS = gflags.FLAGS$/;"	v
FLAGS	translation_job.py	/^FLAGS = gflags.FLAGS$/;"	v
FRAGMENT_NT	concept_init.py	/^FRAGMENT_NT = '[%s]' % FLAGS.fragment_nonterminal$/;"	v
FRAGMENT_NT	forest_prev.py	/^FRAGMENT_NT = '[%s]' % FLAGS.fragment_nonterminal$/;"	v
FRAGMENT_NT	fragment_forest.py	/^FRAGMENT_NT = '[%s]' % FLAGS.fragment_nonterminal$/;"	v
Feature	feature.py	/^class Feature(object):$/;"	c
Features	decoder.py	/^from features import Features$/;"	i
Features	features.py	/^class Features(object):$/;"	c
Filter	scorer.py	/^class Filter(object):$/;"	c
FindModuleDefiningFlag	gflags.py	/^  def FindModuleDefiningFlag(self, flagname, default=None):$/;"	m	class:FlagValues
FindModuleDefiningFlag	gflags_python3.py	/^  def FindModuleDefiningFlag(self, flagname, default=None):$/;"	m	class:FlagValues
FindModuleIdDefiningFlag	gflags.py	/^  def FindModuleIdDefiningFlag(self, flagname, default=None):$/;"	m	class:FlagValues
Flag	gflags.py	/^class Flag:$/;"	c
Flag	gflags_python3.py	/^class Flag:$/;"	c
FlagDict	gflags.py	/^  def FlagDict(self):$/;"	m	class:FlagValues
FlagDict	gflags_python3.py	/^  def FlagDict(self):$/;"	m	class:FlagValues
FlagValues	gflags.py	/^class FlagValues:$/;"	c
FlagValues	gflags_python3.py	/^class FlagValues:$/;"	c
FlagValuesDict	gflags.py	/^  def FlagValuesDict(self):$/;"	m	class:FlagValues
FlagValuesDict	gflags_python3.py	/^  def FlagValuesDict(self):$/;"	m	class:FlagValues
FlagsByModuleDict	gflags.py	/^  def FlagsByModuleDict(self):$/;"	m	class:FlagValues
FlagsByModuleDict	gflags_python3.py	/^  def FlagsByModuleDict(self):$/;"	m	class:FlagValues
FlagsByModuleIdDict	gflags.py	/^  def FlagsByModuleIdDict(self):$/;"	m	class:FlagValues
FlagsError	gflags.py	/^class FlagsError(Exception):$/;"	c
FlagsError	gflags_python3.py	/^class FlagsError(Exception):$/;"	c
FlagsIntoString	gflags.py	/^  def FlagsIntoString(self):$/;"	m	class:FlagValues
FlagsIntoString	gflags_python3.py	/^  def FlagsIntoString(self):$/;"	m	class:FlagValues
FloatParser	gflags.py	/^class FloatParser(NumericParser):$/;"	c
FloatParser	gflags_python3.py	/^class FloatParser(NumericParser):$/;"	c
ForestEdge	hypergraph_test.py	/^class ForestEdge(Edge):$/;"	c
ForestNode	hypergraph_test.py	/^class ForestNode(Node):$/;"	c
FragmentHGEdge	concept_init.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGEdge	extract_alignment.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGEdge	extract_cycles.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGEdge	forest_prev.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGEdge	fragment_forest.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGEdge	fragment_hypergraph.py	/^class FragmentHGEdge(Edge):$/;"	c
FragmentHGEdge	init_unaligned_gram.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGNode	concept_init.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGNode	extract_alignment.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGNode	extract_cycles.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGNode	forest_prev.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGNode	fragment_forest.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
FragmentHGNode	fragment_hypergraph.py	/^class FragmentHGNode(Node):$/;"	c
FragmentHGNode	init_unaligned_gram.py	/^from fragment_hypergraph import FragmentHGNode, FragmentHGEdge$/;"	i
GHKM	feature.py	/^class GHKM(Feature):$/;"	c
GHKMCount	feature.py	/^class GHKMCount(Feature):$/;"	c
GHKMGlobal	feature.py	/^class GHKMGlobal(Feature):$/;"	c
GHKMLHSConditional	feature.py	/^class GHKMLHSConditional(Feature):$/;"	c
GHKMLexicalCE	feature.py	/^class GHKMLexicalCE(Feature):$/;"	c
GHKMLexicalEC	feature.py	/^class GHKMLexicalEC(Feature):$/;"	c
GHKMRHSConditionalCE	feature.py	/^class GHKMRHSConditionalCE(Feature):$/;"	c
GHKMRHSConditionalEC	feature.py	/^class GHKMRHSConditionalEC(Feature):$/;"	c
GLUE_RULE_FILE	extractor-ghkm.py	/^GLUE_RULE_FILE = "a_glue.grammar"$/;"	v
GetFlagsNames	gflags_validators.py	/^  def GetFlagsNames(self):$/;"	m	class:DictionaryValidator
GetFlagsNames	gflags_validators.py	/^  def GetFlagsNames(self):$/;"	m	class:SimpleValidator
GetFlagsNames	gflags_validators.py	/^  def GetFlagsNames(self):$/;"	m	class:Validator
GetHelp	gflags.py	/^  def GetHelp(self, prefix=''):$/;"	m	class:FlagValues
GetHelp	gflags_python3.py	/^  def GetHelp(self, prefix=''):$/;"	m	class:FlagValues
GetHelpWidth	gflags.py	/^def GetHelpWidth():$/;"	f
GetHelpWidth	gflags_python3.py	/^def GetHelpWidth():$/;"	f
Global_sampler	hrg_sampler.py	/^            Global_sampler = cPickle.load(f)$/;"	v
GlueRule	feature.py	/^class GlueRule(Feature):$/;"	c
GlueRuleCount	feature.py	/^class GlueRuleCount(Feature):$/;"	c
Grammar	grammar.py	/^class Grammar(object):$/;"	c
Grammar	translation_job.py	/^from grammar import Grammar$/;"	i
GraphDescriptionParser	hgraph.py	/^            from graph_description_parser import GraphDescriptionParser, LexerError, ParserError$/;"	i
HRGSample	extract_cycles.py	/^import HRGSample$/;"	i
HRGSample	forest_prev.py	/^import HRGSample$/;"	i
HRGSample	fragment_forest.py	/^import HRGSample$/;"	i
HRG_rule_under_node	HRGSample.py	/^    def HRG_rule_under_node(self, curr_root, ext_mapping, var_mapping, nonterm_index, unvisited_nodes, att_list_mapping, include_root=True):$/;"	m	class:Sample
HelpFlag	gflags.py	/^class HelpFlag(BooleanFlag):$/;"	c
HelpFlag	gflags_python3.py	/^class HelpFlag(BooleanFlag):$/;"	c
HelpXMLFlag	gflags.py	/^class HelpXMLFlag(BooleanFlag):$/;"	c
HelpXMLFlag	gflags_python3.py	/^class HelpXMLFlag(BooleanFlag):$/;"	c
HelpshortFlag	gflags.py	/^class HelpshortFlag(BooleanFlag):$/;"	c
HelpshortFlag	gflags_python3.py	/^class HelpshortFlag(BooleanFlag):$/;"	c
Hgraph	HRGRule.py	/^from util.hgraph.hgraph import Hgraph$/;"	i
Hgraph	HRGSample.py	/^from util.hgraph.hgraph import Hgraph$/;"	i
Hgraph	hgraph.py	/^class Hgraph(defaultdict):$/;"	c
Hgraph	rule.py	/^from util.hgraph.hgraph import Hgraph$/;"	i
HieroCount	feature.py	/^class HieroCount(Feature):$/;"	c
HieroLHSConditional	feature.py	/^class HieroLHSConditional(Feature):$/;"	c
HieroLexicalCE	feature.py	/^class HieroLexicalCE(Feature):$/;"	c
HieroLexicalEC	feature.py	/^class HieroLexicalEC(Feature):$/;"	c
HieroRHSConditionalCE	feature.py	/^class HieroRHSConditionalCE(Feature):$/;"	c
HieroRHSConditionalEC	feature.py	/^class HieroRHSConditionalEC(Feature):$/;"	c
Hypergraph	abc_parser.py	/^from hypergraph import Hypergraph$/;"	i
Hypergraph	composed_rule_extractor.py	/^from hypergraph import Node, Edge, Hypergraph$/;"	i
Hypergraph	decode.py	/^from hypergraph import Edge, Node, Hypergraph$/;"	i
Hypergraph	decoder.py	/^from hypergraph import Edge, Node, Hypergraph$/;"	i
Hypergraph	extractor.py	/^from hypergraph import Hypergraph$/;"	i
Hypergraph	hypergraph.py	/^class Hypergraph(object):$/;"	c
Hypergraph	hypergraph_test.py	/^from hypergraph import Node, Edge, Hypergraph, INSIDE, LOGPROB$/;"	i
Hypergraph	translation_job.py	/^from hypergraph import Hypergraph$/;"	i
INF	HRGSample.py	/^from common import INF, ZERO$/;"	i
INF	Parallel_Sampler.py	/^from common import INF, ZERO$/;"	i
INF	add_lexweights.py	/^from common import INF, ZERO$/;"	i
INF	anneal_hrg_sampler.py	/^from common import INF, ZERO$/;"	i
INF	chart.py	/^from common import INF$/;"	i
INF	common.py	/^INF = 1e300$/;"	v
INF	consensus_training.py	/^from common import INF$/;"	i
INF	cut_type_top_down_sampler.py	/^from common import INF, ZERO$/;"	i
INF	dump_sample.py	/^from common import INF, ZERO$/;"	i
INF	dump_sampler.py	/^from common import INF, ZERO$/;"	i
INF	edge_type_top_down_sampler.py	/^from common import INF, ZERO$/;"	i
INF	features.py	/^from common import INF$/;"	i
INF	hrg_sampler.py	/^from common import INF, ZERO$/;"	i
INF	hypergraph.py	/^from common import INF$/;"	i
INF	initial_sampler.py	/^from common import INF, ZERO$/;"	i
INF	load_samples.py	/^from common import INF, ZERO$/;"	i
INF	parallel_sampler.py	/^from common import INF, ZERO$/;"	i
INF	references.py	/^from common import count_lines, INF$/;"	i
INF	simulated_sampler.py	/^from common import INF, ZERO$/;"	i
INSIDE	hypergraph.py	/^INSIDE = (lambda x,y: x + y,$/;"	v
INSIDE	hypergraph_test.py	/^from hypergraph import Node, Edge, Hypergraph, INSIDE, LOGPROB$/;"	i
INVERTED	abc_parser.py	/^INVERTED = '[INVERTED]'$/;"	v
INVERTED	em_trainer.py	/^from abc_parser import STRAIGHT, INVERTED, START$/;"	i
INVERTED	em_trainer64.py	/^from abc_parser import STRAIGHT, INVERTED, START$/;"	i
ITG	feature.py	/^class ITG(Feature):$/;"	c
IllegalFlagValue	gflags.py	/^class IllegalFlagValue(FlagsError):$/;"	c
IllegalFlagValue	gflags_python3.py	/^class IllegalFlagValue(FlagsError):$/;"	c
InsideOutsideTest	hypergraph_test.py	/^class InsideOutsideTest(TestCase):$/;"	c
IntegerParser	gflags.py	/^class IntegerParser(NumericParser):$/;"	c
IntegerParser	gflags_python3.py	/^class IntegerParser(NumericParser):$/;"	c
IsGnuGetOpt	gflags.py	/^  def IsGnuGetOpt(self):$/;"	m	class:FlagValues
IsGnuGetOpt	gflags_python3.py	/^  def IsGnuGetOpt(self):$/;"	m	class:FlagValues
IsOutsideBounds	gflags.py	/^  def IsOutsideBounds(self, val):$/;"	m	class:NumericParser
IsOutsideBounds	gflags_python3.py	/^  def IsOutsideBounds(self, val):$/;"	m	class:NumericParser
Item	decode.py	/^class Item(Node):$/;"	c
Item	features.py	/^from decode import Deduction, Item$/;"	i
Item	hgshow.py	/^from decode import Item, Deduction$/;"	i
JobLogger	corpus_server.py	/^from job_logger import JobLogger$/;"	i
JobLogger	decoder.py	/^from job_logger import JobLogger$/;"	i
JobLogger	job_logger.py	/^class JobLogger(object):$/;"	c
KeyFlagsByModuleDict	gflags.py	/^  def KeyFlagsByModuleDict(self):$/;"	m	class:FlagValues
KeyFlagsByModuleDict	gflags_python3.py	/^  def KeyFlagsByModuleDict(self):$/;"	m	class:FlagValues
LEXICAL_WEIGHTER	add_lexweights.py	/^    LEXICAL_WEIGHTER = LexicalWeighter()$/;"	v	class:Sample
LEXICAL_WEIGHTER	cut_type_top_down_sampler.py	/^    LEXICAL_WEIGHTER = LexicalWeighter()$/;"	v	class:Sample
LEXICAL_WEIGHTER	dump_sampler.py	/^    LEXICAL_WEIGHTER = LexicalWeighter()$/;"	v	class:Sample
LEXICAL_WEIGHTER	edge_type_top_down_sampler.py	/^    LEXICAL_WEIGHTER = LexicalWeighter()$/;"	v	class:Sample
LEXICAL_WEIGHTER	initial_sampler.py	/^    LEXICAL_WEIGHTER = LexicalWeighter()$/;"	v	class:Sample
LEXICAL_WEIGHTER	simulated_sampler.py	/^    LEXICAL_WEIGHTER = LexicalWeighter()$/;"	v	class:Sample
LEXICAL_WEIGHTING_PRUNE	extractor-ghkm.py	/^LEXICAL_WEIGHTING_PRUNE = True$/;"	v
LEX_S_GIVEN_T	extractor-ghkm.py	/^LEX_S_GIVEN_T = "\/p\/mt-scratch2\/chung\/stages\/data\/lex-full\/lex.c_given_e"$/;"	v
LEX_T_GIVEN_S	extractor-ghkm.py	/^LEX_T_GIVEN_S = "\/p\/mt-scratch2\/chung\/stages\/data\/lex-full\/lex.e_given_c"$/;"	v
LM	feature.py	/^class LM(Feature):$/;"	c
LOGPROB	hypergraph.py	/^LOGPROB = (logsum,$/;"	v
LOGPROB	hypergraph_test.py	/^from hypergraph import Node, Edge, Hypergraph, INSIDE, LOGPROB$/;"	i
LOGZERO	hypergraph.py	/^from logprob import logsum, logprod, LOGZERO$/;"	i
LOGZERO	logprob.py	/^LOGZERO = -100$/;"	v
LOGZERO	python_lm.py	/^LOGZERO = -99.0$/;"	v
LanguageModel	feature.py	/^            from python_lm import LanguageModel$/;"	i
LanguageModel	feature.py	/^            from swig_lm import LanguageModel$/;"	i
LanguageModel	python_lm.py	/^class LanguageModel(object):$/;"	c
LanguageModel	swig_lm.py	/^class LanguageModel(object):$/;"	c
LazyListMerger	dot_chart.py	/^from lazy_list_merger import LazyListMerger$/;"	i
LazyListMerger	lazy_list_merger.py	/^class LazyListMerger(object):$/;"	c
LengthPenalty	feature.py	/^class LengthPenalty(Feature):$/;"	c
LexerError	hgraph.py	/^            from graph_description_parser import GraphDescriptionParser, LexerError, ParserError$/;"	i
LexicalITG	decode.py	/^from grammar import LexicalITG$/;"	i
LexicalITG	decoder.py	/^from grammar import LexicalITG, SCFG$/;"	i
LexicalITG	grammar.py	/^class LexicalITG(object):$/;"	c
LexicalWeighter	HRGSample.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	Parallel_Sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	add_lexweights.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	cut_type_top_down_sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	dump_sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	edge_type_top_down_sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	em_trainer.py	/^from extractor import Extractor, LexicalWeighter$/;"	i
LexicalWeighter	em_trainer64.py	/^from extractor import Extractor, LexicalWeighter$/;"	i
LexicalWeighter	extractor.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	initial_sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	lexical_weighter.py	/^class LexicalWeighter(object):$/;"	c
LexicalWeighter	load_samples.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	parallel_sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
LexicalWeighter	simulated_sampler.py	/^from lexical_weighter import LexicalWeighter$/;"	i
ListMap	hgraph.py	/^class ListMap(defaultdict):$/;"	c
ListParser	gflags.py	/^class ListParser(BaseListParser):$/;"	c
ListParser	gflags_python3.py	/^class ListParser(BaseListParser):$/;"	c
ListSerializer	gflags.py	/^class ListSerializer(ArgumentSerializer):$/;"	c
ListSerializer	gflags_python3.py	/^class ListSerializer(ArgumentSerializer):$/;"	c
Literal	hgraph.py	/^class Literal(str):$/;"	c
MAX_SCOPE	extractor-ghkm.py	/^MAX_SCOPE = 3$/;"	v
MAX_TERMINALS	extractor-ghkm.py	/^MAX_TERMINALS = 7$/;"	v
MainModuleHelp	gflags.py	/^  def MainModuleHelp(self):$/;"	m	class:FlagValues
MainModuleHelp	gflags_python3.py	/^  def MainModuleHelp(self):$/;"	m	class:FlagValues
MarkFlagAsRequired	gflags.py	/^def MarkFlagAsRequired(flag_name, flag_values=FLAGS):$/;"	f
MarkFlagAsRequired	gflags_python3.py	/^def MarkFlagAsRequired(flag_name, flag_values=FLAGS):$/;"	f
Mem	mymonitor.py	/^class Mem(object):$/;"	c
MemZero	mymonitor.py	/^MemZero = Mem(0.0)$/;"	v
MockLM	feature.py	/^class MockLM(Feature):$/;"	c
ModuleHelp	gflags.py	/^  def ModuleHelp(self, module):$/;"	m	class:FlagValues
ModuleHelp	gflags_python3.py	/^  def ModuleHelp(self, module):$/;"	m	class:FlagValues
Monitor	decoder.py	/^from monitor import Monitor$/;"	i
Monitor	monitor.py	/^class Monitor(object):$/;"	c
MultiFlag	gflags.py	/^class MultiFlag(Flag):$/;"	c
MultiFlag	gflags_python3.py	/^class MultiFlag(Flag):$/;"	c
NONLEXICAL_RULE_FILE	extractor-ghkm.py	/^NONLEXICAL_RULE_FILE = "nonlexical.scope3.ghkm.gr"$/;"	v
NONLEXICAL_SMOOTHED_PRUNE	extractor-ghkm.py	/^NONLEXICAL_SMOOTHED_PRUNE = False$/;"	v
NPSampler	HRGSample.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	add_lexweights.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	cut_type_top_down_sampler.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	dump_sampler.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	edge_type_top_down_sampler.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	initial_sampler.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	parallel_sampler.py	/^class NPSampler(Sampler):$/;"	c
NPSampler	simulated_sampler.py	/^class NPSampler(Sampler):$/;"	c
NTMismatch	feature.py	/^class NTMismatch(Feature):$/;"	c
NTPunish	feature.py	/^class NTPunish(Feature):$/;"	c
NTSampler	HRGSample.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	add_lexweights.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	cut_type_top_down_sampler.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	dump_sampler.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	edge_type_top_down_sampler.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	initial_sampler.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	parallel_sampler.py	/^class NTSampler(Sampler):$/;"	c
NTSampler	simulated_sampler.py	/^class NTSampler(Sampler):$/;"	c
NeighborIndex	abc_parser.py	/^class NeighborIndex(object):$/;"	c
NgramCounter	consensus_training.py	/^class NgramCounter:$/;"	c
NgramCounter	decoder.py	/^from consensus_training import ConsensusTrainer, NgramCounter$/;"	i
NgramCounter	translation_job.py	/^from consensus_training import NgramCounter$/;"	i
NgramEnumerator	consensus_training.py	/^from ngram import NgramEnumerator$/;"	i
NgramEnumerator	feature.py	/^from ngram import NgramEnumerator$/;"	i
NgramEnumerator	ngram.py	/^class NgramEnumerator:$/;"	c
NgramEnumerator	references.py	/^from ngram import NgramEnumerator$/;"	i
Node	best_path.py	/^from hypergraph import Node, Deserializer$/;"	i
Node	composed_rule_extractor.py	/^from hypergraph import Node, Edge, Hypergraph$/;"	i
Node	consensus_training.py	/^from hypergraph import Node, Deserializer$/;"	i
Node	decode.py	/^from hypergraph import Edge, Node, Hypergraph$/;"	i
Node	decoder.py	/^from hypergraph import Edge, Node, Hypergraph$/;"	i
Node	fragment_hypergraph.py	/^from hypergraph import Node, Edge$/;"	i
Node	hgshow.py	/^from hypergraph import Deserializer, Node, Edge$/;"	i
Node	hypergraph.py	/^class Node(object):$/;"	c
Node	hypergraph_test.py	/^from hypergraph import Node, Edge, Hypergraph, INSIDE, LOGPROB$/;"	i
Node	phrase_hypergraph.py	/^from hypergraph import Node, Edge$/;"	i
NonterminalLabel	HRGSample.py	/^from util.cfg import NonterminalLabel$/;"	i
NonterminalLabel	hgraph.py	/^from util.cfg import NonterminalLabel$/;"	i
NumTerminals	feature.py	/^class NumTerminals(Feature):$/;"	c
NumericParser	gflags.py	/^class NumericParser(ArgumentParser):$/;"	c
NumericParser	gflags_python3.py	/^class NumericParser(ArgumentParser):$/;"	c
PARSED_TRG	extractor-ghkm.py	/^PARSED_TRG = "\/p\/mt-scratch2\/chung\/stages\/split-merge\/left-bin-removed-7\/training.all.labeled_5.mrg.top"$/;"	v
PHRASE	abc_parser.py	/^PHRASE = '[A]'$/;"	v
PHRASE	composed_rule_extractor.py	/^from abc_parser import START, PHRASE$/;"	i
PHRASE	extractor.py	/^PHRASE = '[A]'$/;"	v
PHRASE	scorer.py	/^from extractor import PHRASE$/;"	i
PHRASE_NT	Parallel_Sampler.py	/^PHRASE_NT = 'X'$/;"	v
PHRASE_NT	add_lexweights.py	/^PHRASE_NT = 'A'$/;"	v
PHRASE_NT	anneal_hrg_sampler.py	/^PHRASE_NT = 'X'$/;"	v
PHRASE_NT	cut_type_top_down_sampler.py	/^PHRASE_NT = 'A'$/;"	v
PHRASE_NT	dump_sample.py	/^PHRASE_NT = 'X'$/;"	v
PHRASE_NT	dump_sampler.py	/^PHRASE_NT = 'A'$/;"	v
PHRASE_NT	edge_type_top_down_sampler.py	/^PHRASE_NT = 'A'$/;"	v
PHRASE_NT	hrg_sampler.py	/^PHRASE_NT = 'X'$/;"	v
PHRASE_NT	initial_sampler.py	/^PHRASE_NT = 'A'$/;"	v
PHRASE_NT	load_samples.py	/^PHRASE_NT = 'X'$/;"	v
PHRASE_NT	parallel_sampler.py	/^PHRASE_NT = 'A'$/;"	v
PHRASE_NT	phrase_forest.py	/^PHRASE_NT = '[%s]' % FLAGS.phrase_nonterminal$/;"	v
PHRASE_NT	simulated_sampler.py	/^PHRASE_NT = 'A'$/;"	v
Parse	gflags.py	/^  def Parse(self, arg):$/;"	m	class:HelpFlag
Parse	gflags.py	/^  def Parse(self, arg):$/;"	m	class:HelpXMLFlag
Parse	gflags.py	/^  def Parse(self, arg):$/;"	m	class:HelpshortFlag
Parse	gflags.py	/^  def Parse(self, argument):$/;"	m	class:ArgumentParser
Parse	gflags.py	/^  def Parse(self, argument):$/;"	m	class:BaseListParser
Parse	gflags.py	/^  def Parse(self, argument):$/;"	m	class:BooleanParser
Parse	gflags.py	/^  def Parse(self, argument):$/;"	m	class:EnumParser
Parse	gflags.py	/^  def Parse(self, argument):$/;"	m	class:Flag
Parse	gflags.py	/^  def Parse(self, argument):$/;"	m	class:NumericParser
Parse	gflags.py	/^  def Parse(self, arguments):$/;"	m	class:MultiFlag
Parse	gflags_python3.py	/^  def Parse(self, arg):$/;"	m	class:HelpFlag
Parse	gflags_python3.py	/^  def Parse(self, arg):$/;"	m	class:HelpXMLFlag
Parse	gflags_python3.py	/^  def Parse(self, arg):$/;"	m	class:HelpshortFlag
Parse	gflags_python3.py	/^  def Parse(self, argument):$/;"	m	class:ArgumentParser
Parse	gflags_python3.py	/^  def Parse(self, argument):$/;"	m	class:BaseListParser
Parse	gflags_python3.py	/^  def Parse(self, argument):$/;"	m	class:BooleanParser
Parse	gflags_python3.py	/^  def Parse(self, argument):$/;"	m	class:EnumParser
Parse	gflags_python3.py	/^  def Parse(self, argument):$/;"	m	class:Flag
Parse	gflags_python3.py	/^  def Parse(self, argument):$/;"	m	class:NumericParser
Parse	gflags_python3.py	/^  def Parse(self, arguments):$/;"	m	class:MultiFlag
ParserError	hgraph.py	/^            from graph_description_parser import GraphDescriptionParser, LexerError, ParserError$/;"	i
Path	hypergraph.py	/^class Path(object):$/;"	c
PercentCounter	composed_rule_extractor.py	/^from percent_counter import PercentCounter$/;"	i
PercentCounter	count_top_rule.py	/^from percent_counter import PercentCounter$/;"	i
PercentCounter	em_trainer64.py	/^from percent_counter import PercentCounter$/;"	i
PercentCounter	grammar.py	/^from percent_counter import PercentCounter$/;"	i
PercentCounter	percent_counter.py	/^class PercentCounter(object):$/;"	c
PercentCounter	rule-format-old2new.py	/^from percent_counter import PercentCounter$/;"	i
PercentCounter	sort_trees.py	/^from percent_counter import PercentCounter$/;"	i
PhraseCount	feature.py	/^class PhraseCount(Feature):$/;"	c
PhraseEF	feature.py	/^class PhraseEF(Feature):$/;"	c
PhraseFE	feature.py	/^class PhraseFE(Feature):$/;"	c
PhraseHGEdge	abc_parser.py	/^from phrase_hypergraph import PhraseHGNode, PhraseHGEdge$/;"	i
PhraseHGEdge	composed_rule_extractor.py	/^from phrase_hypergraph import PhraseHGEdge$/;"	i
PhraseHGEdge	extractor.py	/^from phrase_hypergraph import PhraseHGNode, PhraseHGEdge$/;"	i
PhraseHGEdge	phrase_forest.py	/^from phrase_hypergraph import PhraseHGNode, PhraseHGEdge$/;"	i
PhraseHGEdge	phrase_hypergraph.py	/^class PhraseHGEdge(Edge):$/;"	c
PhraseHGNode	abc_parser.py	/^from phrase_hypergraph import PhraseHGNode, PhraseHGEdge$/;"	i
PhraseHGNode	extractor.py	/^from phrase_hypergraph import PhraseHGNode, PhraseHGEdge$/;"	i
PhraseHGNode	phrase_forest.py	/^from phrase_hypergraph import PhraseHGNode, PhraseHGEdge$/;"	i
PhraseHGNode	phrase_hypergraph.py	/^class PhraseHGNode(Node):$/;"	c
PhraseLexEF	feature.py	/^class PhraseLexEF(Feature):$/;"	c
PhraseLexFE	feature.py	/^class PhraseLexFE(Feature):$/;"	c
PrintFlagsWithValues	gflags_validators.py	/^  def PrintFlagsWithValues(self, flag_values):$/;"	m	class:DictionaryValidator
PrintFlagsWithValues	gflags_validators.py	/^  def PrintFlagsWithValues(self, flag_values):$/;"	m	class:SimpleValidator
PrintFlagsWithValues	gflags_validators.py	/^  def PrintFlagsWithValues(self, flag_values):$/;"	m	class:Validator
Quantity	hgraph.py	/^class Quantity(str):$/;"	c
RULE_POOL	cut_type_top_down_sampler.py	/^RULE_POOL = {}$/;"	v
RULE_POOL	dump_sampler.py	/^RULE_POOL = {}$/;"	v
RULE_POOL	edge_type_top_down_sampler.py	/^RULE_POOL = {}$/;"	v
RULE_POOL	initial_sampler.py	/^RULE_POOL = {}$/;"	v
RULE_POOL	parallel_sampler.py	/^RULE_POOL = {}$/;"	v
RULE_POOL	simulated_sampler.py	/^RULE_POOL = {}$/;"	v
ReadFlagsFromFiles	gflags.py	/^  def ReadFlagsFromFiles(self, argv, force_gnu=True):$/;"	m	class:FlagValues
ReadFlagsFromFiles	gflags_python3.py	/^  def ReadFlagsFromFiles(self, argv, force_gnu=True):$/;"	m	class:FlagValues
RefCounter	references.py	/^class RefCounter(dict):$/;"	c
RefCounter	translation_job.py	/^        self.ref = None  # reference, class RefCounter$/;"	c	function:TranslationJob.__init__
References	decoder.py	/^from references import References$/;"	i
References	references.py	/^class References(object):$/;"	c
RegisterValidator	gflags.py	/^def RegisterValidator(flag_name,$/;"	f
RegisterValidator	gflags_python3.py	/^def RegisterValidator(flag_name,$/;"	f
RegisteredFlags	gflags.py	/^  def RegisteredFlags(self):$/;"	m	class:FlagValues
RegisteredFlags	gflags_python3.py	/^  def RegisteredFlags(self):$/;"	m	class:FlagValues
RemoveFlagValues	gflags.py	/^  def RemoveFlagValues(self, flag_values):$/;"	m	class:FlagValues
RemoveFlagValues	gflags_python3.py	/^  def RemoveFlagValues(self, flag_values):$/;"	m	class:FlagValues
Reset	gflags.py	/^  def Reset(self):$/;"	m	class:FlagValues
Reset	gflags_python3.py	/^  def Reset(self):$/;"	m	class:FlagValues
Rule	HRGSample.py	/^from rule import Rule$/;"	i
Rule	abc_parser.py	/^from rule import Rule$/;"	i
Rule	add_lexweights.py	/^from rule import Rule$/;"	i
Rule	composed_rule_extractor.py	/^from rule import Rule$/;"	i
Rule	concept_init.py	/^from rule import Rule$/;"	i
Rule	count_top_rule.py	/^from rule import Rule$/;"	i
Rule	decode.py	/^from rule import Rule, is_virtual, nocat$/;"	i
Rule	em_trainer.py	/^from rule import Rule$/;"	i
Rule	em_trainer64.py	/^from rule import Rule$/;"	i
Rule	extract_alignment.py	/^from rule import Rule$/;"	i
Rule	extract_cycles.py	/^from rule import Rule$/;"	i
Rule	extractor.py	/^from rule import Rule$/;"	i
Rule	forest_prev.py	/^from rule import Rule$/;"	i
Rule	fragment_forest.py	/^from rule import Rule$/;"	i
Rule	grammar.py	/^from rule import Rule, isvar, nocat$/;"	i
Rule	init_unaligned_gram.py	/^from rule import Rule$/;"	i
Rule	non_lexed_weight.py	/^from rule import Rule$/;"	i
Rule	phrase_forest.py	/^from rule import Rule$/;"	i
Rule	rule-format-old2new.py	/^from rule import Rule$/;"	i
Rule	rule.py	/^class Rule(object):$/;"	c
Rule	rule_dumper.py	/^from rule import Rule$/;"	i
Rule	scorer.py	/^from rule import Rule, isvar$/;"	i
Rule	sort_trees.py	/^from rule import Rule$/;"	i
Rule	translation_job.py	/^from rule import Rule$/;"	i
RuleBin	grammar.py	/^class RuleBin(object):$/;"	c
RuleCache	scorer.py	/^class RuleCache(object):$/;"	c
RuleCounter	em_trainer.py	/^class RuleCounter(object):$/;"	c
RuleCounter	em_trainer64.py	/^class RuleCounter(object):$/;"	c
RuleDumper	composed_rule_extractor.py	/^from extractor import RuleDumper$/;"	i
RuleDumper	extractor.py	/^from rule_dumper import RuleDumper$/;"	i
RuleDumper	phrase_forest.py	/^from rule_dumper import RuleDumper$/;"	i
RuleDumper	rule_dumper.py	/^class RuleDumper(object):$/;"	c
RuleType	feature.py	/^class RuleType(Feature):$/;"	c
SAMPLER	Parallel_Sampler.py	/^    SAMPLER = init_split(samples, False)$/;"	v
SAMPLER	add_lexweights.py	/^    SAMPLER = None$/;"	v	class:Sample
SAMPLER	anneal_hrg_sampler.py	/^    SAMPLER = init_split(samples, False)$/;"	v
SAMPLER	cut_type_top_down_sampler.py	/^    SAMPLER = None$/;"	v	class:Sample
SAMPLER	dump_sampler.py	/^    SAMPLER = None$/;"	v	class:Sample
SAMPLER	edge_type_top_down_sampler.py	/^    SAMPLER = None$/;"	v	class:Sample
SAMPLER	hrg_sampler.py	/^            SAMPLER = cPickle.load(f)$/;"	v
SAMPLER	hrg_sampler.py	/^        SAMPLER = init_sampler()$/;"	v
SAMPLER	initial_sampler.py	/^    SAMPLER = None$/;"	v	class:Sample
SAMPLER	load_samples.py	/^    SAMPLER = init_split(samples, False)$/;"	v
SAMPLER	simulated_sampler.py	/^    SAMPLER = None$/;"	v	class:Sample
SCFG	decoder.py	/^from grammar import LexicalITG, SCFG$/;"	i
SCFG	grammar.py	/^class SCFG(Grammar):$/;"	c
SCOPE_PRUNE	extractor-ghkm.py	/^SCOPE_PRUNE = True$/;"	v
SEdge	hgshow.py	/^class SEdge(Deduction):$/;"	c
SHORTEST_PATH	hypergraph.py	/^SHORTEST_PATH = (lambda x,y: min([x,y]),$/;"	v
SHRGRule	HRGRule.py	/^class SHRGRule(object):$/;"	c
SHRGRule	HRGSample.py	/^from HRGRule import SHRGRule$/;"	i
SNode	hgshow.py	/^class SNode(Node):$/;"	c
SRC	extractor-ghkm.py	/^SRC = "\/p\/mt-scratch2\/chung\/stages\/train\/training.chi"$/;"	v
SRC_PRE	extractor-ghkm.py	/^SRC_PRE = '"C_'$/;"	v
START	abc_parser.py	/^START = '[S]'$/;"	v
START	composed_rule_extractor.py	/^from abc_parser import START, PHRASE$/;"	i
START	em_trainer.py	/^from abc_parser import STRAIGHT, INVERTED, START$/;"	i
START	em_trainer64.py	/^from abc_parser import STRAIGHT, INVERTED, START$/;"	i
STRAIGHT	abc_parser.py	/^STRAIGHT = '[STRAIGHT]'$/;"	v
STRAIGHT	em_trainer.py	/^from abc_parser import STRAIGHT, INVERTED, START$/;"	i
STRAIGHT	em_trainer64.py	/^from abc_parser import STRAIGHT, INVERTED, START$/;"	i
Sample	HRGSample.py	/^class Sample():$/;"	c
Sample	add_lexweights.py	/^class Sample():$/;"	c
Sample	amr_fragment.py	/^from HRGSample import Sample$/;"	i
Sample	cut_type_top_down_sampler.py	/^class Sample():$/;"	c
Sample	dump_sampler.py	/^class Sample():$/;"	c
Sample	edge_type_top_down_sampler.py	/^class Sample():$/;"	c
Sample	initial_sampler.py	/^class Sample():$/;"	c
Sample	parallel_sampler.py	/^class Sample():$/;"	c
Sample	simulated_sampler.py	/^class Sample():$/;"	c
Sampler	HRGSample.py	/^class Sampler(object):$/;"	c
Sampler	add_lexweights.py	/^class Sampler(object):$/;"	c
Sampler	cut_type_top_down_sampler.py	/^class Sampler(object):$/;"	c
Sampler	dump_sampler.py	/^class Sampler(object):$/;"	c
Sampler	edge_type_top_down_sampler.py	/^class Sampler(object):$/;"	c
Sampler	initial_sampler.py	/^class Sampler(object):$/;"	c
Sampler	parallel_sampler.py	/^class Sampler(object):$/;"	c
Sampler	simulated_sampler.py	/^class Sampler(object):$/;"	c
Serialize	gflags.py	/^  def Serialize(self):$/;"	m	class:Flag
Serialize	gflags.py	/^  def Serialize(self):$/;"	m	class:MultiFlag
Serialize	gflags.py	/^  def Serialize(self, value):$/;"	m	class:ArgumentSerializer
Serialize	gflags.py	/^  def Serialize(self, value):$/;"	m	class:ListSerializer
Serialize	gflags_python3.py	/^  def Serialize(self):$/;"	m	class:Flag
Serialize	gflags_python3.py	/^  def Serialize(self):$/;"	m	class:MultiFlag
Serialize	gflags_python3.py	/^  def Serialize(self, value):$/;"	m	class:ArgumentSerializer
Serialize	gflags_python3.py	/^  def Serialize(self, value):$/;"	m	class:ListSerializer
SetDefault	gflags.py	/^  def SetDefault(self, name, value):$/;"	m	class:FlagValues
SetDefault	gflags.py	/^  def SetDefault(self, value):$/;"	m	class:Flag
SetDefault	gflags_python3.py	/^  def SetDefault(self, name, value):$/;"	m	class:FlagValues
SetDefault	gflags_python3.py	/^  def SetDefault(self, value):$/;"	m	class:Flag
ShortestUniquePrefixes	gflags.py	/^  def ShortestUniquePrefixes(self, fl):$/;"	m	class:FlagValues
ShortestUniquePrefixes	gflags_python3.py	/^  def ShortestUniquePrefixes(self, fl):$/;"	m	class:FlagValues
SimpleBin	chart.py	/^class SimpleBin(object):$/;"	c
SimpleValidator	gflags_validators.py	/^class SimpleValidator(Validator):$/;"	c
SpecialValue	hgraph.py	/^class SpecialValue(str):$/;"	c
StrLiteral	hgraph.py	/^class StrLiteral(str):$/;"	c
TRG_PRE	extractor-ghkm.py	/^TRG_PRE = '"E_'$/;"	v
Tabulator	scorer.py	/^class Tabulator(object):$/;"	c
TestCase	hypergraph_test.py	/^from unittest import TestCase$/;"	i
TextWrap	gflags.py	/^def TextWrap(text, length=None, indent='', firstline_indent=None, tabs='    '):$/;"	f
TextWrap	gflags_python3.py	/^def TextWrap(text, length=None, indent='', firstline_indent=None, tabs='    '):$/;"	f
TranslationJob	decoder.py	/^from translation_job import TranslationJob$/;"	i
TranslationJob	translation_job.py	/^class TranslationJob(object):$/;"	c
TreeFile	Parallel_Sampler.py	/^class TreeFile():$/;"	c
TreeFile	add_lexweights.py	/^class TreeFile():$/;"	c
TreeFile	anneal_hrg_sampler.py	/^class TreeFile():$/;"	c
TreeFile	cut_type_top_down_sampler.py	/^class TreeFile():$/;"	c
TreeFile	dump_sample.py	/^class TreeFile():$/;"	c
TreeFile	dump_sampler.py	/^class TreeFile():$/;"	c
TreeFile	edge_type_top_down_sampler.py	/^class TreeFile():$/;"	c
TreeFile	hrg_sampler.py	/^class TreeFile():$/;"	c
TreeFile	initial_sampler.py	/^class TreeFile():$/;"	c
TreeFile	load_samples.py	/^class TreeFile():$/;"	c
TreeFile	parallel_sampler.py	/^class TreeFile():$/;"	c
TreeFile	simulated_sampler.py	/^class TreeFile():$/;"	c
TrieNode	grammar.py	/^class TrieNode(dict):$/;"	c
Type	gflags.py	/^  def Type(self):$/;"	m	class:ArgumentParser
Type	gflags.py	/^  def Type(self):$/;"	m	class:BaseListParser
Type	gflags.py	/^  def Type(self):$/;"	m	class:BooleanParser
Type	gflags.py	/^  def Type(self):$/;"	m	class:EnumParser
Type	gflags.py	/^  def Type(self):$/;"	m	class:Flag
Type	gflags.py	/^  def Type(self):$/;"	m	class:FloatParser
Type	gflags.py	/^  def Type(self):$/;"	m	class:IntegerParser
Type	gflags.py	/^  def Type(self):$/;"	m	class:MultiFlag
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:ArgumentParser
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:BaseListParser
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:BooleanParser
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:EnumParser
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:Flag
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:FloatParser
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:IntegerParser
Type	gflags_python3.py	/^  def Type(self):$/;"	m	class:MultiFlag
TypeIndexer	cut_type_top_down_sampler.py	/^class TypeIndexer(object):$/;"	c
TypeIndexer	edge_type_top_down_sampler.py	/^class TypeIndexer(object):$/;"	c
TypeIndexer	parallel_sampler.py	/^class TypeIndexer(object):$/;"	c
TypeIndexer	simulated_sampler.py	/^class TypeIndexer(object):$/;"	c
UnknownWord	feature.py	/^class UnknownWord(Feature):$/;"	c
Unparse	gflags.py	/^  def Unparse(self):$/;"	m	class:Flag
Unparse	gflags_python3.py	/^  def Unparse(self):$/;"	m	class:Flag
UnrecognizedFlag	gflags.py	/^class UnrecognizedFlag(FlagsError):$/;"	c
UnrecognizedFlag	gflags_python3.py	/^class UnrecognizedFlag(FlagsError):$/;"	c
UnrecognizedFlagError	gflags.py	/^class UnrecognizedFlagError(UnrecognizedFlag):$/;"	c
UnrecognizedFlagError	gflags_python3.py	/^class UnrecognizedFlagError(UnrecognizedFlag):$/;"	c
UseGnuGetOpt	gflags.py	/^  def UseGnuGetOpt(self, use_gnu_getopt=True):$/;"	m	class:FlagValues
UseGnuGetOpt	gflags_python3.py	/^  def UseGnuGetOpt(self, use_gnu_getopt=True):$/;"	m	class:FlagValues
Validator	gflags_validators.py	/^class Validator(object):$/;"	c
Verify	gflags_validators.py	/^  def Verify(self, flag_values):$/;"	m	class:Validator
VmB	mymonitor.py	/^def VmB(secret_file, VmKey):$/;"	f
WhitespaceSeparatedListParser	gflags.py	/^class WhitespaceSeparatedListParser(BaseListParser):$/;"	c
WhitespaceSeparatedListParser	gflags_python3.py	/^class WhitespaceSeparatedListParser(BaseListParser):$/;"	c
WriteCustomInfoInXMLFormat	gflags.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:ArgumentParser
WriteCustomInfoInXMLFormat	gflags.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:ListParser
WriteCustomInfoInXMLFormat	gflags.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:NumericParser
WriteCustomInfoInXMLFormat	gflags.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:WhitespaceSeparatedListParser
WriteCustomInfoInXMLFormat	gflags_python3.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:ArgumentParser
WriteCustomInfoInXMLFormat	gflags_python3.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:ListParser
WriteCustomInfoInXMLFormat	gflags_python3.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:NumericParser
WriteCustomInfoInXMLFormat	gflags_python3.py	/^  def WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:WhitespaceSeparatedListParser
WriteHelpInXMLFormat	gflags.py	/^  def WriteHelpInXMLFormat(self, outfile=None):$/;"	m	class:FlagValues
WriteHelpInXMLFormat	gflags_python3.py	/^  def WriteHelpInXMLFormat(self, outfile=None):$/;"	m	class:FlagValues
WriteInfoInXMLFormat	gflags.py	/^  def WriteInfoInXMLFormat(self, outfile, module_name, is_key=False, indent=''):$/;"	m	class:Flag
WriteInfoInXMLFormat	gflags_python3.py	/^  def WriteInfoInXMLFormat(self, outfile, module_name, is_key=False, indent=''):$/;"	m	class:Flag
ZERO	HRGSample.py	/^from common import INF, ZERO$/;"	i
ZERO	Parallel_Sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	add_lexweights.py	/^from common import INF, ZERO$/;"	i
ZERO	anneal_hrg_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	common.py	/^ZERO = 1e-100$/;"	v
ZERO	cut_type_top_down_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	dump_sample.py	/^from common import INF, ZERO$/;"	i
ZERO	dump_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	edge_type_top_down_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	extractor-ghkm.py	/^ZERO = math.exp(-99)$/;"	v
ZERO	hrg_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	initial_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	load_samples.py	/^from common import INF, ZERO$/;"	i
ZERO	parallel_sampler.py	/^from common import INF, ZERO$/;"	i
ZERO	simulated_sampler.py	/^from common import INF, ZERO$/;"	i
_ArgumentParserCache	gflags.py	/^class _ArgumentParserCache(type):$/;"	c
_ArgumentParserCache	gflags_python3.py	/^class _ArgumentParserCache(type):$/;"	c
_AssertAllValidators	gflags.py	/^  def _AssertAllValidators(self):$/;"	m	class:FlagValues
_AssertAllValidators	gflags_python3.py	/^  def _AssertAllValidators(self):$/;"	m	class:FlagValues
_AssertValidators	gflags.py	/^  def _AssertValidators(self, validators):$/;"	m	class:FlagValues
_AssertValidators	gflags_python3.py	/^  def _AssertValidators(self, validators):$/;"	m	class:FlagValues
_FlagIsRegistered	gflags.py	/^  def _FlagIsRegistered(self, flag_obj):$/;"	m	class:FlagValues
_FlagIsRegistered	gflags_python3.py	/^  def _FlagIsRegistered(self, flag_obj):$/;"	m	class:FlagValues
_GetCallingModule	gflags.py	/^def _GetCallingModule():$/;"	f
_GetCallingModule	gflags_python3.py	/^def _GetCallingModule():$/;"	f
_GetCallingModuleObjectAndName	gflags.py	/^def _GetCallingModuleObjectAndName():$/;"	f
_GetFlagsDefinedByModule	gflags.py	/^  def _GetFlagsDefinedByModule(self, module):$/;"	m	class:FlagValues
_GetFlagsDefinedByModule	gflags_python3.py	/^  def _GetFlagsDefinedByModule(self, module):$/;"	m	class:FlagValues
_GetInputToCheckerFunction	gflags_validators.py	/^  def _GetInputToCheckerFunction(self, flag_values):$/;"	m	class:DictionaryValidator
_GetInputToCheckerFunction	gflags_validators.py	/^  def _GetInputToCheckerFunction(self, flag_values):$/;"	m	class:SimpleValidator
_GetInputToCheckerFunction	gflags_validators.py	/^  def _GetInputToCheckerFunction(self, flag_values):$/;"	m	class:Validator
_GetKeyFlagsForModule	gflags.py	/^  def _GetKeyFlagsForModule(self, module):$/;"	m	class:FlagValues
_GetKeyFlagsForModule	gflags_python3.py	/^  def _GetKeyFlagsForModule(self, module):$/;"	m	class:FlagValues
_GetMainModule	gflags.py	/^def _GetMainModule():$/;"	f
_GetMainModule	gflags_python3.py	/^def _GetMainModule():$/;"	f
_GetModuleObjectAndName	gflags.py	/^def _GetModuleObjectAndName(globals_dict):$/;"	f
_GetModuleObjectAndName	gflags_python3.py	/^def _GetModuleObjectAndName(globals_dict):$/;"	f
_GetThisModuleObjectAndName	gflags.py	/^def _GetThisModuleObjectAndName():$/;"	f
_GetThisModuleObjectAndName	gflags_python3.py	/^def _GetThisModuleObjectAndName():$/;"	f
_InternalDeclareKeyFlags	gflags.py	/^def _InternalDeclareKeyFlags(flag_names,$/;"	f
_InternalDeclareKeyFlags	gflags_python3.py	/^def _InternalDeclareKeyFlags(flag_names,$/;"	f
_MakeXMLSafe	gflags.py	/^def _MakeXMLSafe(s):$/;"	f
_MakeXMLSafe	gflags_python3.py	/^def _MakeXMLSafe(s):$/;"	f
_RUNNING_PYCHECKER	gflags.py	/^_RUNNING_PYCHECKER = 'pychecker.python' in sys.modules$/;"	v
_RUNNING_PYCHECKER	gflags_python3.py	/^_RUNNING_PYCHECKER = 'pychecker.python' in sys.modules$/;"	v
_RegisterBoundsValidatorIfNeeded	gflags.py	/^def _RegisterBoundsValidatorIfNeeded(parser, name, flag_values):$/;"	f
_RegisterBoundsValidatorIfNeeded	gflags_python3.py	/^def _RegisterBoundsValidatorIfNeeded(parser, name, flag_values):$/;"	f
_RegisterFlagByModule	gflags.py	/^  def _RegisterFlagByModule(self, module_name, flag):$/;"	m	class:FlagValues
_RegisterFlagByModule	gflags_python3.py	/^  def _RegisterFlagByModule(self, module_name, flag):$/;"	m	class:FlagValues
_RegisterFlagByModuleId	gflags.py	/^  def _RegisterFlagByModuleId(self, module_id, flag):$/;"	m	class:FlagValues
_RegisterKeyFlagForModule	gflags.py	/^  def _RegisterKeyFlagForModule(self, module_name, flag):$/;"	m	class:FlagValues
_RegisterKeyFlagForModule	gflags_python3.py	/^  def _RegisterKeyFlagForModule(self, module_name, flag):$/;"	m	class:FlagValues
_SPECIAL_FLAGS	gflags.py	/^_SPECIAL_FLAGS = FlagValues()$/;"	v
_SPECIAL_FLAGS	gflags_python3.py	/^_SPECIAL_FLAGS = FlagValues()$/;"	v
_StrOrUnicode	gflags.py	/^def _StrOrUnicode(value):$/;"	f
_VmB	monitor.py	/^def _VmB(VmKey):$/;"	f
_WriteCustomInfoInXMLFormat	gflags.py	/^  def _WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:EnumFlag
_WriteCustomInfoInXMLFormat	gflags.py	/^  def _WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:Flag
_WriteCustomInfoInXMLFormat	gflags_python3.py	/^  def _WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:EnumFlag
_WriteCustomInfoInXMLFormat	gflags_python3.py	/^  def _WriteCustomInfoInXMLFormat(self, outfile, indent):$/;"	m	class:Flag
_WriteSimpleXMLElement	gflags.py	/^def _WriteSimpleXMLElement(outfile, name, value, indent):$/;"	f
_WriteSimpleXMLElement	gflags_python3.py	/^def _WriteSimpleXMLElement(outfile, name, value, indent):$/;"	f
__GetFlagFileLines	gflags.py	/^  def __GetFlagFileLines(self, filename, parsed_file_list):$/;"	m	class:FlagValues	file:
__GetFlagFileLines	gflags_python3.py	/^  def __GetFlagFileLines(self, filename, parsed_file_list):$/;"	m	class:FlagValues	file:
__GetParsedValueAsString	gflags.py	/^  def __GetParsedValueAsString(self, value):$/;"	m	class:Flag	file:
__GetParsedValueAsString	gflags_python3.py	/^  def __GetParsedValueAsString(self, value):$/;"	m	class:Flag	file:
__IsFlagFileDirective	gflags.py	/^  def __IsFlagFileDirective(self, flag_string):$/;"	m	class:FlagValues	file:
__IsFlagFileDirective	gflags_python3.py	/^  def __IsFlagFileDirective(self, flag_string):$/;"	m	class:FlagValues	file:
__RemoveFlagFromDictByModule	gflags.py	/^  def __RemoveFlagFromDictByModule(self, flags_by_module_dict, flag_obj):$/;"	m	class:FlagValues	file:
__RemoveFlagFromDictByModule	gflags_python3.py	/^  def __RemoveFlagFromDictByModule(self, flags_by_module_dict, flag_obj):$/;"	m	class:FlagValues	file:
__RenderFlagList	gflags.py	/^  def __RenderFlagList(self, flaglist, output_lines, prefix="  "):$/;"	m	class:FlagValues	file:
__RenderFlagList	gflags_python3.py	/^  def __RenderFlagList(self, flaglist, output_lines, prefix="  "):$/;"	m	class:FlagValues	file:
__RenderModuleFlags	gflags.py	/^  def __RenderModuleFlags(self, module, flags, output_lines, prefix=""):$/;"	m	class:FlagValues	file:
__RenderModuleFlags	gflags_python3.py	/^  def __RenderModuleFlags(self, module, flags, output_lines, prefix=""):$/;"	m	class:FlagValues	file:
__RenderOurModuleFlags	gflags.py	/^  def __RenderOurModuleFlags(self, module, output_lines, prefix=""):$/;"	m	class:FlagValues	file:
__RenderOurModuleFlags	gflags_python3.py	/^  def __RenderOurModuleFlags(self, module, output_lines, prefix=""):$/;"	m	class:FlagValues	file:
__RenderOurModuleKeyFlags	gflags.py	/^  def __RenderOurModuleKeyFlags(self, module, output_lines, prefix=""):$/;"	m	class:FlagValues	file:
__RenderOurModuleKeyFlags	gflags_python3.py	/^  def __RenderOurModuleKeyFlags(self, module, output_lines, prefix=""):$/;"	m	class:FlagValues	file:
__author__	gflags_validators.py	/^__author__ = 'olexiy@google.com (Olexiy Oryeshko)'$/;"	v
__call__	gflags.py	/^  def __call__(mcs, *args, **kwargs):$/;"	m	class:_ArgumentParserCache	file:
__call__	gflags.py	/^  def __call__(self, argv):$/;"	m	class:FlagValues	file:
__call__	gflags_python3.py	/^  def __call__(mcs, *args, **kwargs):$/;"	m	class:_ArgumentParserCache	file:
__call__	gflags_python3.py	/^  def __call__(self, argv):$/;"	m	class:FlagValues	file:
__call__	swig_lm.py	/^    def __call__(self, s):$/;"	m	class:LanguageModel	file:
__cmp__	mymonitor.py	/^    def __cmp__(self, other):$/;"	m	class:Mem	file:
__contains__	gflags.py	/^  def __contains__(self, name):$/;"	m	class:FlagValues	file:
__contains__	gflags_python3.py	/^  def __contains__(self, name):$/;"	m	class:FlagValues	file:
__delattr__	gflags.py	/^  def __delattr__(self, flag_name):$/;"	m	class:FlagValues	file:
__delattr__	gflags_python3.py	/^  def __delattr__(self, flag_name):$/;"	m	class:FlagValues	file:
__eq__	HRGRule.py	/^    def __eq__(self, other):$/;"	m	class:SHRGRule	file:
__eq__	amr_fragment.py	/^    def __eq__(self, other):$/;"	m	class:AMRFragment	file:
__eq__	decode.py	/^    def __eq__(self, other):$/;"	m	class:Item	file:
__eq__	dot_chart.py	/^    def __eq__(self, other):$/;"	m	class:DotItem	file:
__eq__	fragment_hypergraph.py	/^    def __eq__(self, other):$/;"	m	class:FragmentHGNode	file:
__eq__	gflags.py	/^  def __eq__(self, other):$/;"	m	class:Flag	file:
__eq__	hgraph.py	/^    def __eq__(self, other):$/;"	m	class:Hgraph	file:
__eq__	rule.py	/^    def __eq__(self, other):$/;"	m	class:Rule	file:
__getattr__	gflags.py	/^  def __getattr__(self, name):$/;"	m	class:FlagValues	file:
__getattr__	gflags_python3.py	/^  def __getattr__(self, name):$/;"	m	class:FlagValues	file:
__getitem__	chart.py	/^    def __getitem__(self, i):$/;"	m	class:Bin	file:
__getitem__	chart.py	/^    def __getitem__(self, i):$/;"	m	class:SimpleBin	file:
__getitem__	cube.py	/^    def __getitem__(self, n):$/;"	m	class:Cube	file:
__getitem__	gflags.py	/^  def __getitem__(self, name):$/;"	m	class:FlagValues	file:
__getitem__	gflags_python3.py	/^  def __getitem__(self, name):$/;"	m	class:FlagValues	file:
__getitem__	grammar.py	/^    def __getitem__(self, i):$/;"	m	class:RuleBin	file:
__getitem__	hgraph.py	/^    def __getitem__(self, k):$/;"	m	class:ListMap	file:
__getitem__	lazy_list_merger.py	/^    def __getitem__(self, n):$/;"	m	class:LazyListMerger	file:
__getitem__	references.py	/^    def __getitem__(self, ngram):$/;"	m	class:RefCounter	file:
__gt__	mymonitor.py	/^    def __gt__(self, other):$/;"	m	class:Mem	file:
__hash__	HRGRule.py	/^    def __hash__(self):$/;"	m	class:SHRGRule	file:
__hash__	amr_fragment.py	/^    def __hash__(self):$/;"	m	class:AMRFragment	file:
__hash__	decode.py	/^    def __hash__(self):$/;"	m	class:Item	file:
__hash__	dot_chart.py	/^    def __hash__(self):$/;"	m	class:DotItem	file:
__hash__	fragment_hypergraph.py	/^    def __hash__(self):$/;"	m	class:FragmentHGNode	file:
__hash__	gflags.py	/^  def __hash__(self):$/;"	m	class:Flag	file:
__hash__	hgraph.py	/^    def __hash__(self):$/;"	m	class:Hgraph	file:
__hash__	rule.py	/^    def __hash__(self):$/;"	m	class:Rule	file:
__init__	HRGRule.py	/^    def __init__(self):$/;"	m	class:SHRGRule
__init__	HRGSample.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	HRGSample.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	HRGSample.py	/^    def __init__(self, hg, sent_num, SAMPLER=None):$/;"	m	class:Sample
__init__	Parallel_Sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	abc_parser.py	/^    def __init__(self):$/;"	m	class:EdgeIndex
__init__	abc_parser.py	/^    def __init__(self):$/;"	m	class:NeighborIndex
__init__	abc_parser.py	/^    def __init__(self, n1, n2, phrases):$/;"	m	class:ABCParser
__init__	add_lexweights.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	add_lexweights.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	add_lexweights.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	add_lexweights.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	alignment.py	/^    def __init__(self, fwords, ewords, comment=None):$/;"	m	class:Alignment
__init__	amr.py	/^  def __init__(self,var_list=None,var_value_list=None,link_list=None,const_link_list=None):$/;"	m	class:AMR
__init__	amr_fragment.py	/^    def __init__(self, n_edges, n_nodes, graph):$/;"	m	class:AMRFragment
__init__	amr_graph.py	/^    def __init__(self, graph, is_const = False):$/;"	m	class:AMRNode
__init__	amr_graph.py	/^    def __init__(self, label, graph, h_node, t_node = None):$/;"	m	class:AMREdge
__init__	amr_graph.py	/^    def __init__(self, line):$/;"	m	class:AMRGraph
__init__	amr_old.py	/^  def __init__(self,var_list=None,var_value_list=None,link_list=None,const_link_list=None):$/;"	m	class:AMR
__init__	amr_without_alignment.py	/^  def __init__(self,var_list=None,var_value_list=None,link_list=None,const_link_list=None):$/;"	m	class:AMR
__init__	anneal_hrg_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	chart.py	/^    def __init__(self, K, chart):  # K is ignored$/;"	m	class:SimpleBin
__init__	chart.py	/^    def __init__(self, K, chart):$/;"	m	class:Bin
__init__	chart.py	/^    def __init__(self, fwords, start_symbol):$/;"	m	class:Chart
__init__	composed_rule_extractor.py	/^    def __init__(self, treefile):$/;"	m	class:ComposedRuleExtractor
__init__	consensus_training.py	/^    def __init__(self, max_n):$/;"	m	class:NgramCounter
__init__	consensus_training.py	/^    def __init__(self, max_n, features, hgdir, refs):$/;"	m	class:ConsensusTrainer
__init__	consensus_training.py	/^    def __init__(self,$/;"	m	class:ConsensusTrainingCounter
__init__	corpus_server.py	/^    def __init__(self, nodes):$/;"	m	class:CorpusServer
__init__	cube.py	/^    def __init__(self):$/;"	m	class:Cube
__init__	cut_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:ConflictTester
__init__	cut_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:CutType
__init__	cut_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	cut_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	cut_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:TypeIndexer
__init__	cut_type_top_down_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	cut_type_top_down_sampler.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	cut_type_top_down_sampler.py	/^    def __init__(self, sample, node, parent):$/;"	m	class:CutSite
__init__	decode.py	/^    def __init__(self, heuristic='cyk'):$/;"	m	class:Agenda
__init__	decode.py	/^    def __init__(self, rule=None, ants=None, features=None):$/;"	m	class:Deduction
__init__	decode.py	/^    def __init__(self, var, i, j, state, deduction, cost):$/;"	m	class:Item
__init__	decode.py	/^    def __init__(self,$/;"	m	class:Decoder
__init__	dot_chart.py	/^    def __init__(self, chart, grammar):$/;"	m	class:DotChart
__init__	dot_chart.py	/^    def __init__(self, node, i, j, ants):$/;"	m	class:DotItem
__init__	dump_sample.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	dump_sampler.py	/^    def __init__(self):$/;"	m	class:ConflictTester
__init__	dump_sampler.py	/^    def __init__(self):$/;"	m	class:CutType
__init__	dump_sampler.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	dump_sampler.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	dump_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	dump_sampler.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	dump_sampler.py	/^    def __init__(self, sample, node, parent):$/;"	m	class:CutSite
__init__	dump_sampler.py	/^    def __init__(self, samples):$/;"	m	class:CutTypeIndex
__init__	edge_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:ConflictTester
__init__	edge_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:CutType
__init__	edge_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	edge_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	edge_type_top_down_sampler.py	/^    def __init__(self):$/;"	m	class:TypeIndexer
__init__	edge_type_top_down_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	edge_type_top_down_sampler.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	edge_type_top_down_sampler.py	/^    def __init__(self, sample, node, parent):$/;"	m	class:CutSite
__init__	em_trainer.py	/^    def __init__(self):$/;"	m	class:RuleCounter
__init__	em_trainer.py	/^    def __init__(self,$/;"	m	class:EMTrainer
__init__	em_trainer64.py	/^    def __init__(self):$/;"	m	class:RuleCounter
__init__	em_trainer64.py	/^    def __init__(self,$/;"	m	class:EMTrainer
__init__	extractor.py	/^    def __init__(self,$/;"	m	class:Extractor
__init__	feature.py	/^    def __init__(self):$/;"	m	class:FE
__init__	feature.py	/^    def __init__(self):$/;"	m	class:Feature
__init__	feature.py	/^    def __init__(self):$/;"	m	class:ITG
__init__	feature.py	/^    def __init__(self):$/;"	m	class:LengthPenalty
__init__	feature.py	/^    def __init__(self):$/;"	m	class:NTMismatch
__init__	feature.py	/^    def __init__(self, m, lmfile):$/;"	m	class:LM
__init__	feature.py	/^    def __init__(self, m, lmfile):$/;"	m	class:MockLM
__init__	features.py	/^    def __init__(self, features_weights, weight_range_str=None):$/;"	m	class:Features
__init__	fragment_hypergraph.py	/^    def __init__(self, nt, fi, fj, fragment, _nosample=False, _poison=False, _noprint=False):$/;"	m	class:FragmentHGNode
__init__	fragment_hypergraph.py	/^    def __init__(self, rule=None):$/;"	m	class:FragmentHGEdge
__init__	gflags.py	/^  def __init__(self):$/;"	m	class:FlagValues
__init__	gflags.py	/^  def __init__(self):$/;"	m	class:HelpFlag
__init__	gflags.py	/^  def __init__(self):$/;"	m	class:HelpXMLFlag
__init__	gflags.py	/^  def __init__(self):$/;"	m	class:HelpshortFlag
__init__	gflags.py	/^  def __init__(self):$/;"	m	class:ListParser
__init__	gflags.py	/^  def __init__(self):$/;"	m	class:WhitespaceSeparatedListParser
__init__	gflags.py	/^  def __init__(self, *args, **kwargs):$/;"	m	class:MultiFlag
__init__	gflags.py	/^  def __init__(self, enum_values=None):$/;"	m	class:EnumParser
__init__	gflags.py	/^  def __init__(self, flagname, flag_values, other_flag_values=None):$/;"	m	class:DuplicateFlagError
__init__	gflags.py	/^  def __init__(self, flagname, flagvalue=''):$/;"	m	class:UnrecognizedFlagError
__init__	gflags.py	/^  def __init__(self, list_sep):$/;"	m	class:ListSerializer
__init__	gflags.py	/^  def __init__(self, lower_bound=None, upper_bound=None):$/;"	m	class:FloatParser
__init__	gflags.py	/^  def __init__(self, lower_bound=None, upper_bound=None):$/;"	m	class:IntegerParser
__init__	gflags.py	/^  def __init__(self, name, default, help, enum_values=None,$/;"	m	class:EnumFlag
__init__	gflags.py	/^  def __init__(self, name, default, help, short_name=None, **args):$/;"	m	class:BooleanFlag
__init__	gflags.py	/^  def __init__(self, parser, serializer, name, default, help_string,$/;"	m	class:Flag
__init__	gflags.py	/^  def __init__(self, token=None, name=None):$/;"	m	class:BaseListParser
__init__	gflags_python3.py	/^  def __init__(self):$/;"	m	class:FlagValues
__init__	gflags_python3.py	/^  def __init__(self):$/;"	m	class:HelpFlag
__init__	gflags_python3.py	/^  def __init__(self):$/;"	m	class:HelpXMLFlag
__init__	gflags_python3.py	/^  def __init__(self):$/;"	m	class:HelpshortFlag
__init__	gflags_python3.py	/^  def __init__(self):$/;"	m	class:ListParser
__init__	gflags_python3.py	/^  def __init__(self):$/;"	m	class:WhitespaceSeparatedListParser
__init__	gflags_python3.py	/^  def __init__(self, *args, **kwargs):$/;"	m	class:MultiFlag
__init__	gflags_python3.py	/^  def __init__(self, enum_values=None):$/;"	m	class:EnumParser
__init__	gflags_python3.py	/^  def __init__(self, flagname, flag_values, other_flag_values=None):$/;"	m	class:DuplicateFlagError
__init__	gflags_python3.py	/^  def __init__(self, flagname, flagvalue=''):$/;"	m	class:UnrecognizedFlagError
__init__	gflags_python3.py	/^  def __init__(self, list_sep):$/;"	m	class:ListSerializer
__init__	gflags_python3.py	/^  def __init__(self, lower_bound=None, upper_bound=None):$/;"	m	class:FloatParser
__init__	gflags_python3.py	/^  def __init__(self, lower_bound=None, upper_bound=None):$/;"	m	class:IntegerParser
__init__	gflags_python3.py	/^  def __init__(self, name, default, help, enum_values=None,$/;"	m	class:EnumFlag
__init__	gflags_python3.py	/^  def __init__(self, name, default, help, short_name=None, **args):$/;"	m	class:BooleanFlag
__init__	gflags_python3.py	/^  def __init__(self, parser, serializer, name, default, help_string,$/;"	m	class:Flag
__init__	gflags_python3.py	/^  def __init__(self, token=None, name=None):$/;"	m	class:BaseListParser
__init__	gflags_validators.py	/^  def __init__(self, checker, message):$/;"	m	class:Validator
__init__	gflags_validators.py	/^  def __init__(self, flag_name, checker, message):$/;"	m	class:SimpleValidator
__init__	gflags_validators.py	/^  def __init__(self, flag_names, checker, message):$/;"	m	class:DictionaryValidator
__init__	grammar.py	/^    def __init__(self, K):$/;"	m	class:RuleBin
__init__	grammar.py	/^    def __init__(self, filename, rule_bin_size, features):$/;"	m	class:LexicalITG
__init__	grammar.py	/^    def __init__(self, filename, rule_bin_size, features):$/;"	m	class:SCFG
__init__	grammar.py	/^    def __init__(self, rule_bin_size):$/;"	m	class:Grammar
__init__	grammar.py	/^    def __init__(self, rule_bin_size, sym_list):$/;"	m	class:TrieNode
__init__	hgraph.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Hgraph
__init__	hgraph.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:ListMap
__init__	hrg_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	hypergraph.py	/^    def __init__(self):$/;"	m	class:Edge
__init__	hypergraph.py	/^    def __init__(self):$/;"	m	class:Node
__init__	hypergraph.py	/^    def __init__(self, edge, subpaths):$/;"	m	class:Path
__init__	hypergraph.py	/^    def __init__(self, node_class=Node, edge_class=Edge):$/;"	m	class:Deserializer
__init__	hypergraph.py	/^    def __init__(self, root):$/;"	m	class:Hypergraph
__init__	hypergraph_test.py	/^    def __init__(self):$/;"	m	class:ForestEdge
__init__	hypergraph_test.py	/^    def __init__(self, label):$/;"	m	class:ForestNode
__init__	initial_sampler.py	/^    def __init__(self):$/;"	m	class:ConflictTester
__init__	initial_sampler.py	/^    def __init__(self):$/;"	m	class:CutType
__init__	initial_sampler.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	initial_sampler.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	initial_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	initial_sampler.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	initial_sampler.py	/^    def __init__(self, sample, node, parent):$/;"	m	class:CutSite
__init__	initial_sampler.py	/^    def __init__(self, samples):$/;"	m	class:CutTypeIndex
__init__	lazy_list_merger.py	/^    def __init__(self):$/;"	m	class:LazyListMerger
__init__	lexical_weighter.py	/^    def __init__(self,$/;"	m	class:LexicalWeighter
__init__	load_samples.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	monitor.py	/^    def __init__(self, node=None):$/;"	m	class:Monitor
__init__	mymonitor.py	/^    def __init__(self, v=0, s=""):$/;"	m	class:Mem
__init__	ngram.py	/^    def __init__(self, order):$/;"	m	class:NgramEnumerator
__init__	parallel_sampler.py	/^    def __init__(self):$/;"	m	class:ConflictTester
__init__	parallel_sampler.py	/^    def __init__(self):$/;"	m	class:CutType
__init__	parallel_sampler.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	parallel_sampler.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	parallel_sampler.py	/^    def __init__(self):$/;"	m	class:TypeIndexer
__init__	parallel_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	parallel_sampler.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	parallel_sampler.py	/^    def __init__(self, sample, node, parent):$/;"	m	class:CutSite
__init__	percent_counter.py	/^    def __init__(self, total=-1, input='', file=stdout):$/;"	m	class:PercentCounter
__init__	phrase_hypergraph.py	/^    def __init__(self, nt, fi, fj, ei, ej):$/;"	m	class:PhraseHGNode
__init__	phrase_hypergraph.py	/^    def __init__(self, rule=None):$/;"	m	class:PhraseHGEdge
__init__	python_lm.py	/^    def __init__(self, str_lm_f):$/;"	m	class:LanguageModel
__init__	references.py	/^    def __init__(self, max_n):$/;"	m	class:RefCounter
__init__	references.py	/^    def __init__(self, ref_prefix, max_n):$/;"	m	class:References
__init__	rule.py	/^    def __init__(self):$/;"	m	class:Rule
__init__	rule_dumper.py	/^    def __init__(self,$/;"	m	class:RuleDumper
__init__	scorer.py	/^    def __init__(self, ffilter, outputdir):$/;"	m	class:Tabulator
__init__	scorer.py	/^    def __init__(self, filename, size):$/;"	m	class:RuleCache
__init__	scorer.py	/^    def __init__(self, sents, maxlen):$/;"	m	class:Filter
__init__	simulated_sampler.py	/^    def __init__(self):$/;"	m	class:ConflictTester
__init__	simulated_sampler.py	/^    def __init__(self):$/;"	m	class:CutType
__init__	simulated_sampler.py	/^    def __init__(self):$/;"	m	class:NPSampler
__init__	simulated_sampler.py	/^    def __init__(self):$/;"	m	class:NTSampler
__init__	simulated_sampler.py	/^    def __init__(self):$/;"	m	class:TypeIndexer
__init__	simulated_sampler.py	/^    def __init__(self, filename):$/;"	m	class:TreeFile
__init__	simulated_sampler.py	/^    def __init__(self, hg, a):$/;"	m	class:Sample
__init__	simulated_sampler.py	/^    def __init__(self, sample, node, parent):$/;"	m	class:CutSite
__init__	swig_lm.py	/^    def __init__(self, m, filename):$/;"	m	class:LanguageModel
__init__	translation_job.py	/^    def __init__(self,$/;"	m	class:TranslationJob
__iter__	chart.py	/^    def __iter__(self):$/;"	m	class:Bin	file:
__iter__	chart.py	/^    def __iter__(self):$/;"	m	class:SimpleBin	file:
__iter__	gflags.py	/^  def __iter__(self):$/;"	m	class:FlagValues	file:
__iter__	gflags_python3.py	/^  def __iter__(self):$/;"	m	class:FlagValues	file:
__iter__	hypergraph.py	/^    def __iter__(self):$/;"	m	class:Hypergraph	file:
__len__	chart.py	/^    def __len__(self):$/;"	m	class:Bin	file:
__len__	chart.py	/^    def __len__(self):$/;"	m	class:Chart	file:
__len__	chart.py	/^    def __len__(self):$/;"	m	class:SimpleBin	file:
__len__	decode.py	/^    def __len__(self):$/;"	m	class:Agenda	file:
__len__	grammar.py	/^    def __len__(self):$/;"	m	class:RuleBin	file:
__lt__	HRGRule.py	/^    def __lt__(self, other):$/;"	m	class:SHRGRule	file:
__lt__	decode.py	/^    def __lt__(self, other):$/;"	m	class:Item	file:
__lt__	gflags.py	/^  def __lt__(self, other):$/;"	m	class:Flag	file:
__lt__	hypergraph.py	/^    def __lt__(self, other):$/;"	m	class:Path	file:
__lt__	mymonitor.py	/^    def __lt__(self, other):$/;"	m	class:Mem	file:
__lt__	phrase_hypergraph.py	/^    def __lt__(self, other):$/;"	m	class:PhraseHGNode	file:
__lt__	rule.py	/^    def __lt__(self, other):$/;"	m	class:Rule	file:
__main__	driver.py	/^    import __main__$/;"	i
__metaclass__	gflags.py	/^  __metaclass__ = _ArgumentParserCache$/;"	v	class:ArgumentParser
__reduce__	hgraph.py	/^    def __reduce__(self):$/;"	m	class:Hgraph	file:
__reduce__	hgraph.py	/^    def __reduce__(self):$/;"	m	class:ListMap	file:
__repr__	amr.py	/^  def __repr__(self):$/;"	m	class:AMR	file:
__repr__	amr_old.py	/^  def __repr__(self):$/;"	m	class:AMR	file:
__repr__	amr_without_alignment.py	/^  def __repr__(self):$/;"	m	class:AMR	file:
__repr__	feature.py	/^    def __repr__(self):$/;"	m	class:Feature	file:
__repr__	hgraph.py	/^    def __repr__(self):$/;"	m	class:Literal	file:
__repr__	hgraph.py	/^    def __repr__(self):$/;"	m	class:StrLiteral	file:
__setattr__	gflags.py	/^  def __setattr__(self, name, value):$/;"	m	class:FlagValues	file:
__setattr__	gflags_python3.py	/^  def __setattr__(self, name, value):$/;"	m	class:FlagValues	file:
__setitem__	gflags.py	/^  def __setitem__(self, name, flag):$/;"	m	class:FlagValues	file:
__setitem__	gflags_python3.py	/^  def __setitem__(self, name, flag):$/;"	m	class:FlagValues	file:
__setitem__	hgraph.py	/^    def __setitem__(self, k, v):$/;"	m	class:ListMap	file:
__slots__	mymonitor.py	/^    __slots__ = "v", "s"$/;"	v	class:Mem
__str__	HRGRule.py	/^    def __str__(self):$/;"	m	class:SHRGRule	file:
__str__	HRGSample.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	add_lexweights.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	amr.py	/^  def __str__(self):$/;"	m	class:AMR	file:
__str__	amr_fragment.py	/^    def __str__(self):$/;"	m	class:AMRFragment	file:
__str__	amr_graph.py	/^    def __str__(self):$/;"	m	class:AMREdge	file:
__str__	amr_graph.py	/^    def __str__(self):$/;"	m	class:AMRGraph	file:
__str__	amr_graph.py	/^    def __str__(self):$/;"	m	class:AMRNode	file:
__str__	amr_old.py	/^  def __str__(self):$/;"	m	class:AMR	file:
__str__	amr_without_alignment.py	/^  def __str__(self):$/;"	m	class:AMR	file:
__str__	cube.py	/^    def __str__(self):$/;"	m	class:Cube	file:
__str__	cut_type_top_down_sampler.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	decode.py	/^    def __str__(self):$/;"	m	class:Deduction	file:
__str__	decode.py	/^    def __str__(self):$/;"	m	class:Item	file:
__str__	dot_chart.py	/^    def __str__(self):$/;"	m	class:DotItem	file:
__str__	dump_sampler.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	edge_type_top_down_sampler.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	fragment_hypergraph.py	/^    def __str__(self):$/;"	m	class:FragmentHGEdge	file:
__str__	fragment_hypergraph.py	/^    def __str__(self):$/;"	m	class:FragmentHGNode	file:
__str__	gflags.py	/^  def __str__(self):$/;"	m	class:FlagValues	file:
__str__	gflags_python3.py	/^  def __str__(self):$/;"	m	class:FlagValues	file:
__str__	hgraph.py	/^    def __str__(self):$/;"	m	class:Literal	file:
__str__	hgraph.py	/^    def __str__(self):$/;"	m	class:StrLiteral	file:
__str__	hgraph.py	/^    def __str__(self, ignore=False):$/;"	m	class:Hgraph	file:
__str__	hypergraph_test.py	/^    def __str__(self):$/;"	m	class:ForestEdge	file:
__str__	hypergraph_test.py	/^    def __str__(self):$/;"	m	class:ForestNode	file:
__str__	initial_sampler.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	lazy_list_merger.py	/^    def __str__(self):$/;"	m	class:LazyListMerger	file:
__str__	mymonitor.py	/^    def __str__(self):$/;"	m	class:Mem	file:
__str__	parallel_sampler.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__str__	phrase_hypergraph.py	/^    def __str__(self):$/;"	m	class:PhraseHGEdge	file:
__str__	phrase_hypergraph.py	/^    def __str__(self):$/;"	m	class:PhraseHGNode	file:
__str__	rule.py	/^    def __str__(self):$/;"	m	class:Rule	file:
__str__	simulated_sampler.py	/^    def __str__(self):$/;"	m	class:Sample	file:
__sub__	mymonitor.py	/^    def __sub__(self, other):$/;"	m	class:Mem	file:
_add_triple	hgraph.py	/^    def _add_triple(self, parent, relation, child, warn=sys.stderr):$/;"	m	class:Hgraph
_exported_flags	gflags.py	/^_exported_flags = {}$/;"	v
_exported_flags	gflags_python3.py	/^_exported_flags = {}$/;"	v
_get_canonical_nodes	hgraph.py	/^    def _get_canonical_nodes(self, prefix = ""):$/;"	m	class:Hgraph
_get_gv_graph	hgraph.py	/^    def _get_gv_graph(self, instances = True):$/;"	m	class:Hgraph
_get_node_hashes	hgraph.py	/^    def _get_node_hashes(self):$/;"	m	class:Hgraph
_graphics	hgraph.py	/^_graphics = False$/;"	v
_help_width	gflags.py	/^_help_width = 80  # width of help output$/;"	v
_help_width	gflags_python3.py	/^_help_width = 80  # width of help output$/;"	v
_instances	gflags.py	/^  _instances = {}$/;"	v	class:_ArgumentParserCache
_instances	gflags_python3.py	/^  _instances = {}$/;"	v	class:_ArgumentParserCache
_newclass	srilm.py	/^    _newclass = 0$/;"	v
_object	srilm.py	/^    class _object : pass$/;"	c
_parser_singleton	hgraph.py	/^    _parser_singleton = None$/;"	v	class:Hgraph
_proc_status	monitor.py	/^_proc_status = '\/proc\/%d\/status' % os.getpid()$/;"	v
_remove_triple	hgraph.py	/^    def _remove_triple(self, parent, relation, child):$/;"	m	class:Hgraph
_replace_triple	hgraph.py	/^    def _replace_triple(self, parent1, relation1, child1, parent2, relation2, child2, warn=sys.stderr):$/;"	m	class:Hgraph
_scale	monitor.py	/^_scale = {'kB': 1024.0, 'mB': 1024.0*1024.0,$/;"	v
_set_concept	hgraph.py	/^    def _set_concept(self, node, concept):$/;"	m	class:Hgraph
_srilm	srilm.py	/^            import _srilm$/;"	i
_srilm	srilm.py	/^    _srilm = swig_import_helper()$/;"	v
_srilm	srilm.py	/^    import _srilm$/;"	i
_swig_getattr	srilm.py	/^def _swig_getattr(self,class_type,name):$/;"	f
_swig_property	srilm.py	/^    _swig_property = property$/;"	v
_swig_repr	srilm.py	/^def _swig_repr(self):$/;"	f
_swig_setattr	srilm.py	/^def _swig_setattr(self,class_type,name,value):$/;"	f
_swig_setattr_nondynamic	srilm.py	/^def _swig_setattr_nondynamic(self,class_type,name,value,static=1):$/;"	f
abtest_base	HRGSample.py	/^def abtest_base(base):$/;"	f
abtest_base	add_lexweights.py	/^def abtest_base(base):$/;"	f
abtest_base	cut_type_top_down_sampler.py	/^def abtest_base(base):$/;"	f
abtest_base	dump_sampler.py	/^def abtest_base(base):$/;"	f
abtest_base	edge_type_top_down_sampler.py	/^def abtest_base(base):$/;"	f
abtest_base	initial_sampler.py	/^def abtest_base(base):$/;"	f
abtest_base	parallel_sampler.py	/^def abtest_base(base):$/;"	f
abtest_base	simulated_sampler.py	/^def abtest_base(base):$/;"	f
acc_time	smatch-table.py	/^   acc_time=main(args)$/;"	v
add	HRGSample.py	/^    def add(self, other):$/;"	m	class:NPSampler
add	abc_parser.py	/^    def add(self, node):$/;"	m	class:NeighborIndex
add	chart.py	/^    def add(self, item):$/;"	m	class:Bin
add	chart.py	/^    def add(self, item):$/;"	m	class:Chart
add	chart.py	/^    def add(self, item):$/;"	m	class:SimpleBin
add	cut_type_top_down_sampler.py	/^    def add(self, key, sample, node):$/;"	m	class:TypeIndexer
add	dot_chart.py	/^    def add(self, dotitem):$/;"	m	class:DotChart
add	dump_sampler.py	/^    def add(self, rule, sample, node):$/;"	m	class:CutTypeIndex
add	edge_type_top_down_sampler.py	/^    def add(self, key, sample, node):$/;"	m	class:TypeIndexer
add	features.py	/^    def add(self, feature, weight):$/;"	m	class:Features
add	grammar.py	/^    def add(self, rule):$/;"	m	class:Grammar
add	grammar.py	/^    def add(self, rule):$/;"	m	class:RuleBin
add	grammar.py	/^    def add(self, rule):$/;"	m	class:TrieNode
add	initial_sampler.py	/^    def add(self, rule, sample, node):$/;"	m	class:CutTypeIndex
add	parallel_sampler.py	/^    def add(self, another):$/;"	m	class:NTSampler
add	parallel_sampler.py	/^    def add(self, another):$/;"	m	class:Sampler
add	parallel_sampler.py	/^    def add(self, key, sample, node):$/;"	m	class:TypeIndexer
add	parallel_sampler.py	/^    def add(self, other):$/;"	m	class:NPSampler
add	rule_dumper.py	/^    def add(self, rules):$/;"	m	class:RuleDumper
add	scorer.py	/^    def add(self, rule):$/;"	m	class:RuleCache
add	simulated_sampler.py	/^    def add(self, key, sample, node):$/;"	m	class:TypeIndexer
add_bounded_prefixes	extractor.py	/^def add_bounded_prefixes(a, ephrases, etree):$/;"	f
add_bounded_prefixes_helper	extractor.py	/^def add_bounded_prefixes_helper(a, phrases, node, i, stack):$/;"	f
add_constituent_prefixes	extractor.py	/^def add_constituent_prefixes(a, ephrase_index):$/;"	f
add_count	em_trainer.py	/^    def add_count(self, rule, c):$/;"	m	class:RuleCounter
add_count	em_trainer64.py	/^    def add_count(self, rule, c):$/;"	m	class:RuleCounter
add_cube	cube.py	/^    def add_cube(self, cube, op):$/;"	m	class:Cube
add_ext_node	amr_fragment.py	/^    def add_ext_node(self, node_num):$/;"	m	class:AMRFragment
add_incoming	amr_graph.py	/^    def add_incoming(self, edge):$/;"	m	class:AMRNode
add_incoming	hypergraph.py	/^    def add_incoming(self, edge):$/;"	m	class:Node
add_list	lazy_list_merger.py	/^    def add_list(self, l):$/;"	m	class:LazyListMerger
add_multiconstituents	extractor.py	/^def add_multiconstituents(a, maxabslen, ephrase_index, consts):$/;"	f
add_node	amr.py	/^  def add_node(node_value):$/;"	m	class:AMR
add_node	amr_old.py	/^  def add_node(node_value):$/;"	m	class:AMR
add_node	amr_without_alignment.py	/^  def add_node(node_value):$/;"	m	class:AMR
add_one_item	forest_prev.py	/^def add_one_item(prev_chart, item):$/;"	f
add_one_item	fragment_forest.py	/^def add_one_item(prev_chart, item):$/;"	f
add_parent_edge	amr_graph.py	/^    def add_parent_edge(self, edge):$/;"	m	class:AMRNode
add_rule	rule_dumper.py	/^    def add_rule(self, r):$/;"	m	class:RuleDumper
add_sister_prefixes	extractor.py	/^def add_sister_prefixes(a, ephrases, etree):$/;"	f
add_sister_prefixes_helper	extractor.py	/^def add_sister_prefixes_helper(a, ephrases, enode, i):$/;"	f
add_tail	hypergraph.py	/^    def add_tail(self, node):$/;"	m	class:Edge
add_unlexed_weight	non_lexed_weight.py	/^def add_unlexed_weight(orig_file, lexed_file):$/;"	f
afile	add_lexweights.py	/^    afile = open(afilename)$/;"	v	class:Sample
afile	cut_type_top_down_sampler.py	/^    afile = open(afilename)$/;"	v	class:Sample
afile	dump_sampler.py	/^    afile = open(afilename)$/;"	v	class:Sample
afile	edge_type_top_down_sampler.py	/^    afile = open(afilename)$/;"	v	class:Sample
afile	hg_show.py	/^    afile = open(afilename)$/;"	v
afile	initial_sampler.py	/^    afile = open(afilename)$/;"	v	class:Sample
afile	phrase_forest.py	/^    afile = open(afilename)$/;"	v
afile	simulated_sampler.py	/^    afile = open(afilename)$/;"	v	class:Sample
afilename	add_lexweights.py	/^    afilename = argv[3]$/;"	v	class:Sample
afilename	cut_type_top_down_sampler.py	/^    afilename = argv[3]$/;"	v	class:Sample
afilename	dump_sampler.py	/^    afilename = argv[3]$/;"	v	class:Sample
afilename	edge_type_top_down_sampler.py	/^    afilename = argv[3]$/;"	v	class:Sample
afilename	em_trainer.py	/^    afilename = args[2] $/;"	v	class:EMTrainer
afilename	em_trainer64.py	/^    afilename = args[2] $/;"	v	class:EMTrainer
afilename	hg_show.py	/^    afilename = sys.argv[3] $/;"	v
afilename	initial_sampler.py	/^    afilename = argv[3]$/;"	v	class:Sample
afilename	phrase_forest.py	/^    afilename = FLAGS.parallel_corpus[2]$/;"	v
afilename	simulated_sampler.py	/^    afilename = argv[3]$/;"	v	class:Sample
agenda_stats	decode.py	/^    def agenda_stats(self):$/;"	m	class:Decoder
align	alignment.py	/^    def align(self, i, j):$/;"	m	class:Alignment
align_file	Parallel_Sampler.py	/^    align_file = argv[3]$/;"	v
align_file	load_samples.py	/^    align_file = argv[3]$/;"	v
align_special_symbols	HRGRule.py	/^    def align_special_symbols(self):$/;"	m	class:SHRGRule
align_special_symbols	rule.py	/^    def align_special_symbols(self):$/;"	m	class:Rule
alignm	extract_alignment.py	/^def alignm(str1, str2):$/;"	f
alignment	Parallel_Sampler.py	/^import alignment$/;"	i
alignment	add_lexweights.py	/^import alignment$/;"	i
alignment	anneal_hrg_sampler.py	/^import alignment$/;"	i
alignment	concept_init.py	/^import alignment$/;"	i
alignment	cut_type_top_down_sampler.py	/^import alignment$/;"	i
alignment	dump_sample.py	/^import alignment$/;"	i
alignment	dump_sampler.py	/^import alignment$/;"	i
alignment	edge_type_top_down_sampler.py	/^import alignment$/;"	i
alignment	extract_alignment.py	/^import alignment$/;"	i
alignment	extract_cycles.py	/^import alignment$/;"	i
alignment	extractor.py	/^import alignment$/;"	i
alignment	forest_prev.py	/^import alignment$/;"	i
alignment	fragment_forest.py	/^import alignment$/;"	i
alignment	hrg_sampler.py	/^import alignment$/;"	i
alignment	init_unaligned_gram.py	/^import alignment$/;"	i
alignment	initial_sampler.py	/^import alignment$/;"	i
alignment	lexweights.py	/^import alignment$/;"	i
alignment	load_samples.py	/^import alignment$/;"	i
alignment	parallel_sampler.py	/^import alignment$/;"	i
alignment	phrase_forest.py	/^import alignment$/;"	i
alignment	simulated_sampler.py	/^import alignment$/;"	i
alignment_file	concept_init.py	/^    alignment_file = sys.argv[3]$/;"	v
alignment_file	extract_alignment.py	/^    alignment_file = sys.argv[3]$/;"	v
alignment_file	forest_prev.py	/^    alignment_file = sys.argv[3]$/;"	v
alignment_file	fragment_forest.py	/^    alignment_file = sys.argv[3]$/;"	v
alignments	add_lexweights.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v	class:Sample
alignments	cut_type_top_down_sampler.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v	class:Sample
alignments	dump_sampler.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v	class:Sample
alignments	edge_type_top_down_sampler.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v	class:Sample
alignments	hg_show.py	/^    alignments = Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v
alignments	initial_sampler.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v	class:Sample
alignments	lexweights.py	/^        alignments = alignment.Alignment.reader_pharaoh(ffile, efile, input_file)$/;"	v
alignments	lexweights.py	/^        alignments = itertools.chain(*[alignment.Alignment.reader(input_file) for input_file in input_files])$/;"	v
alignments	phrase_forest.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v
alignments	simulated_sampler.py	/^    alignments = alignment.Alignment.reader_pharaoh(ffile, efile, afile)$/;"	v	class:Sample
alike	extract_alignment.py	/^def alike(str1, str2):$/;"	f
aline_re	alignment.py	/^    aline_re = re.compile(r"(\\d+)-(\\d+)")$/;"	v	class:Alignment
all_edges	amr_fragment.py	/^    def all_edges(self):$/;"	m	class:AMRFragment
all_stop_words	filter_rules.py	/^def all_stop_words(word_list, stop_words):$/;"	f
all_stop_words	to_lower.py	/^def all_stop_words(word_list, stop_words):$/;"	f
all_stop_wrds	extract_alignment.py	/^def all_stop_wrds(wrd_seq):$/;"	f
allsum	scorer.py	/^allsum = 0.0 # c(*)$/;"	v
amr	amr_graph.py	/^import amr$/;"	i
amr	read_amr.py	/^import amr$/;"	i
amr	read_amr_aligner.py	/^import amr$/;"	i
amr	smatch-table.py	/^import amr$/;"	i
amr	smatch.py	/^import amr$/;"	i
amr_file	Parallel_Sampler.py	/^    amr_file = argv[1]$/;"	v
amr_file	concept_init.py	/^    amr_file = sys.argv[1]$/;"	v
amr_file	extract_alignment.py	/^    amr_file = sys.argv[1]$/;"	v
amr_file	forest_prev.py	/^    amr_file = sys.argv[1]$/;"	v
amr_file	fragment_forest.py	/^    amr_file = sys.argv[1]$/;"	v
amr_file	load_samples.py	/^    amr_file = argv[1]$/;"	v
amr_file	read_amr.py	/^    amr_file = sys.argv[1]$/;"	v
amr_fragment	amr_graph.py	/^import amr_fragment$/;"	i
amr_graph	concept_init.py	/^import amr_graph$/;"	i
amr_graph	data_divider.py	/^import amr_graph$/;"	i
amr_graph	extract_alignment.py	/^import amr_graph$/;"	i
amr_graph	extract_cycles.py	/^import amr_graph$/;"	i
amr_graph	forest_prev.py	/^import amr_graph$/;"	i
amr_graph	fragment_forest.py	/^import amr_graph$/;"	i
amr_graph	init_unaligned_gram.py	/^import amr_graph$/;"	i
amr_graph	read_amr_aligner.py	/^import amr_graph$/;"	i
amr_old	smatch_modified.py	/^import amr_old$/;"	i
amr_parser	amr_graph.py	/^import amr_parser$/;"	i
amr_sent_file	Parallel_Sampler.py	/^    amr_sent_file = argv[2]$/;"	v
amr_sent_file	load_samples.py	/^    amr_sent_file = argv[2]$/;"	v
another_sampler	hrg_sampler.py	/^                another_sampler = cPickle.load(f)$/;"	v
append	hgraph.py	/^    def append(self, k, v):$/;"	m	class:ListMap
apply_node_map	hgraph.py	/^    def apply_node_map(self, node_map, warn=False):$/;"	m	class:Hgraph
argparse	smatch-table.py	/^      import argparse$/;"	i
argparse	smatch.py	/^      import argparse$/;"	i
argparse	smatch_modified.py	/^      import argparse$/;"	i
args	lexweights.py	/^        args = ["-"]$/;"	v
args	smatch-table.py	/^      args=parser.parse_args()$/;"	v
args	smatch-table.py	/^   args=None$/;"	v
args	smatch.py	/^      args=parser.parse_args()$/;"	v
args	smatch.py	/^   args=None$/;"	v
args	smatch_modified.py	/^      args=parser.parse_args()$/;"	v
args	smatch_modified.py	/^   args=None$/;"	v
argv	Parallel_Sampler.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	anneal_hrg_sampler.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	common.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	decoder.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	driver.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	dump_sample.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	extractor.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	hrg_sampler.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	load_samples.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
argv	phrase_forest.py	/^    argv = common.parse_flags()$/;"	v
argv	scorer.py	/^        argv = FLAGS(sys.argv)  # parse flags$/;"	v
ascent	anneal_hrg_sampler.py	/^                    ascent = False$/;"	v
ascent	anneal_hrg_sampler.py	/^    ascent = True$/;"	v
ascent	simulated_sampler.py	/^    ascent = True$/;"	v	class:Sample
assert_done	hypergraph.py	/^    def assert_done(self, task):$/;"	m	class:Hypergraph
base	HRGSample.py	/^base = poisson$/;"	v
base	add_lexweights.py	/^base = poisson$/;"	v
base	cut_type_top_down_sampler.py	/^base = poisson$/;"	v
base	dump_sampler.py	/^base = poisson$/;"	v
base	edge_type_top_down_sampler.py	/^base = poisson$/;"	v
base	initial_sampler.py	/^base = poisson$/;"	v
base	parallel_sampler.py	/^base = poisson$/;"	v
base	simulated_sampler.py	/^base = poisson$/;"	v
base_dist	em_trainer.py	/^def base_dist(rule):$/;"	f
base_dist	em_trainer64.py	/^def base_dist(rule):$/;"	f
best_first_heuristic	decode.py	/^def best_first_heuristic(item):$/;"	f
best_paths	hypergraph.py	/^    def best_paths(self):$/;"	m	class:Node
bi_cyk_spans	abc_parser.py	/^from common import bi_cyk_spans$/;"	i
bi_cyk_spans	common.py	/^def bi_cyk_spans(n1, n2):$/;"	f
binary_expand	decode.py	/^    def binary_expand(self, i, j):$/;"	m	class:Decoder
bisect	scorer.py	/^import bisect$/;"	i
bitarray	amr_fragment.py	/^from bitarray import bitarray$/;"	i
bitarray	amr_fragment.py	/^import bitarray$/;"	i
branch_type	edge_type_top_down_sampler.py	/^    def branch_type(self, node):$/;"	m	class:Sample
build	grammar.py	/^    def build(self, rules, features):$/;"	m	class:Grammar
build_arg_parser	smatch-table.py	/^def build_arg_parser():$/;"	f
build_arg_parser	smatch.py	/^def build_arg_parser():$/;"	f
build_arg_parser	smatch_modified.py	/^def build_arg_parser():$/;"	f
build_arg_parser2	smatch-table.py	/^def build_arg_parser2():$/;"	f
build_arg_parser2	smatch.py	/^def build_arg_parser2():$/;"	f
build_arg_parser2	smatch_modified.py	/^def build_arg_parser2():$/;"	f
build_entity	extract_alignment.py	/^def build_entity(Entity):$/;"	f
build_lemma_map	extract_alignment.py	/^def build_lemma_map(seq_map, has_A1, has_ARG, infl_lemma_map, trans_lemma_map, der_lemma_map):$/;"	f
build_one_node	forest_prev.py	/^def build_one_node(curr_node, amr_graph, edge_alignment):$/;"	f
build_one_node	fragment_forest.py	/^def build_one_node(curr_node, amr_graph, edge_alignment):$/;"	f
c	while_loop.py	/^        c = 5$/;"	v
c1	lexweights.py	/^            c1 = ecount[eword]$/;"	v
c12	lexweights.py	/^            c12 = fecount[fword,eword]$/;"	v
c2	lexweights.py	/^            c2 = fcount[fword]$/;"	v
cPickle	anneal_hrg_sampler.py	/^import cPickle$/;"	i
cPickle	concept_init.py	/^import cPickle$/;"	i
cPickle	data_divider.py	/^import cPickle$/;"	i
cPickle	dump_sample.py	/^import cPickle$/;"	i
cPickle	dump_sampler.py	/^import cPickle$/;"	i
cPickle	extract_alignment.py	/^import cPickle$/;"	i
cPickle	extract_cycles.py	/^import cPickle$/;"	i
cPickle	forest_prev.py	/^import cPickle$/;"	i
cPickle	fragment_forest.py	/^import cPickle$/;"	i
cPickle	hrg_sampler.py	/^import cPickle$/;"	i
cPickle	init_unaligned_gram.py	/^import cPickle$/;"	i
cPickle	parallel_sampler.py	/^import cPickle$/;"	i
calculate	scorer.py	/^    def calculate(self):$/;"	m	class:Tabulator
calculate	scorer.py	/^def calculate():$/;"	f
can_binarize	extractor.py	/^def can_binarize(a, r, phrase_index):$/;"	f
cartesian	composed_rule_extractor.py	/^from consensus_training import cartesian$/;"	i
cartesian	consensus_training.py	/^def cartesian(l):$/;"	f
cartesian	phrase_forest.py	/^from consensus_training import cartesian$/;"	i
cartesian	phrase_hypergraph.py	/^from consensus_training import cartesian$/;"	i
cb	smatch-table.py	/^def cb(option, opt_str, value, parser):$/;"	f
cease_update	simulated_sampler.py	/^    cease_update = False$/;"	v	class:Sample
cgi	gflags.py	/^import cgi$/;"	i
cgi	gflags_python3.py	/^import cgi$/;"	i
chart_add	abc_parser.py	/^    def chart_add(self, item):$/;"	m	class:ABCParser
check	cut_type_top_down_sampler.py	/^    def check(self, sample):$/;"	m	class:TypeIndexer
check	dump_sampler.py	/^    def check(self, sample):$/;"	m	class:CutTypeIndex
check	edge_type_top_down_sampler.py	/^    def check(self, sample):$/;"	m	class:TypeIndexer
check	initial_sampler.py	/^    def check(self, sample):$/;"	m	class:CutTypeIndex
check	parallel_sampler.py	/^    def check(self, sample):$/;"	m	class:TypeIndexer
check	simulated_sampler.py	/^    def check(self, sample):$/;"	m	class:TypeIndexer
check_adjacent	amr_fragment.py	/^def check_adjacent(f1, f2):$/;"	f
check_args	smatch-table.py	/^def check_args(args):$/;"	f
check_consist	amr_fragment.py	/^def check_consist(parent, children):$/;"	f
check_disjoint	amr_fragment.py	/^def check_disjoint(f1, f2):$/;"	f
check_entity	extract_alignment.py	/^def check_entity(toks, n_tok, unaligned_toks):$/;"	f
check_node_consist	HRGSample.py	/^def check_node_consist(parent, children):$/;"	f
check_self_cycle	amr_graph.py	/^    def check_self_cycle(self):$/;"	m	class:AMRGraph
check_site	cut_type_top_down_sampler.py	/^def check_site(sample, node, r1, r2, r3):$/;"	f
check_site	dump_sampler.py	/^def check_site(sample, node, r1, r2, r3):$/;"	f
check_site	edge_type_top_down_sampler.py	/^def check_site(sample, node, r1, r2, r3):$/;"	f
check_site	initial_sampler.py	/^def check_site(sample, node, r1, r2, r3):$/;"	f
check_site	parallel_sampler.py	/^def check_site(sample, node, r1, r2, r3):$/;"	f
check_site	simulated_sampler.py	/^def check_site(sample, node, r1, r2, r3):$/;"	f
child_symbols	Parallel_Sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	add_lexweights.py	/^def child_symbols(nt):$/;"	f
child_symbols	anneal_hrg_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	cut_type_top_down_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	dump_sample.py	/^def child_symbols(nt):$/;"	f
child_symbols	dump_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	edge_type_top_down_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	hrg_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	initial_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	load_samples.py	/^def child_symbols(nt):$/;"	f
child_symbols	parallel_sampler.py	/^def child_symbols(nt):$/;"	f
child_symbols	simulated_sampler.py	/^def child_symbols(nt):$/;"	f
children	HRGSample.py	/^def children(node):$/;"	f
children	add_lexweights.py	/^def children(node):$/;"	f
children	cut_type_top_down_sampler.py	/^def children(node):$/;"	f
children	dump_sampler.py	/^def children(node):$/;"	f
children	edge_type_top_down_sampler.py	/^def children(node):$/;"	f
children	initial_sampler.py	/^def children(node):$/;"	f
children	parallel_sampler.py	/^def children(node):$/;"	f
children	simulated_sampler.py	/^def children(node):$/;"	f
choice	HRGSample.py	/^def choice(choices, i, SAMPLER, correction=None):$/;"	f
choice	cut_type_top_down_sampler.py	/^def choice(choices, i, correction=None):$/;"	f
choice	dump_sampler.py	/^def choice(choices, i, correction=None):$/;"	f
choice	edge_type_top_down_sampler.py	/^def choice(choices, i, correction=None):$/;"	f
choice	initial_sampler.py	/^def choice(choices, i, correction=None):$/;"	f
choice	parallel_sampler.py	/^def choice(choices, i, correction=None):$/;"	f
choice	simulated_sampler.py	/^def choice(choices, i, correction=None):$/;"	f
choice_posterior	HRGSample.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	add_lexweights.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	cut_type_top_down_sampler.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	dump_sampler.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	edge_type_top_down_sampler.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	initial_sampler.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	parallel_sampler.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choice_posterior	simulated_sampler.py	/^    def choice_posterior(self, c):$/;"	m	class:Sampler
choose_k	Parallel_Sampler.py	/^def choose_k(n):$/;"	f
choose_k	anneal_hrg_sampler.py	/^def choose_k(n):$/;"	f
choose_k	cut_type_top_down_sampler.py	/^def choose_k(n):$/;"	f
choose_k	dump_sample.py	/^def choose_k(n):$/;"	f
choose_k	dump_sampler.py	/^def choose_k(n):$/;"	f
choose_k	edge_type_top_down_sampler.py	/^def choose_k(n):$/;"	f
choose_k	hrg_sampler.py	/^def choose_k(n):$/;"	f
choose_k	initial_sampler.py	/^def choose_k(n):$/;"	f
choose_k	load_samples.py	/^def choose_k(n):$/;"	f
choose_k	parallel_sampler.py	/^def choose_k(n):$/;"	f
choose_k	simulated_sampler.py	/^def choose_k(n):$/;"	f
choose_m	add_lexweights.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_m	cut_type_top_down_sampler.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_m	dump_sampler.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_m	edge_type_top_down_sampler.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_m	initial_sampler.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_m	parallel_sampler.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_m	simulated_sampler.py	/^def choose_m(n, c1, c2, sampler):$/;"	f
choose_split	HRGSample.py	/^def choose_split(n, choices, corrections, sampler):$/;"	f
choose_split	edge_type_top_down_sampler.py	/^def choose_split(n, choices, correction, sampler):$/;"	f
client_list	hrg_sampler.py	/^            client_list = []$/;"	v
clone	hgraph.py	/^    def clone(self, warn=sys.stderr):$/;"	m	class:Hgraph
clone_canonical	hgraph.py	/^    def clone_canonical(self, external_dict = {}, prefix = "", warn=False):$/;"	m	class:Hgraph
close	Parallel_Sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	add_lexweights.py	/^    def close(self):$/;"	m	class:TreeFile
close	anneal_hrg_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	cut_type_top_down_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	dump_sample.py	/^    def close(self):$/;"	m	class:TreeFile
close	dump_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	edge_type_top_down_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	hrg_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	initial_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	load_samples.py	/^    def close(self):$/;"	m	class:TreeFile
close	parallel_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
close	simulated_sampler.py	/^    def close(self):$/;"	m	class:TreeFile
closest_length	references.py	/^    def closest_length(self, n):$/;"	m	class:RefCounter
cmd	hrg_sampler.py	/^            cmd = ' '.join(sys.argv)$/;"	v
collapse_fragment	hgraph.py	/^    def collapse_fragment(self, dag, label = None, unary = False, warn=False):$/;"	m	class:Hgraph
collect_expected_feature_counts	consensus_training.py	/^    def collect_expected_feature_counts(self):$/;"	m	class:ConsensusTrainer
collect_expected_ngram_counts	consensus_training.py	/^    def collect_expected_ngram_counts(self):$/;"	m	class:ConsensusTrainer
collect_expected_products	consensus_training.py	/^    def collect_expected_products(self):$/;"	m	class:ConsensusTrainer
collect_ref_length	consensus_training.py	/^    def collect_ref_length(self):$/;"	m	class:ConsensusTrainer
collections	extractor-ghkm.py	/^import collections$/;"	i
combinations	gene_glue.py	/^def combinations(prefix, left):$/;"	f
combine_fragments	amr_fragment.py	/^def combine_fragments(f1, f2, refine=False):$/;"	f
combine_multiple	hgraph.py	/^    def combine_multiple(self, hgs):$/;"	m	class:Hgraph
combiner	hgraph.py	/^        def combiner(nodestr, childmap, depth):$/;"	f	function:Hgraph.__str__
combiner	hgraph.py	/^        def combiner(nodestr, childmap, depth):$/;"	f	function:Hgraph.non_external_str
combiner	hgraph.py	/^        def combiner(nodestr, childmap, depth):$/;"	f	function:Hgraph.to_amr_format
combiner	hgraph.py	/^        def combiner(nodestr, childmap, depth):$/;"	f	function:Hgraph.to_amr_string
common	phrase_forest.py	/^import common$/;"	i
complete	dot_chart.py	/^    def complete(self, i, k, j):$/;"	m	class:DotChart
compose	HRGRule.py	/^    def compose(self, rules):$/;"	m	class:SHRGRule
compose	rule.py	/^    def compose(self, rules):$/;"	m	class:Rule
composed_rules_under	HRGSample.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	add_lexweights.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	cut_type_top_down_sampler.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	dump_sampler.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	edge_type_top_down_sampler.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	initial_sampler.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	parallel_sampler.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
composed_rules_under	simulated_sampler.py	/^    def composed_rules_under(self, node):$/;"	m	class:Sample
compute_cobleu	consensus_training.py	/^    def compute_cobleu(self):$/;"	m	class:ConsensusTrainer
compute_cumulative	extractor.py	/^def compute_cumulative(a):$/;"	f
compute_edge_expectation	consensus_training.py	/^    def compute_edge_expectation(self, f):$/;"	m	class:ConsensusTrainingCounter
compute_edge_posterior	consensus_training.py	/^    def compute_edge_posterior(self): $/;"	m	class:ConsensusTrainingCounter
compute_expected_counts	em_trainer.py	/^    def compute_expected_counts(self, hg):$/;"	m	class:EMTrainer
compute_expected_counts	em_trainer64.py	/^    def compute_expected_counts(self, hg):$/;"	m	class:EMTrainer
compute_expected_feature_counts	consensus_training.py	/^    def compute_expected_feature_counts(self):$/;"	m	class:ConsensusTrainingCounter
compute_expected_ngram_counts	consensus_training.py	/^    def compute_expected_ngram_counts(self):$/;"	m	class:ConsensusTrainingCounter
compute_expected_products	consensus_training.py	/^    def compute_expected_products(self):$/;"	m	class:ConsensusTrainingCounter
compute_f	smatch.py	/^def compute_f(match_num,test_num,gold_num):$/;"	f
compute_f	smatch_modified.py	/^def compute_f(match_num,test_num,gold_num):$/;"	f
compute_files	smatch-table.py	/^def compute_files(user1,user2,file_list,dir_pre,start_num):$/;"	f
compute_fw_table	hgraph.py	/^    def compute_fw_table(self):$/;"	m	class:Hgraph
compute_gradient	consensus_training.py	/^    def compute_gradient(self):$/;"	m	class:ConsensusTrainer
compute_lexical_weights	lexical_weighter.py	/^    def compute_lexical_weights(self, a):$/;"	m	class:LexicalWeighter
compute_match	smatch.py	/^def compute_match(match,weight_dict):$/;"	f
compute_match	smatch_modified.py	/^def compute_match(match,weight_dict):$/;"	f
compute_pool	smatch.py	/^def compute_pool(test_instance,test_relation1,test_relation2,gold_instance,gold_relation1,gold_relation2,test_label,gold_label):$/;"	f
compute_pool	smatch_modified.py	/^def compute_pool(test_instance,test_relation1,test_relation2,gold_instance,gold_relation1,gold_relation2,test_label,gold_label):$/;"	f
compute_weights	lexical_weighter.py	/^def compute_weights(a, w, transpose=False, swap=False):$/;"	f
concate_multi	hgraph.py	/^    def concate_multi(self, hgs):$/;"	m	class:Hgraph
concept_dfs	hgraph.py	/^            childmap, depth: {par: childmap.items()}, hedge_combiner = lambda x: tuple(x), ident_set=None):$/;"	m	class:Hgraph
concept_label	amr_graph.py	/^def concept_label(label):$/;"	f
config	killall.py	/^    config = sys.argv[1]$/;"	v
conflict_nodes	cut_type_top_down_sampler.py	/^def conflict_nodes(node, parent):$/;"	f
conflict_nodes	dump_sampler.py	/^def conflict_nodes(node, parent):$/;"	f
conflict_nodes	edge_type_top_down_sampler.py	/^def conflict_nodes(node, parent):$/;"	f
conflict_nodes	initial_sampler.py	/^def conflict_nodes(node, parent):$/;"	f
conflict_nodes	parallel_sampler.py	/^def conflict_nodes(node, parent):$/;"	f
conflict_nodes	simulated_sampler.py	/^def conflict_nodes(node, parent):$/;"	f
connect_all_internal_edges	amr_fragment.py	/^def connect_all_internal_edges(f, edge_alignment, refine=False):$/;"	f
conv	hgraph.py	/^        def conv(node): # Closure over new_amr$/;"	f	function:Hgraph.stringify
conv	hgraph.py	/^def conv(s):$/;"	f
convert_nonterminals	extractor-ghkm.py	/^def convert_nonterminals(lhs, src_side, trg_side):$/;"	f
convert_terminal	extractor-ghkm.py	/^convert_terminal = lambda t: dict_terminals[t] if t in dict_terminals else t$/;"	v
convert_terminals	extractor-ghkm.py	/^def convert_terminals(rule, prefix):$/;"	f
copy	amr_fragment.py	/^import copy$/;"	i
copy	anneal_hrg_sampler.py	/^import copy$/;"	i
copy	dump_sample.py	/^import copy$/;"	i
copy	hgraph.py	/^import copy$/;"	i
copy	hrg_sampler.py	/^import copy$/;"	i
copy	parallel_sampler.py	/^import copy$/;"	i
copy	rule.py	/^import copy$/;"	i
corpusStats	srilm.py	/^corpusStats = _srilm.corpusStats$/;"	v
corpusStats	srilm.py	/^def corpusStats(*args):$/;"	f
count	HRGSample.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	HRGSample.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	HRGSample.py	/^    def count(self, x):$/;"	m	class:Sampler
count	add_lexweights.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	add_lexweights.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	add_lexweights.py	/^    def count(self, x):$/;"	m	class:Sampler
count	consensus_training.py	/^    def count(self, hg):$/;"	m	class:NgramCounter
count	cut_type_top_down_sampler.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	cut_type_top_down_sampler.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	cut_type_top_down_sampler.py	/^    def count(self, x):$/;"	m	class:Sampler
count	dump_sampler.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	dump_sampler.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	dump_sampler.py	/^    def count(self, x):$/;"	m	class:Sampler
count	edge_type_top_down_sampler.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	edge_type_top_down_sampler.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	edge_type_top_down_sampler.py	/^    def count(self, x):$/;"	m	class:Sampler
count	hrg_sampler.py	/^        count = 0$/;"	v
count	initial_sampler.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	initial_sampler.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	initial_sampler.py	/^    def count(self, x):$/;"	m	class:Sampler
count	lexweights.py	/^    count = 0$/;"	v
count	parallel_sampler.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	parallel_sampler.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	parallel_sampler.py	/^    def count(self, x):$/;"	m	class:Sampler
count	python_lm.py	/^    count = 0$/;"	v	class:LanguageModel
count	references.py	/^    def count(self, i, ngram):$/;"	m	class:References
count	references.py	/^    def count(self, line):$/;"	m	class:RefCounter
count	simulated_sampler.py	/^    def count(self, x):$/;"	m	class:NPSampler
count	simulated_sampler.py	/^    def count(self, x):$/;"	m	class:NTSampler
count	simulated_sampler.py	/^    def count(self, x):$/;"	m	class:Sampler
count_lines	common.py	/^def count_lines(filename):$/;"	f
count_lines	em_trainer.py	/^from common import count_lines$/;"	i
count_lines	em_trainer64.py	/^from common import count_lines$/;"	i
count_lines	percent_counter.py	/^from common import count_lines$/;"	i
count_lines	references.py	/^from common import count_lines, INF$/;"	i
count_ngrams	consensus_training.py	/^    def count_ngrams(self):$/;"	m	class:ConsensusTrainingCounter
cpu	mymonitor.py	/^def cpu():$/;"	f
cpu_usage	monitor.py	/^    def cpu_usage(self, interval=1):$/;"	m	class:Monitor
create_dump_dir	extractor-ghkm.py	/^def create_dump_dir(dir_name):$/;"	f
create_ext_mapping	amr_fragment.py	/^    def create_ext_mapping(self):$/;"	m	class:AMRFragment
cube_op	decode.py	/^        def cube_op(operands):$/;"	f	function:Decoder.get_cube_op
curr_amr	read_amr.py	/^        curr_amr = get_amr_line(f)$/;"	v
curr_likelihood	hrg_sampler.py	/^            curr_likelihood = Global_sampler.likelihood()$/;"	v
curr_sampler_file	hrg_sampler.py	/^                curr_sampler_file = os.path.join(FLAGS.dump, 'sampler_file%d' % i)$/;"	v
curr_sampler_file	hrg_sampler.py	/^            curr_sampler_file = os.path.join(FLAGS.dump, 'sampler_file%d' % FLAGS.currid)$/;"	v
cut_nodes_under	HRGSample.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	add_lexweights.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	cut_type_top_down_sampler.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	dump_sampler.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	edge_type_top_down_sampler.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	initial_sampler.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	parallel_sampler.py	/^def cut_nodes_under(node):$/;"	f
cut_nodes_under	simulated_sampler.py	/^def cut_nodes_under(node):$/;"	f
cut_parent	Parallel_Sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	add_lexweights.py	/^def cut_parent(node):$/;"	f
cut_parent	anneal_hrg_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	cut_type_top_down_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	dump_sample.py	/^def cut_parent(node):$/;"	f
cut_parent	dump_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	edge_type_top_down_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	hrg_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	initial_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	load_samples.py	/^def cut_parent(node):$/;"	f
cut_parent	parallel_sampler.py	/^def cut_parent(node):$/;"	f
cut_parent	simulated_sampler.py	/^def cut_parent(node):$/;"	f
cut_type	cut_type_top_down_sampler.py	/^    def cut_type(self, node, parent):$/;"	m	class:Sample
cut_type	dump_sampler.py	/^    def cut_type(self, node, parent):$/;"	m	class:Sample
cut_type	edge_type_top_down_sampler.py	/^    def cut_type(self, node, parent):$/;"	m	class:Sample
cut_type	initial_sampler.py	/^    def cut_type(self, node, parent):$/;"	m	class:Sample
cut_type	parallel_sampler.py	/^    def cut_type(self, node, parent):$/;"	m	class:Sample
cut_type	simulated_sampler.py	/^    def cut_type(self, node, parent):$/;"	m	class:Sample
cyk_heuristic	decode.py	/^def cyk_heuristic(item):$/;"	f
cyk_spans	common.py	/^def cyk_spans(n):$/;"	f
cyk_spans	decode.py	/^from common import cyk_spans$/;"	i
cyk_spans	dot_chart.py	/^from common import cyk_spans$/;"	i
datetime	extractor-ghkm.py	/^from datetime import datetime$/;"	i
datetime	logger.py	/^import datetime$/;"	i
decode	best_path.py	/^def decode(hg_file, weights):$/;"	f
decode	decode.py	/^    def decode(self):$/;"	m	class:Decoder
decode_cyk	decode.py	/^    def decode_cyk(self):$/;"	m	class:Decoder
decode_earley	decode.py	/^    def decode_earley(self):$/;"	m	class:Decoder
decoder	driver.py	/^import decoder$/;"	i
decoder_feature	consensus_training.py	/^    def decoder_feature(self, i):$/;"	m	class:ConsensusTrainingCounter
decoding_features	decoder.py	/^decoding_features = None$/;"	v
decoding_flags	chart.py	/^import decoding_flags$/;"	i
decoding_flags	decode.py	/^import decoding_flags$/;"	i
decoding_flags	grammar.py	/^import decoding_flags$/;"	i
deduce	decode.py	/^    def deduce(self, items):$/;"	m	class:Decoder
deduce_with_itg	decode.py	/^    def deduce_with_itg(self, itg, items):$/;"	m	class:Decoder
defaultdict	amr.py	/^from collections import defaultdict$/;"	i
defaultdict	amr_old.py	/^from collections import defaultdict$/;"	i
defaultdict	amr_parser.py	/^from collections import defaultdict$/;"	i
defaultdict	amr_without_alignment.py	/^from collections import defaultdict$/;"	i
defaultdict	extract_alignment.py	/^from collections import defaultdict$/;"	i
defaultdict	extractor-ghkm.py	/^from collections import defaultdict$/;"	i
defaultdict	hgraph.py	/^from collections import defaultdict$/;"	i
degree	hypergraph.py	/^    def degree(self):$/;"	m	class:Edge
deleteLM	srilm.py	/^def deleteLM(*args):$/;"	f
deleteLM	srilm.py	/^deleteLM = _srilm.deleteLM$/;"	v
delete_unaligned	read_amr_aligner.py	/^def delete_unaligned(s, alignment):$/;"	f
density_factor	HRGSample.py	/^def density_factor(node):$/;"	f
density_factor	cut_type_top_down_sampler.py	/^def density_factor(node):$/;"	f
density_factor	dump_sampler.py	/^def density_factor(node):$/;"	f
density_factor	edge_type_top_down_sampler.py	/^def density_factor(node):$/;"	f
density_factor	initial_sampler.py	/^def density_factor(node):$/;"	f
density_factor	parallel_sampler.py	/^def density_factor(node):$/;"	f
density_factor	simulated_sampler.py	/^def density_factor(node):$/;"	f
deque	HRGSample.py	/^from collections import deque$/;"	i
deque	Parallel_Sampler.py	/^from collections import deque$/;"	i
deque	amr_graph.py	/^from collections import deque$/;"	i
deque	anneal_hrg_sampler.py	/^from collections import deque$/;"	i
deque	dump_sample.py	/^from collections import deque$/;"	i
deque	hrg_sampler.py	/^from collections import deque$/;"	i
deque	load_samples.py	/^from collections import deque$/;"	i
derive_gld_rel	amr_graph.py	/^    def derive_gld_rel(self, amr_fragments, frag_map, curr_alignment):$/;"	m	class:AMRGraph
derive_graph_side	HRGSample.py	/^    def derive_graph_side(self, curr_node, children, ext_mapping, nonterm_index, att_list_mapping):$/;"	m	class:Sample
derive_string_side	HRGSample.py	/^    def derive_string_side(self, curr_node, children):$/;"	m	class:Sample
deserialize	decode.py	/^    def deserialize(self, line):$/;"	m	class:Deduction
deserialize	fragment_hypergraph.py	/^    def deserialize(self):$/;"	m	class:FragmentHGEdge
deserialize	hypergraph.py	/^    def deserialize(self, filename):$/;"	m	class:Deserializer
deserialize	hypergraph.py	/^    def deserialize(self, s):$/;"	m	class:Edge
deserialize	hypergraph.py	/^    def deserialize(self, s):$/;"	m	class:Node
deserialize	phrase_hypergraph.py	/^    def deserialize(self):$/;"	m	class:PhraseHGEdge
deserializer	hgshow.py	/^    deserializer = Deserializer(SNode, SEdge)$/;"	v	class:SEdge
dfs	amr_graph.py	/^    def dfs(self):$/;"	m	class:AMRGraph
dfs	hgraph.py	/^            childmap, depth: {par: childmap.items()}, hedge_combiner = lambda x: tuple(x), ignore=False):$/;"	m	class:Hgraph
dict_set	extract_unseen.py	/^    dict_set = init_set(f1)$/;"	v
dict_src_given_trg	extractor-ghkm.py	/^dict_src_given_trg = defaultdict(float)$/;"	v
dict_terminals	extractor-ghkm.py	/^dict_terminals = {"DOUBLE_QT":'"', "-LRB-":"(", "-RRB-":")", "“":'"', "``":'"', "”":'"'}$/;"	v
dict_trg_given_src	extractor-ghkm.py	/^dict_trg_given_src = defaultdict(float)$/;"	v
digamma	digamma.py	/^def digamma(x):$/;"	f
digamma	em_trainer.py	/^from digamma import digamma$/;"	i
digamma	em_trainer64.py	/^from digamma import digamma$/;"	i
dirname	srilm.py	/^        from os.path import dirname$/;"	i
discount	HRGSample.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	HRGSample.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	HRGSample.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	add_lexweights.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	add_lexweights.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	add_lexweights.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	cut_type_top_down_sampler.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	cut_type_top_down_sampler.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	cut_type_top_down_sampler.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	dump_sampler.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	dump_sampler.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	dump_sampler.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	edge_type_top_down_sampler.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	edge_type_top_down_sampler.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	edge_type_top_down_sampler.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	initial_sampler.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	initial_sampler.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	initial_sampler.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	parallel_sampler.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	parallel_sampler.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	parallel_sampler.py	/^    def discount(self, x):$/;"	m	class:Sampler
discount	simulated_sampler.py	/^    def discount(self, x):$/;"	m	class:NPSampler
discount	simulated_sampler.py	/^    def discount(self, x):$/;"	m	class:NTSampler
discount	simulated_sampler.py	/^    def discount(self, x):$/;"	m	class:Sampler
discrete	HRGSample.py	/^def discrete(l):$/;"	f
discrete	add_lexweights.py	/^def discrete(l):$/;"	f
discrete	cut_type_top_down_sampler.py	/^def discrete(l):$/;"	f
discrete	dump_sampler.py	/^def discrete(l):$/;"	f
discrete	edge_type_top_down_sampler.py	/^def discrete(l):$/;"	f
discrete	initial_sampler.py	/^def discrete(l):$/;"	f
discrete	parallel_sampler.py	/^def discrete(l):$/;"	f
discrete	simulated_sampler.py	/^def discrete(l):$/;"	f
division	Parallel_Sampler.py	/^from __future__ import division$/;"	i
division	add_lexweights.py	/^from __future__ import division$/;"	i
division	anneal_hrg_sampler.py	/^from __future__ import division$/;"	i
division	cut_type_top_down_sampler.py	/^from __future__ import division$/;"	i
division	dump_sample.py	/^from __future__ import division$/;"	i
division	dump_sampler.py	/^from __future__ import division$/;"	i
division	edge_type_top_down_sampler.py	/^from __future__ import division$/;"	i
division	hrg_sampler.py	/^from __future__ import division$/;"	i
division	initial_sampler.py	/^from __future__ import division$/;"	i
division	load_samples.py	/^from __future__ import division$/;"	i
division	parallel_sampler.py	/^from __future__ import division$/;"	i
division	simulated_sampler.py	/^from __future__ import division$/;"	i
doctest	HRGRule.py	/^    import doctest$/;"	i
doctest	alignment.py	/^    import doctest$/;"	i
doctest	consensus_training.py	/^    import doctest$/;"	i
doctest	cube.py	/^    import doctest$/;"	i
doctest	hgraph.py	/^    import doctest$/;"	i
doctest	lazy_list_merger.py	/^    import doctest$/;"	i
doctest	rule.py	/^    import doctest$/;"	i
dot	hypergraph.py	/^    def dot(self, color='', detailed=True):$/;"	m	class:Node
dot	hypergraph.py	/^    def dot(self, detailed=True):$/;"	m	class:Hypergraph
dot_label	hgshow.py	/^    def dot_label(self):$/;"	m	class:SEdge
dot_label	hgshow.py	/^    def dot_label(self, detailed):$/;"	m	class:SNode
dot_label	hypergraph.py	/^    def dot_label(self):$/;"	m	class:Edge
dot_label	hypergraph.py	/^    def dot_label(self, detailed = True):$/;"	m	class:Node
double_count	add_lexweights.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_count	cut_type_top_down_sampler.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_count	dump_sampler.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_count	edge_type_top_down_sampler.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_count	initial_sampler.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_count	parallel_sampler.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_count	simulated_sampler.py	/^    def double_count(self, node):$/;"	m	class:NPSampler
double_discount	add_lexweights.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
double_discount	cut_type_top_down_sampler.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
double_discount	dump_sampler.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
double_discount	edge_type_top_down_sampler.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
double_discount	initial_sampler.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
double_discount	parallel_sampler.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
double_discount	simulated_sampler.py	/^    def double_discount(self, node):$/;"	m	class:NPSampler
dp_likelihood	HRGSample.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	add_lexweights.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	cut_type_top_down_sampler.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	dump_sampler.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	edge_type_top_down_sampler.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	initial_sampler.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	parallel_sampler.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
dp_likelihood	simulated_sampler.py	/^    def dp_likelihood(self):$/;"	m	class:NPSampler
draw_likehood_from_file	draw_graphs.py	/^def draw_likehood_from_file(filename, output_file):$/;"	f
dump	Parallel_Sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	add_lexweights.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	anneal_hrg_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	cut_type_top_down_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	dump_sample.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	dump_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	edge_type_top_down_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	hrg_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	initial_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	load_samples.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	parallel_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump	rule_dumper.py	/^    def dump(self):$/;"	m	class:RuleDumper
dump	scorer.py	/^    def dump(self):$/;"	m	class:RuleCache
dump	simulated_sampler.py	/^    def dump(self, sample):$/;"	m	class:TreeFile
dump_f	hrg_sampler.py	/^        dump_f = open(os.path.join(FLAGS.dump, 'sampler_file_iter0'), 'wb')$/;"	v
dump_hrg_rules	HRGSample.py	/^    def dump_hrg_rules(self, f):$/;"	m	class:Sample
dump_no	extractor-ghkm.py	/^    dump_no = 0$/;"	v
dump_sampler_file	hrg_sampler.py	/^            dump_sampler_file = os.path.join(FLAGS.dump, 'sampler_file_iter%d' % iteration)$/;"	v
dump_trees	Parallel_Sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	add_lexweights.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	anneal_hrg_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	cut_type_top_down_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	dump_sample.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	dump_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	edge_type_top_down_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	hrg_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	initial_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	load_samples.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	parallel_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dump_trees	simulated_sampler.py	/^def dump_trees(samples, filename):$/;"	f
dumped_format	rule.py	/^    def dumped_format(self):$/;"	m	class:Rule
ecount	lexweights.py	/^    ecount = {}$/;"	v
edge_list	amr_fragment.py	/^    def edge_list(self):$/;"	m	class:AMRFragment
edge_set	amr_graph.py	/^    def edge_set(self):$/;"	m	class:AMRNode
edges	hypergraph.py	/^    def edges(self):$/;"	m	class:Hypergraph
edges	hypergraph.py	/^    def edges(self):$/;"	m	class:Path
eexp	em_trainer.py	/^from logprob import elog, eexp$/;"	i
eexp	em_trainer64.py	/^from logprob import elog, eexp$/;"	i
eexp	logprob.py	/^def eexp(x):$/;"	f
efile	add_lexweights.py	/^    efile = open(efilename)$/;"	v	class:Sample
efile	cut_type_top_down_sampler.py	/^    efile = open(efilename)$/;"	v	class:Sample
efile	dump_sampler.py	/^    efile = open(efilename)$/;"	v	class:Sample
efile	edge_type_top_down_sampler.py	/^    efile = open(efilename)$/;"	v	class:Sample
efile	hg_show.py	/^    efile = open(efilename)$/;"	v
efile	initial_sampler.py	/^    efile = open(efilename)$/;"	v	class:Sample
efile	lexweights.py	/^        efile = open(efilename)$/;"	v
efile	phrase_forest.py	/^    efile = open(efilename)$/;"	v
efile	simulated_sampler.py	/^    efile = open(efilename)$/;"	v	class:Sample
efilename	add_lexweights.py	/^    efilename = argv[2]$/;"	v	class:Sample
efilename	cut_type_top_down_sampler.py	/^    efilename = argv[2]$/;"	v	class:Sample
efilename	dump_sampler.py	/^    efilename = argv[2]$/;"	v	class:Sample
efilename	edge_type_top_down_sampler.py	/^    efilename = argv[2]$/;"	v	class:Sample
efilename	em_trainer.py	/^    efilename = args[1] $/;"	v	class:EMTrainer
efilename	em_trainer64.py	/^    efilename = args[1] $/;"	v	class:EMTrainer
efilename	hg_show.py	/^    efilename = sys.argv[2] $/;"	v
efilename	initial_sampler.py	/^    efilename = argv[2]$/;"	v	class:Sample
efilename	phrase_forest.py	/^    efilename = FLAGS.parallel_corpus[1]$/;"	v
efilename	simulated_sampler.py	/^    efilename = argv[2]$/;"	v	class:Sample
elide	ngram.py	/^    def elide(self, s):$/;"	m	class:NgramEnumerator
eline_re	alignment.py	/^    eline_re = re.compile(r"([^\\s]+)\\s+\\(\\{\\s+((?:\\d+\\s+)*)\\}\\)")$/;"	v	class:Alignment
elog	em_trainer.py	/^from logprob import elog, eexp$/;"	i
elog	em_trainer64.py	/^from logprob import elog, eexp$/;"	i
elog	feature.py	/^from logprob import elog, elog10$/;"	i
elog	grammar.py	/^from logprob import elog$/;"	i
elog	logprob.py	/^def elog(x):$/;"	f
elog10	feature.py	/^from logprob import elog, elog10$/;"	i
elog10	logprob.py	/^def elog10(x):$/;"	f
elog10	scorer.py	/^from logprob import elog10$/;"	i
em_step	em_trainer.py	/^    def em_step(self, iteration):$/;"	m	class:EMTrainer
em_step	em_trainer64.py	/^    def em_step(self, iteration):$/;"	m	class:EMTrainer
enlarge_chart	forest_prev.py	/^def enlarge_chart(prev_chart, new_items):$/;"	f
enlarge_chart	fragment_forest.py	/^def enlarge_chart(prev_chart, new_items):$/;"	f
error_log_file	hrg_sampler.py	/^            error_log_file = 'error_log%d' % count$/;"	v
escape_quote	hypergraph.py	/^def escape_quote(s):$/;"	f
esum	scorer.py	/^esum = {} # c(lhs, english)$/;"	v
eweightfile	lexweights.py	/^        eweightfile = open(opts.weightfiles[1], "w")$/;"	v
exp	HRGSample.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	Parallel_Sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	add_lexweights.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	anneal_hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	cut_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	digamma.py	/^from math import log, exp$/;"	i
exp	dump_sample.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	dump_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	edge_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	em_trainer.py	/^from math import exp$/;"	i
exp	em_trainer64.py	/^from math import exp$/;"	i
exp	hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	initial_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	load_samples.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	logprob.py	/^from math import log, log10, exp$/;"	i
exp	parallel_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
exp	simulated_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
expand	dot_chart.py	/^    def expand(self, i, j):$/;"	m	class:DotChart
expectation	hypergraph.py	/^    def expectation(self):$/;"	m	class:Edge
expected_count	consensus_training.py	/^    def expected_count(self, f):$/;"	m	class:ConsensusTrainingCounter
expected_product	consensus_training.py	/^    def expected_product(self, f):$/;"	m	class:ConsensusTrainingCounter
ext_nodes_str	amr_fragment.py	/^    def ext_nodes_str(self):$/;"	m	class:AMRFragment
extract	composed_rule_extractor.py	/^    def extract(self):$/;"	m	class:ComposedRuleExtractor
extract	extractor.py	/^    def extract(self, a):$/;"	m	class:Extractor
extract_aligned_rules	concept_init.py	/^def extract_aligned_rules(amr_file, sent_file, align_file, grammar_file, unaligned_file):$/;"	f
extract_aligned_rules	extract_alignment.py	/^def extract_aligned_rules(amr_file, sent_file, align_file, train_dict_file, person_dict_file, grammar_file, infl_lemma_file, trans_lemma_file, der_lemma_file, pos_file):$/;"	f
extract_derivation	HRGSample.py	/^    def extract_derivation(self):$/;"	m	class:Sample
extract_hypergraph	extractor.py	/^    def extract_hypergraph(self, a):$/;"	m	class:Extractor
extract_one_rule	HRGSample.py	/^    def extract_one_rule(self, curr_node, children, ext_list, first_rule=False):$/;"	m	class:Sample
extract_phrases	extractor.py	/^def extract_phrases(self, maxlen=1000000000):$/;"	f
extract_phrases	phrase_forest.py	/^from extractor import extract_phrases$/;"	i
extract_rules	extractor.py	/^    def extract_rules(self, a):$/;"	m	class:Extractor
extract_unaligned_fragments	amr_graph.py	/^    def extract_unaligned_fragments(self, edge_alignment):$/;"	m	class:AMRGraph
extractor	driver.py	/^import extractor$/;"	i
extractor	hg_show.py	/^            extractor = Extractor(maximize_derivation=True)$/;"	v
extractor	hgraph.py	/^        def extractor(node, firsthit, leaf):$/;"	f	function:Hgraph.__str__
extractor	hgraph.py	/^        def extractor(node, firsthit, leaf):$/;"	f	function:Hgraph.non_external_str
extractor	hgraph.py	/^        def extractor(node, firsthit, leaf):$/;"	f	function:Hgraph.to_amr_string
extractor	hgraph.py	/^        def extractor(node, firsthit, node_label):$/;"	f	function:Hgraph.to_amr_format
f	anneal_hrg_sampler.py	/^    f = open(FLAGS.sample_file, 'rb')$/;"	v
f	count_top_rule.py	/^        f = open(fname)$/;"	v
f	dump_sample.py	/^        f = open(hg_file, 'rb')$/;"	v
f	dump_sample.py	/^        f = open(sample_file, 'wb')$/;"	v
f	dump_sample.py	/^        f = open(sent_no_file, 'rb')$/;"	v
f	dump_sampler.py	/^    f = open('dump_samples', 'wb')$/;"	v	class:Sample
f	hrg_sampler.py	/^                f = open(curr_sampler_file, 'rb')$/;"	v
f	hrg_sampler.py	/^            f = open(curr_sampler_file, 'wb')$/;"	v
f	hrg_sampler.py	/^            f = open(dump_sampler_file, 'wb')$/;"	v
f	hrg_sampler.py	/^            f = open(init_sampler_file, 'rb')$/;"	v
f	hrg_sampler.py	/^            f = open(sample_file, 'rb')$/;"	v
f	hrg_sampler.py	/^        f = open(sample_file, 'rb')$/;"	v
f	init_unaligned_gram.py	/^    f = open(sys.argv[1], 'r')$/;"	v
f	killall.py	/^    f = open(config)$/;"	v
f	read_amr.py	/^    f = open(amr_file, 'r')$/;"	v
f	sort_trees.py	/^        f = open(fname)$/;"	v
f1	draw_graphs.py	/^    f1 = open(file1)$/;"	v
f1	extract_unseen.py	/^    f1 = open(sys.argv[1], 'r')$/;"	v
f1	init_unseen_grammar.py	/^    f1 = open(sys.argv[1], 'r')$/;"	v
f2	draw_graphs.py	/^    f2 = open(file2)$/;"	v
f2	extract_unseen.py	/^    f2 = open(sys.argv[2], 'r')$/;"	v
f2	init_unseen_grammar.py	/^    f2 = open(sys.argv[2], 'w')$/;"	v
f3	extract_unseen.py	/^    f3 = open(sys.argv[3], 'w')$/;"	v
factorial	HRGSample.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	Parallel_Sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	add_lexweights.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	anneal_hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	cut_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	dump_sample.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	dump_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	edge_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	initial_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	load_samples.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	parallel_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
factorial	simulated_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
fcntl	gflags.py	/^  fcntl = None$/;"	v
fcntl	gflags.py	/^  import fcntl$/;"	i
fcount	lexweights.py	/^    fcount = {}$/;"	v
feature_lib	features.py	/^import feature as feature_lib$/;"	i
feature_vector	scorer.py	/^def feature_vector(weight, xsum, esum, fsum, lexs=[], others=[]):$/;"	f
fecount	lexweights.py	/^    fecount = {}$/;"	v
ffile	add_lexweights.py	/^    ffile = open(ffilename)$/;"	v	class:Sample
ffile	cut_type_top_down_sampler.py	/^    ffile = open(ffilename)$/;"	v	class:Sample
ffile	dump_sampler.py	/^    ffile = open(ffilename)$/;"	v	class:Sample
ffile	edge_type_top_down_sampler.py	/^    ffile = open(ffilename)$/;"	v	class:Sample
ffile	hg_show.py	/^    ffile = open(ffilename)$/;"	v
ffile	initial_sampler.py	/^    ffile = open(ffilename)$/;"	v	class:Sample
ffile	lexweights.py	/^        ffile = open(ffilename)$/;"	v
ffile	phrase_forest.py	/^    ffile = open(ffilename)$/;"	v
ffile	simulated_sampler.py	/^    ffile = open(ffilename)$/;"	v	class:Sample
ffilename	add_lexweights.py	/^    ffilename = argv[1]$/;"	v	class:Sample
ffilename	cut_type_top_down_sampler.py	/^    ffilename = argv[1]$/;"	v	class:Sample
ffilename	dump_sampler.py	/^    ffilename = argv[1]$/;"	v	class:Sample
ffilename	edge_type_top_down_sampler.py	/^    ffilename = argv[1]$/;"	v	class:Sample
ffilename	em_trainer.py	/^    ffilename = args[0] $/;"	v	class:EMTrainer
ffilename	em_trainer64.py	/^    ffilename = args[0] $/;"	v	class:EMTrainer
ffilename	hg_show.py	/^    ffilename = sys.argv[1] $/;"	v
ffilename	initial_sampler.py	/^    ffilename = argv[1]$/;"	v	class:Sample
ffilename	phrase_forest.py	/^    ffilename = FLAGS.parallel_corpus[0]$/;"	v
ffilename	simulated_sampler.py	/^    ffilename = argv[1]$/;"	v	class:Sample
ffilter	scorer.py	/^ffilter = None$/;"	v
file	logger.py	/^file = sys.stderr$/;"	v
file1	draw_graphs.py	/^    file1 = sys.argv[1]$/;"	v
file2	draw_graphs.py	/^    file2 = sys.argv[2]$/;"	v
file_h	hrg_sampler.py	/^file_h = None$/;"	v
file_handle	smatch-table.py	/^           file_handle=open(args.fl,"r")$/;"	v
file_handle	smatch-table.py	/^      file_handle=None$/;"	v
file_handle	smatch.py	/^      file_handle=[]$/;"	v
file_handle	smatch_modified.py	/^      file_handle=[]$/;"	v
file_ids	dump_sample.py	/^    file_ids = FLAGS.file_indexes.split('+')$/;"	v
file_ids	hrg_sampler.py	/^        file_ids = FLAGS.file_indexes.split('+')$/;"	v
filenames	count_top_rule.py	/^    filenames = sys.argv[1:]$/;"	v
filenames	sort_trees.py	/^    filenames = sys.argv[1:]$/;"	v
filter	rule_filter.py	/^def filter(rule):$/;"	f
filter_box	rule_filter.py	/^def filter_box(parent, children, align):$/;"	f
filter_file	Parallel_Sampler.py	/^    filter_file = argv[4]$/;"	v
filter_file	load_samples.py	/^    filter_file = argv[4]$/;"	v
filter_vars	HRGSample.py	/^from filter_stop_words import filter_vars$/;"	i
filter_vars	extract_alignment.py	/^def filter_vars(line):$/;"	f
filter_vars	filter_stop_words.py	/^def filter_vars(line):$/;"	f
filter_vars	hrg_sampler.py	/^from filter_stop_words import filter_vars$/;"	i
filter_with_maxtype	forest_prev.py	/^def filter_with_maxtype(curr_node):$/;"	f
filter_with_maxtype	fragment_forest.py	/^def filter_with_maxtype(curr_node):$/;"	f
final_glue	abc_parser.py	/^    def final_glue(self):$/;"	m	class:ABCParser
final_glue1	abc_parser.py	/^    def final_glue1(self):$/;"	m	class:ABCParser
find_common_roots	amr_fragment.py	/^def find_common_roots(root1, root2, amr_graph, edge_alignment):$/;"	f
find_external_nodes	hgraph.py	/^    def find_external_nodes(self, dag):$/;"	m	class:Hgraph
find_leaves	hgraph.py	/^    def find_leaves(self):$/;"	m	class:Hgraph
find_nt_edge	hgraph.py	/^    def find_nt_edge(self, label, index):$/;"	m	class:Hgraph
find_reachable_nodes	hypergraph.py	/^    def find_reachable_nodes(self):$/;"	m	class:Hypergraph
find_roots	hgraph.py	/^    def find_roots(self, warn=sys.stderr):$/;"	m	class:Hgraph
find_unaligned_edge	amr_fragment.py	/^def find_unaligned_edge(curr_index, another_index, amr_graph, edge_alignment):$/;"	f
find_unaligned_path	amr_fragment.py	/^def find_unaligned_path(curr_index, frag, edge_alignment, refine=False):$/;"	f
finish	corpus_server.py	/^    def finish(self):$/;"	m	class:CorpusServer
finish	job_logger.py	/^    def finish(self):$/;"	m	class:JobLogger
flagfile	Parallel_Sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v
flagfile	anneal_hrg_sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v
flagfile	cut_type_top_down_sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v	class:Sample
flagfile	dump_sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v	class:Sample
flagfile	edge_type_top_down_sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v	class:Sample
flagfile	initial_sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v	class:Sample
flagfile	load_samples.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v
flagfile	simulated_sampler.py	/^    flagfile = open(os.path.join(FLAGS.dump, 'run.flag'), 'w')$/;"	v	class:Sample
fnts	HRGRule.py	/^    def fnts(self):$/;"	m	class:SHRGRule
fnts	rule.py	/^    def fnts(self):$/;"	m	class:Rule
force_english_prefix	extractor.py	/^force_english_prefix = True$/;"	v
force_french_prefix	extractor.py	/^force_french_prefix = False$/;"	v
frag_forests	Parallel_Sampler.py	/^    frag_forests = initialize_fragment_forest(amr_file, amr_sent_file, align_file, filter_file)$/;"	v
frag_forests	load_samples.py	/^    frag_forests = initialize_fragment_forest(amr_file, amr_sent_file, align_file, filter_file)$/;"	v
fragment_decomposition_forest	forest_prev.py	/^def fragment_decomposition_forest(fragments, amr_graph):$/;"	f
fragment_decomposition_forest	fragment_forest.py	/^def fragment_decomposition_forest(fragments, amr_graph):$/;"	f
freemem	mymonitor.py	/^def freemem():$/;"	f
from_AMR_line	amr_parser.py	/^def from_AMR_line(line):$/;"	f
from_concept_edge_labels	hgraph.py	/^    def from_concept_edge_labels(cls, amr):$/;"	m	class:Hgraph
from_string	hgraph.py	/^    def from_string(cls, amr_string):$/;"	m	class:Hgraph
from_triples	hgraph.py	/^    def from_triples(cls, triples, concepts, roots=None, warn=sys.stderr):$/;"	m	class:Hgraph
fromstr	HRGRule.py	/^    def fromstr(self, line):$/;"	m	class:SHRGRule
fromstr	rule.py	/^    def fromstr(self, line):$/;"	m	class:Rule
fsum	scorer.py	/^fsum = {} # c(lhs, french)$/;"	v
fweightfile	lexweights.py	/^        fweightfile = open(opts.weightfiles[0], "w")$/;"	v
fwi_aligned_to_ewi	HRGRule.py	/^    def fwi_aligned_to_ewi(self, ewi):$/;"	m	class:SHRGRule
fwi_aligned_to_ewi	rule.py	/^    def fwi_aligned_to_ewi(self, ewi):$/;"	m	class:Rule
gc	extractor.py	/^    import gc$/;"	i
gc	mymonitor.py	/^import sys, os, gc$/;"	i
gc	scorer.py	/^    import gc$/;"	i
gc_collect	mymonitor.py	/^def gc_collect():$/;"	f
general_combine_fragments	amr_fragment.py	/^def general_combine_fragments(f1, f2, edge_alignment, refine=False):$/;"	f
geometric	HRGSample.py	/^def geometric(rule):$/;"	f
geometric	add_lexweights.py	/^def geometric(rule):$/;"	f
geometric	cut_type_top_down_sampler.py	/^def geometric(rule):$/;"	f
geometric	dump_sampler.py	/^def geometric(rule):$/;"	f
geometric	edge_type_top_down_sampler.py	/^def geometric(rule):$/;"	f
geometric	initial_sampler.py	/^def geometric(rule):$/;"	f
geometric	parallel_sampler.py	/^def geometric(rule):$/;"	f
geometric	simulated_sampler.py	/^def geometric(rule):$/;"	f
get	abc_parser.py	/^    def get(self, coordinate, bin_no):$/;"	m	class:NeighborIndex
get	cut_type_top_down_sampler.py	/^    def get(self, key):$/;"	m	class:TypeIndexer
get	dump_sampler.py	/^    def get(self, rule):$/;"	m	class:CutTypeIndex
get	edge_type_top_down_sampler.py	/^    def get(self, key):$/;"	m	class:TypeIndexer
get	gflags.py	/^  def get(self, name, default):$/;"	m	class:FlagValues
get	gflags_python3.py	/^  def get(self, name, default):$/;"	m	class:FlagValues
get	initial_sampler.py	/^    def get(self, rule):$/;"	m	class:CutTypeIndex
get	parallel_sampler.py	/^    def get(self, key):$/;"	m	class:TypeIndexer
get	python_lm.py	/^    def get(self, ngram):$/;"	m	class:LanguageModel
get	simulated_sampler.py	/^    def get(self, key):$/;"	m	class:TypeIndexer
getBigramProb	srilm.py	/^def getBigramProb(*args):$/;"	f
getBigramProb	srilm.py	/^getBigramProb = _srilm.getBigramProb$/;"	v
getBigramProb	swig_lm.py	/^    def getBigramProb(self, s):$/;"	m	class:LanguageModel
getCorpusPpl	srilm.py	/^def getCorpusPpl(*args):$/;"	f
getCorpusPpl	srilm.py	/^getCorpusPpl = _srilm.getCorpusPpl$/;"	v
getCorpusPpl	swig_lm.py	/^    def getCorpusPpl(self, filename):$/;"	m	class:LanguageModel
getCorpusProb	srilm.py	/^def getCorpusProb(*args):$/;"	f
getCorpusProb	srilm.py	/^getCorpusProb = _srilm.getCorpusProb$/;"	v
getCorpusProb	swig_lm.py	/^    def getCorpusProb(self, filename):$/;"	m	class:LanguageModel
getIndexForWord	srilm.py	/^def getIndexForWord(*args):$/;"	f
getIndexForWord	srilm.py	/^getIndexForWord = _srilm.getIndexForWord$/;"	v
getSentenceCost	swig_lm.py	/^    def getSentenceCost(self, s):$/;"	m	class:LanguageModel
getSentenceProb	srilm.py	/^def getSentenceProb(*args):$/;"	f
getSentenceProb	srilm.py	/^getSentenceProb = _srilm.getSentenceProb$/;"	v
getSentenceProb	swig_lm.py	/^    def getSentenceProb(self, s):$/;"	m	class:LanguageModel
getSentenceProb_ns	swig_lm.py	/^    def getSentenceProb_ns(self, s):$/;"	m	class:LanguageModel
getTrigramProb	srilm.py	/^def getTrigramProb(*args):$/;"	f
getTrigramProb	srilm.py	/^getTrigramProb = _srilm.getTrigramProb$/;"	v
getTrigramProb	swig_lm.py	/^    def getTrigramProb(self, s):$/;"	m	class:LanguageModel
getUnigramProb	srilm.py	/^def getUnigramProb(*args):$/;"	f
getUnigramProb	srilm.py	/^getUnigramProb = _srilm.getUnigramProb$/;"	v
getUnigramProb	swig_lm.py	/^    def getUnigramProb(self, s):$/;"	m	class:LanguageModel
getWordForIndex	srilm.py	/^def getWordForIndex(*args):$/;"	f
getWordForIndex	srilm.py	/^getWordForIndex = _srilm.getWordForIndex$/;"	v
getWordProb	srilm.py	/^def getWordProb(*args):$/;"	f
getWordProb	srilm.py	/^getWordProb = _srilm.getWordProb$/;"	v
get_all_depths	hgraph.py	/^    def get_all_depths(self):$/;"	m	class:Hgraph
get_all_in_edges	hgraph.py	/^    def get_all_in_edges(self, nodelabels = False):$/;"	m	class:Hgraph
get_amr_line	concept_init.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	data_divider.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	extract_alignment.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	extract_cycles.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	forest_prev.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	fragment_forest.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	init_unaligned_gram.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	read_amr.py	/^from smatch import get_amr_line$/;"	i
get_amr_line	smatch.py	/^def get_amr_line(input_f):$/;"	f
get_amr_line	smatch_modified.py	/^def get_amr_line(input_f):$/;"	f
get_best_gain	smatch.py	/^def get_best_gain(match,candidate_match,weight_dict,gold_len,start_match_num):$/;"	f
get_best_gain	smatch_modified.py	/^def get_best_gain(match,candidate_match,weight_dict,gold_len,start_match_num):$/;"	f
get_chunks	scorer.py	/^    def get_chunks(self, pattern):$/;"	m	class:Filter
get_concept	hgraph.py	/^    def get_concept(self, node):$/;"	m	class:Hgraph
get_concept	read_amr_aligner.py	/^def get_concept(amr_hg, concept_index):$/;"	f
get_counter	references.py	/^    def get_counter(self, i):$/;"	m	class:References
get_cube_op	decode.py	/^    def get_cube_op(self, i, j):$/;"	m	class:Decoder
get_cut_sites	cut_type_top_down_sampler.py	/^def get_cut_sites(sample, node, parent):$/;"	f
get_cut_sites	dump_sampler.py	/^def get_cut_sites(sample, node, parent):$/;"	f
get_cut_sites	edge_type_top_down_sampler.py	/^def get_cut_sites(sample, node, parent):$/;"	f
get_cut_sites	initial_sampler.py	/^def get_cut_sites(sample, node, parent):$/;"	f
get_cut_sites	parallel_sampler.py	/^def get_cut_sites(sample, node, parent):$/;"	f
get_cut_sites	simulated_sampler.py	/^def get_cut_sites(sample, node, parent):$/;"	f
get_depth	hgraph.py	/^    def get_depth(self, triple):$/;"	m	class:Hgraph
get_dot	hgraph.py	/^    def get_dot(self, instances = True):$/;"	m	class:Hgraph
get_e_nums	filter_rules.py	/^def get_e_nums(e_str):$/;"	f
get_e_nums	to_lower.py	/^def get_e_nums(e_str):$/;"	f
get_entity_name	extract_alignment.py	/^def get_entity_name(rule_str):$/;"	f
get_external_nodes	hgraph.py	/^    def get_external_nodes(self):$/;"	m	class:Hgraph
get_f_nums	filter_rules.py	/^def get_f_nums(f_str):$/;"	f
get_f_nums	to_lower.py	/^def get_f_nums(f_str):$/;"	f
get_f_words	filter_rules.py	/^def get_f_words(f_str):$/;"	f
get_f_words	to_lower.py	/^def get_f_words(f_str):$/;"	f
get_features	features.py	/^    def get_features(self):$/;"	m	class:Features
get_fh	smatch.py	/^def get_fh(test_instance,test_relation1,test_relation2,gold_instance,gold_relation1,gold_relation2,test_label,gold_label):$/;"	f
get_fh	smatch_modified.py	/^def get_fh(test_instance,test_relation1,test_relation2,gold_instance,gold_relation1,gold_relation2,test_label,gold_label):$/;"	f
get_goal	decode.py	/^    def get_goal(self, outfake = False):$/;"	m	class:Decoder
get_graph_side	HRGSample.py	/^    def get_graph_side(self, curr_node, children, ext_mapping, nonterm_index, att_list_mapping):$/;"	m	class:Sample
get_index_map	alignment.py	/^def get_index_map(cover):$/;"	f
get_jobs	decoder.py	/^def get_jobs(range):$/;"	f
get_lemma	lemmatize_snts.py	/^def get_lemma(word, pos, infl_lemma, trans_lemma):$/;"	f
get_lemma_seq	extract_alignment.py	/^def get_lemma_seq(wrd_seq, infl_lemma_map, trans_lemma_map, der_lemma_map):$/;"	f
get_lhs	extractor-ghkm.py	/^def get_lhs(rule):$/;"	f
get_max_width	smatch-table.py	/^def get_max_width(table,index):$/;"	f
get_meminfo_file	monitor.py	/^    def get_meminfo_file(self, node=None):$/;"	m	class:Monitor
get_names	smatch-table.py	/^def get_names(file_dir,files):$/;"	f
get_new_op_str	extract_alignment.py	/^def get_new_op_str(op_toks):$/;"	f
get_node_externals	HRGSample.py	/^    def get_node_externals(self, curr_node, ext_list):$/;"	m	class:Sample
get_node_suffix	HRGSample.py	/^    def get_node_suffix(self, curr_node, ext_list):$/;"	m	class:Sample
get_nodes	hgraph.py	/^    def get_nodes(self):$/;"	m	class:Hgraph
get_nt	Parallel_Sampler.py	/^def get_nt(node):$/;"	f
get_nt	add_lexweights.py	/^def get_nt(node):$/;"	f
get_nt	anneal_hrg_sampler.py	/^def get_nt(node):$/;"	f
get_nt	cut_type_top_down_sampler.py	/^def get_nt(node):$/;"	f
get_nt	dump_sample.py	/^def get_nt(node):$/;"	f
get_nt	dump_sampler.py	/^def get_nt(node):$/;"	f
get_nt	edge_type_top_down_sampler.py	/^def get_nt(node):$/;"	f
get_nt	hrg_sampler.py	/^def get_nt(node):$/;"	f
get_nt	initial_sampler.py	/^def get_nt(node):$/;"	f
get_nt	load_samples.py	/^def get_nt(node):$/;"	f
get_nt	parallel_sampler.py	/^def get_nt(node):$/;"	f
get_nt	simulated_sampler.py	/^def get_nt(node):$/;"	f
get_num_edges	amr_util.py	/^def get_num_edges(rule_str):$/;"	f
get_num_edges	feature.py	/^from rule import get_num_edges$/;"	i
get_num_edges	filter_rules.py	/^from rule import get_num_edges$/;"	i
get_num_edges	rule.py	/^def get_num_edges(rule_str):$/;"	f
get_num_edges	to_lower.py	/^from rule import get_num_edges$/;"	i
get_num_edges	translation_job.py	/^from rule import get_num_edges$/;"	i
get_ordered_nodes	hgraph.py	/^    def get_ordered_nodes(self):$/;"	m	class:Hgraph
get_prob	em_trainer.py	/^    def get_prob(self, rule, length_factor=False):$/;"	m	class:RuleCounter
get_prob	em_trainer64.py	/^    def get_prob(self, rule, length_factor=False):$/;"	m	class:RuleCounter
get_random_sol	smatch.py	/^def get_random_sol(candidate):$/;"	f
get_random_sol	smatch_modified.py	/^def get_random_sol(candidate):$/;"	f
get_reentrant_nodes	hgraph.py	/^    def get_reentrant_nodes(self):$/;"	m	class:Hgraph
get_ref_files	references.py	/^    def get_ref_files(self, ref_prefix):$/;"	m	class:References
get_reversed_index_map	alignment.py	/^def get_reversed_index_map(cover):$/;"	f
get_reversed_index_map	phrase_forest.py	/^from alignment import get_reversed_index_map$/;"	i
get_root_amr_node	forest_prev.py	/^def get_root_amr_node(curr_node, amr_graph):$/;"	f
get_rules	scorer.py	/^def get_rules(inputs):$/;"	f
get_scores	extractor-ghkm.py	/^def get_scores(prefix, rule, scores, entire_scores):$/;"	f
get_seq_mapping	extract_alignment.py	/^def get_seq_mapping(file, to_low = True):$/;"	f
get_sorted_rules	grammar.py	/^    def get_sorted_rules(self):$/;"	m	class:TrieNode
get_sorted_rules	grammar.py	/^    def get_sorted_rules(self, sym_list):$/;"	m	class:Grammar
get_src	extractor-ghkm.py	/^def get_src(rule):$/;"	f
get_stat_file	monitor.py	/^    def get_stat_file(self, node=None):$/;"	m	class:Monitor
get_string_side	HRGSample.py	/^    def get_string_side(self, curr_node, children, att_list_mapping):$/;"	m	class:Sample
get_target	extractor-ghkm.py	/^def get_target(rule):$/;"	f
get_terminals_and_nonterminals	hgraph.py	/^    def get_terminals_and_nonterminals(self, nodelabels = False):$/;"	m	class:Hgraph
get_trie_node	grammar.py	/^    def get_trie_node(self, sym_list):$/;"	m	class:Grammar
get_triples	amr.py	/^  def get_triples(self):$/;"	m	class:AMR
get_triples	amr_old.py	/^  def get_triples(self):$/;"	m	class:AMR
get_triples	amr_without_alignment.py	/^  def get_triples(self):$/;"	m	class:AMR
get_triples2	amr.py	/^  def get_triples2(self):$/;"	m	class:AMR
get_triples2	amr_old.py	/^  def get_triples2(self):$/;"	m	class:AMR
get_triples2	amr_without_alignment.py	/^  def get_triples2(self):$/;"	m	class:AMR
get_weakly_connected_roots	hgraph.py	/^    def get_weakly_connected_roots(self, warn=sys.stderr):$/;"	m	class:Hgraph
get_wordseq_part	concept_init.py	/^def get_wordseq_part(line):$/;"	f
get_wordseq_part	extract_alignment.py	/^def get_wordseq_part(line):$/;"	f
getall	hgraph.py	/^    def getall(self, k):$/;"	m	class:ListMap
getopt	gflags.py	/^import getopt$/;"	i
getopt	gflags_python3.py	/^import getopt$/;"	i
gflags	HRGRule.py	/^import gflags$/;"	i
gflags	Parallel_Sampler.py	/^import gflags$/;"	i
gflags	add_lexweights.py	/^import gflags$/;"	i
gflags	anneal_hrg_sampler.py	/^import gflags$/;"	i
gflags	chart.py	/^import gflags$/;"	i
gflags	common.py	/^import gflags$/;"	i
gflags	composed_rule_extractor.py	/^import gflags$/;"	i
gflags	concept_init.py	/^import gflags$/;"	i
gflags	corpus_server.py	/^import gflags$/;"	i
gflags	cut_type_top_down_sampler.py	/^import gflags$/;"	i
gflags	decode.py	/^import gflags$/;"	i
gflags	decoder.py	/^import gflags$/;"	i
gflags	decoding_flags.py	/^import gflags$/;"	i
gflags	dot_chart.py	/^import gflags$/;"	i
gflags	driver.py	/^import gflags$/;"	i
gflags	dump_sample.py	/^import gflags$/;"	i
gflags	dump_sampler.py	/^import gflags$/;"	i
gflags	edge_type_top_down_sampler.py	/^import gflags$/;"	i
gflags	em_trainer.py	/^import gflags$/;"	i
gflags	extract_alignment.py	/^import gflags$/;"	i
gflags	extract_cycles.py	/^import gflags$/;"	i
gflags	extractor.py	/^import gflags$/;"	i
gflags	feature.py	/^import gflags$/;"	i
gflags	features.py	/^import gflags$/;"	i
gflags	forest_prev.py	/^import gflags$/;"	i
gflags	fragment_forest.py	/^import gflags$/;"	i
gflags	grammar.py	/^import gflags$/;"	i
gflags	hrg_sampler.py	/^import gflags$/;"	i
gflags	hypergraph.py	/^import gflags$/;"	i
gflags	initial_sampler.py	/^import gflags$/;"	i
gflags	job_logger.py	/^import gflags$/;"	i
gflags	lexical_weighter.py	/^import gflags$/;"	i
gflags	load_samples.py	/^import gflags$/;"	i
gflags	logger.py	/^import gflags$/;"	i
gflags	parallel_sampler.py	/^import gflags$/;"	i
gflags	phrase_forest.py	/^import gflags$/;"	i
gflags	python_lm.py	/^import gflags$/;"	i
gflags	rule.py	/^import gflags$/;"	i
gflags	rule_dumper.py	/^import gflags$/;"	i
gflags	rule_extraction_flags.py	/^import gflags$/;"	i
gflags	rule_filter.py	/^import gflags$/;"	i
gflags	scorer.py	/^import gflags$/;"	i
gflags	simulated_sampler.py	/^import gflags$/;"	i
gflags	translation_job.py	/^import gflags$/;"	i
gflags_validators	gflags.py	/^import gflags_validators$/;"	i
gflags_validators	gflags_python3.py	/^import gflags_validators$/;"	i
global_sampler	hrg_sampler.py	/^        global_sampler = init_sampler()$/;"	v
glue_grammar	driver.py	/^    glue_grammar = os.path.join(mydir, 'test-extractor\/monotonic_glue.gr')$/;"	v
glue_missing_phrases	abc_parser.py	/^glue_missing_phrases = False$/;"	v
goal	decode.py	/^    def goal(self):$/;"	m	class:Item
gram	scorer.py	/^gram = {}$/;"	v
grammar_file	concept_init.py	/^    grammar_file = sys.argv[4]$/;"	v
grammar_file	extract_alignment.py	/^    grammar_file = sys.argv[6]$/;"	v
grammarfilename	scorer.py	/^    def grammarfilename(self, i):$/;"	m	class:Tabulator
grammars	decoder.py	/^grammars = None$/;"	v
graph_side	amr_fragment.py	/^    def graph_side(self, ext_mapping, include_root=True, sample=None, var_mapping=None, nonterm_index=None, unvisited_nodes=None, att_list_mapping=None):$/;"	m	class:AMRFragment
graph_under_node	HRGSample.py	/^    def graph_under_node(self, curr_root, hgraph, var_mapping, nonterm_index, unvisited_nodes):$/;"	m	class:Sample
graph_yield	hgraph.py	/^    def graph_yield(self):$/;"	m	class:Hgraph
handle	corpus_server.py	/^    def handle(self, conn):$/;"	m	class:CorpusServer
has_edge	hgraph.py	/^    def has_edge(self, par, rel, child):$/;"	m	class:Hgraph
has_key	gflags.py	/^  has_key = __contains__  # a synonym for __contains__()$/;"	v	class:FlagValues
has_key	gflags_python3.py	/^  has_key = __contains__  # a synonym for __contains__()$/;"	v	class:FlagValues
has_triple	hgraph.py	/^    def has_triple(self, parent, relation, child):$/;"	m	class:Hgraph
heapify	abc_parser.py	/^from heapq import heapify, heappop, heappush$/;"	i
heapify	chart.py	/^from heapq import heapify, heappush, heappop$/;"	i
heapify	cube.py	/^from heapq import heapify, heappop, heappush$/;"	i
heapify	decode.py	/^from heapq import heapify, heappush, heappop$/;"	i
heapify	grammar.py	/^from heapq import heapify, heappush, heappop$/;"	i
heapify	lazy_list_merger.py	/^from heapq import heapify, heappop, heappush$/;"	i
heappop	abc_parser.py	/^from heapq import heapify, heappop, heappush$/;"	i
heappop	chart.py	/^from heapq import heapify, heappush, heappop$/;"	i
heappop	cube.py	/^from heapq import heapify, heappop, heappush$/;"	i
heappop	decode.py	/^from heapq import heapify, heappush, heappop$/;"	i
heappop	grammar.py	/^from heapq import heapify, heappush, heappop$/;"	i
heappop	lazy_list_merger.py	/^from heapq import heapify, heappop, heappush$/;"	i
heappush	abc_parser.py	/^from heapq import heapify, heappop, heappush$/;"	i
heappush	chart.py	/^from heapq import heapify, heappush, heappop$/;"	i
heappush	cube.py	/^from heapq import heapify, heappop, heappush$/;"	i
heappush	decode.py	/^from heapq import heapify, heappush, heappop$/;"	i
heappush	grammar.py	/^from heapq import heapify, heappush, heappop$/;"	i
heappush	lazy_list_merger.py	/^from heapq import heapify, heappop, heappush$/;"	i
heapq	scorer.py	/^import heapq$/;"	i
hedgecombiner	hgraph.py	/^        def hedgecombiner(nodes):$/;"	f	function:Hgraph.__str__
hedgecombiner	hgraph.py	/^        def hedgecombiner(nodes):$/;"	f	function:Hgraph.non_external_str
hedgecombiner	hgraph.py	/^        def hedgecombiner(nodes):$/;"	f	function:Hgraph.to_amr_format
hedgecombiner	hgraph.py	/^        def hedgecombiner(nodes):$/;"	f	function:Hgraph.to_amr_string
heuristic	feature.py	/^    def heuristic(self, item):$/;"	m	class:Feature
heuristic	feature.py	/^    def heuristic(self, item):$/;"	m	class:LM
hg	hg_show.py	/^            hg = extractor.extract_hypergraph(alignment)$/;"	v
hg	hgshow.py	/^    hg = deserializer.deserialize(sys.argv[1])$/;"	v	class:SEdge
hg_file	dump_sample.py	/^        hg_file = os.path.join(FLAGS.data, 'forest_%s' % id)$/;"	v
hg_files	best_path.py	/^    hg_files = sys.argv[2:]$/;"	v
hgs	phrase_forest.py	/^    hgs = []$/;"	v
host	hrg_sampler.py	/^            host = FLAGS.host$/;"	v
host	hrg_sampler.py	/^        host = socket.gethostname()$/;"	v
hotshot	extractor.py	/^    import hotshot, hotshot.stats$/;"	i
hotshot	scorer.py	/^    import hotshot, hotshot.stats$/;"	i
howManyNgrams	srilm.py	/^def howManyNgrams(*args):$/;"	f
howManyNgrams	srilm.py	/^howManyNgrams = _srilm.howManyNgrams$/;"	v
human	feature.py	/^from mymonitor import human, memory$/;"	i
human	mymonitor.py	/^def human(v):$/;"	f
human	python_lm.py	/^from mymonitor import human, memory$/;"	i
hyperedge_rep	gene_glue.py	/^def hyperedge_rep(ntype, suffix, typ):$/;"	f
hypergraph	best_path.py	/^import hypergraph$/;"	i
hypergraph	concept_init.py	/^import hypergraph$/;"	i
hypergraph	consensus_training.py	/^import hypergraph$/;"	i
hypergraph	decode.py	/^import hypergraph$/;"	i
hypergraph	em_trainer.py	/^import hypergraph$/;"	i
hypergraph	em_trainer64.py	/^import hypergraph$/;"	i
hypergraph	extract_alignment.py	/^import hypergraph$/;"	i
hypergraph	extract_cycles.py	/^import hypergraph$/;"	i
hypergraph	forest_prev.py	/^import hypergraph$/;"	i
hypergraph	fragment_forest.py	/^import hypergraph$/;"	i
hypergraph	hg_show.py	/^import hypergraph$/;"	i
hypergraph	init_unaligned_gram.py	/^import hypergraph$/;"	i
hypergraph	phrase_forest.py	/^import hypergraph$/;"	i
hypergraph	translation_job.py	/^import hypergraph$/;"	i
hypergraphs	dump_sample.py	/^        hypergraphs = cPickle.load(f)$/;"	v
id_str	hypergraph.py	/^    def id_str(self):$/;"	m	class:Node
imp	srilm.py	/^        import imp$/;"	i
in_edges	hgraph.py	/^    def in_edges(self, node, nodelabels = False):$/;"	m	class:Hgraph
index	Parallel_Sampler.py	/^def index(node):$/;"	f
index	anneal_hrg_sampler.py	/^def index(node):$/;"	f
index	cut_type_top_down_sampler.py	/^def index(node):$/;"	f
index	dump_sample.py	/^def index(node):$/;"	f
index	dump_sampler.py	/^def index(node):$/;"	f
index	edge_type_top_down_sampler.py	/^def index(node):$/;"	f
index	hrg_sampler.py	/^def index(node):$/;"	f
index	initial_sampler.py	/^def index(node):$/;"	f
index	load_samples.py	/^def index(node):$/;"	f
index	parallel_sampler.py	/^def index(node):$/;"	f
index	simulated_sampler.py	/^def index(node):$/;"	f
init	HRGRule.py	/^    def init(self, lhs, f, e, e2f):$/;"	m	class:SHRGRule
init	rule.py	/^    def init(self, lhs, f, e, e2f):$/;"	m	class:Rule
initLM	srilm.py	/^def initLM(*args):$/;"	f
initLM	srilm.py	/^initLM = _srilm.initLM$/;"	v
init_ext_frag	amr_fragment.py	/^def init_ext_frag(frag, is_pred=False, is_op=False):$/;"	f
init_ext_mapping	HRGSample.py	/^    def init_ext_mapping(self, ext_list):$/;"	m	class:Sample
init_from_file	add_lexweights.py	/^    def init_from_file(self, f):$/;"	m	class:Sample
init_hgraph	amr_fragment.py	/^    def init_hgraph(self, hgraph, node_index, var_mapping, visited_index, sample=None, nonterm_index=None, unvisited_nodes=None):$/;"	m	class:AMRFragment
init_match	smatch.py	/^def init_match(candidate_match,test_instance,gold_instance):$/;"	f
init_match	smatch_modified.py	/^def init_match(candidate_match,test_instance,gold_instance):$/;"	f
init_new_ext_mapping	HRGSample.py	/^    def init_new_ext_mapping(self, ext_list, curr_root):$/;"	m	class:Sample
init_new_hgraph	amr_fragment.py	/^    def init_new_hgraph(self, hgraph, node_index, var_mapping, visited_index, sample=None, nonterm_index=None, unvisited_nodes=None, ext_mapping=None, att_list_mapping=None, is_root=False):$/;"	m	class:AMRFragment
init_nonterm_map	HRGSample.py	/^    def init_nonterm_map(self, children):$/;"	m	class:Sample
init_sampler	Parallel_Sampler.py	/^def init_sampler():$/;"	f
init_sampler	anneal_hrg_sampler.py	/^def init_sampler():$/;"	f
init_sampler	cut_type_top_down_sampler.py	/^def init_sampler():$/;"	f
init_sampler	dump_sample.py	/^def init_sampler():$/;"	f
init_sampler	dump_sampler.py	/^def init_sampler():$/;"	f
init_sampler	edge_type_top_down_sampler.py	/^def init_sampler():$/;"	f
init_sampler	hrg_sampler.py	/^            init_sampler = copy.deepcopy(SAMPLER) #Make a copy of the initial sampler$/;"	v
init_sampler	hrg_sampler.py	/^def init_sampler():$/;"	f
init_sampler	initial_sampler.py	/^def init_sampler():$/;"	f
init_sampler	load_samples.py	/^def init_sampler():$/;"	f
init_sampler	parallel_sampler.py	/^def init_sampler():$/;"	f
init_sampler	simulated_sampler.py	/^def init_sampler():$/;"	f
init_sampler_file	hrg_sampler.py	/^            init_sampler_file = os.path.join(FLAGS.dump, 'sampler_file_iter%d' % (iteration-1))$/;"	v
init_set	extract_unseen.py	/^def init_set(file_f):$/;"	f
init_set	init_unseen_grammar.py	/^from extract_unseen import init_set$/;"	i
init_split	Parallel_Sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	anneal_hrg_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	cut_type_top_down_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	dump_sample.py	/^def init_split(samples, split=True):$/;"	f
init_split	dump_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	edge_type_top_down_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	hrg_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	initial_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	load_samples.py	/^def init_split(samples, split=True):$/;"	f
init_split	parallel_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_split	simulated_sampler.py	/^def init_split(samples, split=True):$/;"	f
init_type_indexer	parallel_sampler.py	/^def init_type_indexer(samples):$/;"	f
initialize	decode.py	/^    def initialize(self):$/;"	m	class:Decoder
initialize	grammar.py	/^    def initialize(self):$/;"	m	class:LexicalITG
initialize	grammar.py	/^    def initialize(self):$/;"	m	class:SCFG
initialize_earley	decode.py	/^    def initialize_earley(self):$/;"	m	class:Decoder
initialize_edge_alignment	forest_prev.py	/^def initialize_edge_alignment(aligned_fragments, edge_alignment):$/;"	f
initialize_edge_alignment	fragment_forest.py	/^def initialize_edge_alignment(aligned_fragments, edge_alignment):$/;"	f
initialize_from_alignment	amr_fragment.py	/^    def initialize_from_alignment(nodes, edges, graph=None):$/;"	m	class:AMRFragment
initialize_graph_side	HRGSample.py	/^    def initialize_graph_side(self, hgraph, node, children, nonterm_index):$/;"	m	class:Sample
initialize_lemma	extract_alignment.py	/^def initialize_lemma(lemma_file):$/;"	f
initialize_lemma	lemmatize_snts.py	/^from extract_alignment import initialize_lemma$/;"	i
initialize_new_graph_side	HRGSample.py	/^    def initialize_new_graph_side(self, hgraph, node, children, nonterm_index, ext_mapping, att_list_mapping):$/;"	m	class:Sample
initialize_string_side	HRGSample.py	/^    def initialize_string_side(self, node, children):$/;"	m	class:Sample
initialize_with_lexgrammar	decode.py	/^    def initialize_with_lexgrammar(self, lexgrammar):$/;"	m	class:Decoder
input_file	lexweights.py	/^            input_file = open(args[0], "r")$/;"	v
input_file	lexweights.py	/^            input_file = sys.stdin$/;"	v
input_files	lexweights.py	/^        input_files = []$/;"	v
inside	hypergraph.py	/^    def inside(self):$/;"	m	class:Hypergraph
inside_exp	hypergraph.py	/^    def inside_exp(self):$/;"	m	class:Hypergraph
intersect	alignment.py	/^    def intersect(a1, a2):$/;"	m	class:Alignment
intersect	alignment.py	/^    intersect = staticmethod(intersect)$/;"	v	class:Alignment
interval	scorer.py	/^interval = 100000$/;"	v
isLeaf	amr_graph.py	/^    def isLeaf():$/;"	m	class:AMREdge
is_cap	extract_alignment.py	/^def is_cap(s):$/;"	f
is_connected	hgraph.py	/^    def is_connected(self, warn=sys.stderr):$/;"	m	class:Hgraph
is_decades	extract_alignment.py	/^def is_decades(s):$/;"	f
is_ext	amr_fragment.py	/^    def is_ext(self, node_num):$/;"	m	class:AMRFragment
is_ghkm	feature.py	/^def is_ghkm(rule):$/;"	f
is_glue	count_top_rule.py	/^from em_trainer import is_glue$/;"	i
is_glue	em_trainer.py	/^def is_glue(rule):$/;"	f
is_glue	em_trainer64.py	/^def is_glue(rule):$/;"	f
is_glue	feature.py	/^def is_glue(rule):$/;"	f
is_glue	sort_trees.py	/^from em_trainer import is_glue$/;"	i
is_goal_item	forest_prev.py	/^def is_goal_item(chart_item):$/;"	f
is_goal_item	fragment_forest.py	/^def is_goal_item(chart_item):$/;"	f
is_hiero	feature.py	/^def is_hiero(rule):$/;"	f
is_leaf	amr_graph.py	/^    def is_leaf(self):$/;"	m	class:AMRNode
is_lexical	extractor-ghkm.py	/^is_lexical = lambda src: True if SRC_PRE in src else False$/;"	v
is_nonterm	to_lower.py	/^def is_nonterm(tok):$/;"	f
is_num	extract_alignment.py	/^def is_num(s):$/;"	f
is_phrase	feature.py	/^def is_phrase(rule):$/;"	f
is_root_arc	amr_graph.py	/^def is_root_arc(edge_label):$/;"	f
is_var_node	amr_graph.py	/^    def is_var_node(self):$/;"	m	class:AMRNode
is_virtual	HRGRule.py	/^def is_virtual(sym):$/;"	f
is_virtual	chart.py	/^from rule import is_virtual, nocat$/;"	i
is_virtual	decode.py	/^from rule import Rule, is_virtual, nocat$/;"	i
is_virtual	features.py	/^from rule import is_virtual$/;"	i
is_virtual	rule.py	/^def is_virtual(sym):$/;"	f
isi_dir_pre	smatch-table.py	/^isi_dir_pre="\/nfs\/web\/isi.edu\/cgi-bin\/div3\/mt\/save-amr"$/;"	v
isvar	HRGRule.py	/^def isvar(s):$/;"	f
isvar	feature.py	/^from rule import isvar$/;"	i
isvar	grammar.py	/^from rule import Rule, isvar, nocat$/;"	i
isvar	lexical_weighter.py	/^from rule import isvar$/;"	i
isvar	rule.py	/^def isvar(s):$/;"	f
isvar	rule_filter.py	/^from rule import isvar$/;"	i
isvar	scorer.py	/^from rule import Rule, isvar$/;"	i
itemgetter	HRGSample.py	/^from operator import itemgetter$/;"	i
itemgetter	hgraph.py	/^from operator import itemgetter$/;"	i
items	chart.py	/^    def items(self, i, j):$/;"	m	class:Chart
items	hgraph.py	/^    def items(self):$/;"	m	class:ListMap
itemsfor	hgraph.py	/^    def itemsfor(self, k):$/;"	m	class:ListMap
iter_bins	dot_chart.py	/^    def iter_bins(self):$/;"	m	class:DotChart
iter_items_by_nts	chart.py	/^    def iter_items_by_nts(self, i, j):$/;"	m	class:Chart
iter_likelihood	Parallel_Sampler.py	/^        iter_likelihood = SAMPLER.likelihood()$/;"	v
iter_likelihood	anneal_hrg_sampler.py	/^        iter_likelihood = SAMPLER.likelihood()$/;"	v
iter_likelihood	load_samples.py	/^        iter_likelihood = SAMPLER.likelihood()$/;"	v
iter_num	smatch.py	/^iter_num=5  #global variable, total number of iteration$/;"	v
iter_num	smatch_modified.py	/^iter_num=5  #global variable, total number of iteration$/;"	v
iter_rulebins	grammar.py	/^    def iter_rulebins(self):$/;"	m	class:TrieNode
iter_rules	grammar.py	/^    def iter_rules(self):$/;"	m	class:RuleBin
iter_rules	grammar.py	/^    def iter_rules(self):$/;"	m	class:TrieNode
iter_rules	grammar.py	/^    def iter_rules(self, sym_list):$/;"	m	class:Grammar
iter_rules	rule_dumper.py	/^    def iter_rules(self):$/;"	m	class:RuleDumper
iter_start	Parallel_Sampler.py	/^        iter_start = time.time()$/;"	v
iter_start	Parallel_Sampler.py	/^    iter_start = time.time()$/;"	v
iter_start	anneal_hrg_sampler.py	/^        iter_start = time.time()$/;"	v
iter_start	anneal_hrg_sampler.py	/^    iter_start = time.time()$/;"	v
iter_start	cut_type_top_down_sampler.py	/^    iter_start = time.time()$/;"	v	class:Sample
iter_start	edge_type_top_down_sampler.py	/^    iter_start = time.time()$/;"	v	class:Sample
iter_start	hrg_sampler.py	/^            iter_start = time.time()$/;"	v
iter_start	initial_sampler.py	/^    iter_start = time.time()$/;"	v	class:Sample
iter_start	load_samples.py	/^        iter_start = time.time()$/;"	v
iter_start	load_samples.py	/^    iter_start = time.time()$/;"	v
iter_start	simulated_sampler.py	/^    iter_start = time.time()$/;"	v	class:Sample
iter_top	cube.py	/^    def iter_top(self, n):$/;"	m	class:Cube
iter_top	lazy_list_merger.py	/^    def iter_top(self, n):$/;"	m	class:LazyListMerger
iter_top_univar	cube.py	/^    def iter_top_univar(self, n):$/;"	m	class:Cube
iter_trie_nodes	grammar.py	/^    def iter_trie_nodes(self):$/;"	m	class:Grammar
iter_unknown_items	decode.py	/^    def iter_unknown_items(self):$/;"	m	class:Decoder
iteration	Parallel_Sampler.py	/^    iteration = 1$/;"	v
iteration	anneal_hrg_sampler.py	/^    iteration = 1$/;"	v
iteration	cut_type_top_down_sampler.py	/^    iteration = 1$/;"	v	class:Sample
iteration	edge_type_top_down_sampler.py	/^    iteration = 1$/;"	v	class:Sample
iteration	hrg_sampler.py	/^        iteration = 1$/;"	v
iteration	initial_sampler.py	/^    iteration = 1$/;"	v	class:Sample
iteration	load_samples.py	/^    iteration = 1$/;"	v
iteration	simulated_sampler.py	/^    iteration = 1$/;"	v	class:Sample
iterbins	chart.py	/^    def iterbins(self):$/;"	m	class:Chart
itertools	lexweights.py	/^import sys, math, itertools$/;"	i
key	HRGRule.py	/^    def key(self):$/;"	m	class:SHRGRule
key	abc_parser.py	/^    def key(self, edge):$/;"	m	class:EdgeIndex
key	chart.py	/^    def key(self, item):$/;"	m	class:Chart
key	rule.py	/^    def key(self):$/;"	m	class:Rule
label_phrase	extractor.py	/^    def label_phrase(self, a, phrase):$/;"	m	class:Extractor
labels	draw_graphs.py	/^    labels=[]$/;"	v
last_sampler_file	hrg_sampler.py	/^            last_sampler_file = os.path.join(FLAGS.dump, 'sampler_file_iter%d' % (iteration-1))$/;"	v
leftneighbors	chart.py	/^    def leftneighbors(self, item):$/;"	m	class:Chart
lemma_snt	lemmatize_snts.py	/^def lemma_snt(sentence, pos_seq, infl_lemma, trans_lemma):$/;"	f
level	logger.py	/^level = 1$/;"	v
lexed_file	non_lexed_weight.py	/^    lexed_file = sys.argv[2]$/;"	v
lexical	HRGRule.py	/^    def lexical(self):$/;"	m	class:SHRGRule
lexical	rule.py	/^    def lexical(self):$/;"	m	class:Rule
lexical_rules	extractor-ghkm.py	/^    lexical_rules = defaultdict(lambda: [0, 0.0, 0.0]) #count, lex(t|s) lex(s|t)$/;"	v
lexical_weighting	extractor-ghkm.py	/^def lexical_weighting(src_side, trg_side, alignment):$/;"	f
lgamma	HRGSample.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	Parallel_Sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	add_lexweights.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	anneal_hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	cut_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	dump_sample.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	dump_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	edge_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	initial_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	load_samples.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	parallel_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
lgamma	simulated_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
likelihood	HRGSample.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	add_lexweights.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	cut_type_top_down_sampler.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	dump_sampler.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	edge_type_top_down_sampler.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	initial_sampler.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	parallel_sampler.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood	simulated_sampler.py	/^    def likelihood(self):$/;"	m	class:NTSampler
likelihood_file	Parallel_Sampler.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v
likelihood_file	anneal_hrg_sampler.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v
likelihood_file	cut_type_top_down_sampler.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v	class:Sample
likelihood_file	dump_sampler.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v	class:Sample
likelihood_file	edge_type_top_down_sampler.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v	class:Sample
likelihood_file	hrg_sampler.py	/^        likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v
likelihood_file	load_samples.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v
likelihood_file	simulated_sampler.py	/^    likelihood_file = FLAGS.dump + '\/likelihood_file'$/;"	v	class:Sample
likelihood_handle	Parallel_Sampler.py	/^    likelihood_handle = open(os.path.join(FLAGS.dump, 'likelihood_file'), 'w')$/;"	v
likelihood_handle	anneal_hrg_sampler.py	/^    likelihood_handle = open(os.path.join(FLAGS.dump, 'likelihood_file'), 'w')$/;"	v
likelihood_handle	cut_type_top_down_sampler.py	/^    likelihood_handle = open(likelihood_file, 'w')$/;"	v	class:Sample
likelihood_handle	dump_sampler.py	/^    likelihood_handle = open(likelihood_file, 'w')$/;"	v	class:Sample
likelihood_handle	edge_type_top_down_sampler.py	/^    likelihood_handle = open(likelihood_file, 'w')$/;"	v	class:Sample
likelihood_handle	hrg_sampler.py	/^        likelihood_handle = open(os.path.join(FLAGS.dump, 'likelihood_file'), 'w')$/;"	v
likelihood_handle	load_samples.py	/^    likelihood_handle = open(os.path.join(FLAGS.dump, 'likelihood_file'), 'w')$/;"	v
likelihood_handle	simulated_sampler.py	/^    likelihood_handle = open(likelihood_file, 'w')$/;"	v	class:Sample
likelihoods	draw_graphs.py	/^    likelihoods=[]$/;"	v
likelihoods1	draw_graphs.py	/^    likelihoods1 = []$/;"	v
likelihoods2	draw_graphs.py	/^    likelihoods2 = []$/;"	v
line	count_top_rule.py	/^        line = next(f)$/;"	v
line1	draw_graphs.py	/^        line1 = f1.readline().strip()$/;"	v
line2	draw_graphs.py	/^        line2 = f2.readline().strip()$/;"	v
lines	sort_trees.py	/^    lines = []$/;"	v
listsum	consensus_training.py	/^    def listsum(self, l1, l2):$/;"	m	class:ConsensusTrainer
ll	lexweights.py	/^def ll(k,n,x):$/;"	f
llr	lexweights.py	/^def llr(n,c1,c2,c12):$/;"	f
lm	python_lm.py	/^    lm = LanguageModel(sys.argv[1])$/;"	v	class:LanguageModel
lm_checker	decoder.py	/^def lm_checker(value):$/;"	f
lncr	HRGSample.py	/^def lncr(n, r):$/;"	f
lncr	add_lexweights.py	/^def lncr(n, r):$/;"	f
lncr	cut_type_top_down_sampler.py	/^def lncr(n, r):$/;"	f
lncr	dump_sampler.py	/^def lncr(n, r):$/;"	f
lncr	edge_type_top_down_sampler.py	/^def lncr(n, r):$/;"	f
lncr	initial_sampler.py	/^def lncr(n, r):$/;"	f
lncr	parallel_sampler.py	/^def lncr(n, r):$/;"	f
lncr	simulated_sampler.py	/^def lncr(n, r):$/;"	f
load	grammar.py	/^    def load(self, filename):$/;"	m	class:LexicalITG
load	grammar.py	/^    def load(self, filename):$/;"	m	class:SCFG
load	references.py	/^    def load(self):$/;"	m	class:References
load_features	features.py	/^    def load_features(self, features_weights):$/;"	m	class:Features
log	HRGSample.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	Parallel_Sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	add_lexweights.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	anneal_hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	consensus_training.py	/^    def log(self, f):$/;"	m	class:ConsensusTrainingCounter
log	cut_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	digamma.py	/^from math import log, exp$/;"	i
log	dump_sample.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	dump_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	edge_type_top_down_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	hrg_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	hypergraph_test.py	/^from math import log$/;"	i
log	initial_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	job_logger.py	/^    def log(self, jid):$/;"	m	class:JobLogger
log	load_samples.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	logprob.py	/^from math import log, log10, exp$/;"	i
log	parallel_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log	simulated_sampler.py	/^from math import log, exp, factorial, lgamma$/;"	i
log10	logprob.py	/^from math import log, log10, exp$/;"	i
logger	HRGRule.py	/^import logger$/;"	i
logger	Parallel_Sampler.py	/^import logger$/;"	i
logger	abc_parser.py	/^import logger$/;"	i
logger	add_lexweights.py	/^import logger$/;"	i
logger	anneal_hrg_sampler.py	/^import logger$/;"	i
logger	chart.py	/^import logger$/;"	i
logger	common.py	/^import logger$/;"	i
logger	concept_init.py	/^import logger$/;"	i
logger	consensus_training.py	/^import logger$/;"	i
logger	corpus_server.py	/^import logger$/;"	i
logger	cut_type_top_down_sampler.py	/^import logger$/;"	i
logger	decode.py	/^import logger$/;"	i
logger	decoder.py	/^import logger$/;"	i
logger	dot_chart.py	/^import logger$/;"	i
logger	driver.py	/^import logger$/;"	i
logger	dump_sample.py	/^import logger$/;"	i
logger	dump_sampler.py	/^import logger$/;"	i
logger	edge_type_top_down_sampler.py	/^import logger$/;"	i
logger	em_trainer.py	/^import logger$/;"	i
logger	em_trainer64.py	/^import logger$/;"	i
logger	extract_alignment.py	/^import logger$/;"	i
logger	extract_cycles.py	/^import logger$/;"	i
logger	extractor.py	/^import logger$/;"	i
logger	feature.py	/^import logger$/;"	i
logger	features.py	/^import logger$/;"	i
logger	forest_prev.py	/^import logger$/;"	i
logger	fragment_forest.py	/^import logger$/;"	i
logger	grammar.py	/^import logger$/;"	i
logger	hg_show.py	/^import logger$/;"	i
logger	hrg_sampler.py	/^import logger$/;"	i
logger	hypergraph.py	/^import logger$/;"	i
logger	hypergraph_test.py	/^import logger$/;"	i
logger	init_unaligned_gram.py	/^import logger$/;"	i
logger	initial_sampler.py	/^import logger$/;"	i
logger	job_logger.py	/^import logger$/;"	i
logger	lexical_weighter.py	/^import logger$/;"	i
logger	load_samples.py	/^import logger$/;"	i
logger	monitor.py	/^import logger$/;"	i
logger	parallel_sampler.py	/^import logger$/;"	i
logger	phrase_forest.py	/^import logger$/;"	i
logger	rule.py	/^import logger$/;"	i
logger	rule_dumper.py	/^import logger$/;"	i
logger	scorer.py	/^import logger$/;"	i
logger	simulated_sampler.py	/^import logger$/;"	i
logger	translation_job.py	/^import logger$/;"	i
logprob	HRGSample.py	/^import logprob$/;"	i
logprob	Parallel_Sampler.py	/^import logprob$/;"	i
logprob	add_lexweights.py	/^import logprob$/;"	i
logprob	anneal_hrg_sampler.py	/^import logprob$/;"	i
logprob	consensus_training.py	/^import logprob$/;"	i
logprob	cut_type_top_down_sampler.py	/^import logprob$/;"	i
logprob	dump_sample.py	/^import logprob$/;"	i
logprob	dump_sampler.py	/^import logprob$/;"	i
logprob	edge_type_top_down_sampler.py	/^import logprob$/;"	i
logprob	hrg_sampler.py	/^import logprob$/;"	i
logprob	initial_sampler.py	/^import logprob$/;"	i
logprob	load_samples.py	/^import logprob$/;"	i
logprob	parallel_sampler.py	/^import logprob$/;"	i
logprob	python_lm.py	/^    def logprob(self, ngram):$/;"	m	class:LanguageModel
logprob	simulated_sampler.py	/^import logprob$/;"	i
logprod	hypergraph.py	/^from logprob import logsum, logprod, LOGZERO$/;"	i
logprod	logprob.py	/^def logprod(logx, logy):$/;"	f
logs	mymonitor.py	/^logs = sys.stderr$/;"	v
logsum	hypergraph.py	/^from logprob import logsum, logprod, LOGZERO$/;"	i
logsum	logprob.py	/^def logsum(logx, logy):$/;"	f
loosen_phrases	extractor.py	/^def loosen_phrases(self, phrases, maxlen):$/;"	f
m	monitor.py	/^    m = Monitor()$/;"	v	class:Monitor
main	data_divider.py	/^def main(argv):$/;"	f
main	decoder.py	/^def main():$/;"	f
main	extract_cycles.py	/^def main(argv):$/;"	f
main	extract_cycles.py	/^from data_divider import main$/;"	i
main	extractor.py	/^def main():$/;"	f
main	filter_rules.py	/^def main(argv):$/;"	f
main	filter_stop_words.py	/^def main(argv):$/;"	f
main	forest_prev.py	/^from data_divider import main$/;"	i
main	fragment_forest.py	/^from data_divider import main$/;"	i
main	gene_glue.py	/^def main(argv):$/;"	f
main	lemmatize_snts.py	/^def main(argv):$/;"	f
main	scorer.py	/^def main():$/;"	f
main	smatch-table.py	/^def main(args):$/;"	f
main	smatch.py	/^def main(args):$/;"	f
main	smatch_modified.py	/^def main(args):$/;"	f
main	to_lower.py	/^def main(argv):$/;"	f
make_composed_rule	HRGSample.py	/^    def make_composed_rule(self, node, first_rule=False):$/;"	m	class:Sample
make_composed_rule	add_lexweights.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rule	cut_type_top_down_sampler.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rule	dump_sampler.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rule	edge_type_top_down_sampler.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rule	initial_sampler.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rule	parallel_sampler.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rule	simulated_sampler.py	/^    def make_composed_rule(self, node):$/;"	m	class:Sample
make_composed_rules	phrase_forest.py	/^def make_composed_rules(node, align):$/;"	f
make_composed_rules	phrase_hypergraph.py	/^    def make_composed_rules(self):$/;"	m	class:PhraseHGNode
make_item	abc_parser.py	/^    def make_item(self, item1, item2, inverted):$/;"	m	class:ABCParser
make_new_item	features.py	/^    def make_new_item(self, rule, ants, i, j):$/;"	m	class:Features
make_one_level_rule	add_lexweights.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_one_level_rule	cut_type_top_down_sampler.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_one_level_rule	dump_sampler.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_one_level_rule	edge_type_top_down_sampler.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_one_level_rule	initial_sampler.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_one_level_rule	parallel_sampler.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_one_level_rule	simulated_sampler.py	/^    def make_one_level_rule(self, node):$/;"	m	class:Sample
make_path	decode.py	/^    def make_path(self, subpaths):$/;"	m	class:Deduction
make_path	hypergraph.py	/^    def make_path(self, subpaths):$/;"	m	class:Edge
make_rule	add_lexweights.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
make_rule	cut_type_top_down_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
make_rule	dump_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
make_rule	edge_type_top_down_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
make_rule	extractor.py	/^    def make_rule(self, a, source_phrase, fwords):$/;"	m	class:Extractor
make_rule	initial_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
make_rule	parallel_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
make_rule	phrase_forest.py	/^def make_rule(parent,$/;"	f
make_rule	simulated_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
mark_level	HRGSample.py	/^from levels import mark_level$/;"	i
mark_level	Parallel_Sampler.py	/^from levels import mark_level$/;"	i
mark_level	add_lexweights.py	/^from levels import mark_level$/;"	i
mark_level	anneal_hrg_sampler.py	/^from levels import mark_level$/;"	i
mark_level	cut_type_top_down_sampler.py	/^from levels import mark_level$/;"	i
mark_level	dump_sample.py	/^from levels import mark_level$/;"	i
mark_level	dump_sampler.py	/^from levels import mark_level$/;"	i
mark_level	edge_type_top_down_sampler.py	/^from levels import mark_level$/;"	i
mark_level	hrg_sampler.py	/^from levels import mark_level$/;"	i
mark_level	initial_sampler.py	/^from levels import mark_level$/;"	i
mark_level	levels.py	/^def mark_level(hg):$/;"	f
mark_level	load_samples.py	/^from levels import mark_level$/;"	i
mark_level	parallel_sampler.py	/^from levels import mark_level$/;"	i
mark_level	simulated_sampler.py	/^from levels import mark_level$/;"	i
mark_ngrams	consensus_training.py	/^    def mark_ngrams(self, hg):$/;"	m	class:NgramCounter
match	scorer.py	/^    def match(self, rule):$/;"	m	class:Filter
match1	scorer.py	/^    def match1(self, pattern, substrs, n):$/;"	m	class:Filter
match2	scorer.py	/^    def match2(self, rule):$/;"	m	class:Filter
match_num_dict	smatch.py	/^match_num_dict={} #key: match number tuples	value: the matching number$/;"	v
match_num_dict	smatch_modified.py	/^match_num_dict={} #key: match number tuples	value: the matching number$/;"	v
match_word	amr_graph.py	/^def match_word(label, unaligned_words, lemma_map, stop_words):$/;"	f
math	decoder.py	/^import math$/;"	i
math	extractor-ghkm.py	/^import math$/;"	i
math	extractor.py	/^import time, math$/;"	i
math	lexweights.py	/^import sys, math, itertools$/;"	i
math	scorer.py	/^import time, math$/;"	i
matplotlib	draw_graphs.py	/^import matplotlib$/;"	i
matplotlib	draw_graphs.py	/^import matplotlib.pyplot as plt$/;"	i
mem_free	monitor.py	/^    def mem_free(self):$/;"	m	class:Monitor
mem_info	mymonitor.py	/^mem_info = '\/proc\/meminfo'$/;"	v
memory	HRGSample.py	/^from monitor import memory, resident$/;"	i
memory	Parallel_Sampler.py	/^from monitor import memory, resident$/;"	i
memory	add_lexweights.py	/^from monitor import memory, resident$/;"	i
memory	anneal_hrg_sampler.py	/^from monitor import memory, resident$/;"	i
memory	cut_type_top_down_sampler.py	/^from monitor import memory, resident$/;"	i
memory	dump_sample.py	/^from monitor import memory, resident$/;"	i
memory	dump_sampler.py	/^from monitor import memory, resident$/;"	i
memory	edge_type_top_down_sampler.py	/^from monitor import memory, resident$/;"	i
memory	feature.py	/^from mymonitor import human, memory$/;"	i
memory	hrg_sampler.py	/^from monitor import memory, resident$/;"	i
memory	initial_sampler.py	/^from monitor import memory, resident$/;"	i
memory	load_samples.py	/^from monitor import memory, resident$/;"	i
memory	monitor.py	/^def memory(since=0.0):$/;"	f
memory	mymonitor.py	/^def memory(since=0.0):$/;"	f
memory	parallel_sampler.py	/^from monitor import memory, resident$/;"	i
memory	python_lm.py	/^from mymonitor import human, memory$/;"	i
memory	simulated_sampler.py	/^from monitor import memory, resident$/;"	i
merge	decode.py	/^    def merge(self, item):$/;"	m	class:Item
merge	dot_chart.py	/^    def merge(self, other):$/;"	m	class:DotItem
missing_edges	amr_fragment.py	/^    def missing_edges(self):$/;"	m	class:AMRFragment
monitor	mymonitor.py	/^import monitor$/;"	i
move_gain	smatch.py	/^def move_gain(match,i,m,nm,weight_dict,match_num):$/;"	f
move_gain	smatch_modified.py	/^def move_gain(match,i,m,nm,weight_dict,match_num):$/;"	f
mydir	driver.py	/^    mydir = os.path.dirname(__main__.__file__)$/;"	v
n	hg_show.py	/^    n = int(sys.argv[4])$/;"	v
n_parallel_nodes	hrg_sampler.py	/^        n_parallel_nodes = len(FLAGS.nodes)$/;"	v
n_rule_discarded	scorer.py	/^n_rule_discarded = 0$/;"	v
neighboring_pairs	abc_parser.py	/^    def neighboring_pairs(self, item):$/;"	m	class:ABCParser
neighbors	hypergraph.py	/^    def neighbors(self, max_dist=3):$/;"	m	class:Node
new_graph_under_node	HRGSample.py	/^    def new_graph_under_node(self, curr_root, hgraph, var_mapping, nonterm_index, unvisited_nodes, ext_mapping, att_list_mapping, is_root=False):$/;"	m	class:Sample
new_set	extract_unseen.py	/^    new_set = init_set(f2)$/;"	v
new_weights	consensus_training.py	/^    def new_weights(self, weights, direction, stepsize):$/;"	m	class:ConsensusTrainer
ngram_clipped_count	consensus_training.py	/^    def ngram_clipped_count(self, n):$/;"	m	class:ConsensusTrainingCounter
ngram_cost	feature.py	/^    def ngram_cost(self, s):$/;"	m	class:LM
ngram_cost	feature.py	/^    def ngram_cost(self, s):$/;"	m	class:MockLM
ngram_count	consensus_training.py	/^    def ngram_count(self, n):$/;"	m	class:ConsensusTrainingCounter
ngrams	ngram.py	/^    def ngrams(self, s):$/;"	m	class:NgramEnumerator
nnodewithrule	phrase_forest.py	/^        nnodewithrule = 0$/;"	v
nocat	HRGRule.py	/^def nocat(s):$/;"	f
nocat	chart.py	/^from rule import is_virtual, nocat$/;"	i
nocat	decode.py	/^from rule import Rule, is_virtual, nocat$/;"	i
nocat	grammar.py	/^from rule import Rule, isvar, nocat$/;"	i
nocat	rule.py	/^def nocat(s):$/;"	f
node_edge_type	edge_type_top_down_sampler.py	/^    def node_edge_type(self, node):$/;"	m	class:Sample
node_label	amr_graph.py	/^    def node_label(self):$/;"	m	class:AMRNode
node_list	amr_fragment.py	/^    def node_list(self):$/;"	m	class:AMRFragment
node_str	amr_graph.py	/^    def node_str(self):$/;"	m	class:AMRNode
nodes	killall.py	/^            nodes = eval(line.strip().split('=')[1])$/;"	v
nodes_in_fragment_under	HRGSample.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	add_lexweights.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	cut_type_top_down_sampler.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	dump_sampler.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	edge_type_top_down_sampler.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	initial_sampler.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	parallel_sampler.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_in_fragment_under	simulated_sampler.py	/^def nodes_in_fragment_under(node):$/;"	f
nodes_turned_on_under	HRGSample.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	add_lexweights.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	cut_type_top_down_sampler.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	dump_sampler.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	edge_type_top_down_sampler.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	initial_sampler.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	parallel_sampler.py	/^def nodes_turned_on_under(node):$/;"	f
nodes_turned_on_under	simulated_sampler.py	/^def nodes_turned_on_under(node):$/;"	f
non_external_str	hgraph.py	/^    def non_external_str(self, ignore=False):$/;"	m	class:Hgraph
non_map_words	filter_rules.py	/^non_map_words = set(['was', 'were', 'am', 'is', 'are', 'be', 'a', 'an', 'the', ',', '.', '..', '...', ':', '(', ')', '@-@'])$/;"	v
non_map_words	to_lower.py	/^non_map_words = set(['was', 'were', 'am', 'is', 'are', 'be', 'a', 'an', 'the', ',', '.', '..', '...', ':', '(', ')', '@-@'])$/;"	v
nonlexical	HRGRule.py	/^    def nonlexical(self):$/;"	m	class:SHRGRule
nonlexical	rule.py	/^    def nonlexical(self):$/;"	m	class:Rule
nonlexical_rules	extractor-ghkm.py	/^    nonlexical_rules = defaultdict(int)$/;"	v
nonterminal_edges	hgraph.py	/^    def nonterminal_edges(self):$/;"	m	class:Hgraph
normalize	em_trainer.py	/^    def normalize(self):$/;"	m	class:RuleCounter
normalize	em_trainer64.py	/^    def normalize(self):$/;"	m	class:RuleCounter
normalize_vbd	em_trainer.py	/^    def normalize_vbd(self):$/;"	m	class:RuleCounter
normalize_vbd	em_trainer64.py	/^    def normalize_vbd(self):$/;"	m	class:RuleCounter
normalize_vbdp	em_trainer.py	/^    def normalize_vbdp(self, alpha, threshold):$/;"	m	class:RuleCounter
normalize_vbdp	em_trainer64.py	/^    def normalize_vbdp(self, alpha, threshold):$/;"	m	class:RuleCounter
normalize_weights	consensus_training.py	/^    def normalize_weights(self):$/;"	m	class:ConsensusTrainer
now	extractor-ghkm.py	/^now = lambda: datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S >")$/;"	v
nrules	phrase_forest.py	/^        nrules = 0$/;"	v
nsamples	HRGSample.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	HRGSample.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	add_lexweights.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	add_lexweights.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	cut_type_top_down_sampler.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	cut_type_top_down_sampler.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	dump_sampler.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	dump_sampler.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	edge_type_top_down_sampler.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	edge_type_top_down_sampler.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	initial_sampler.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	initial_sampler.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	parallel_sampler.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	parallel_sampler.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsamples	simulated_sampler.py	/^    def nsamples(self):$/;"	m	class:NPSampler
nsamples	simulated_sampler.py	/^    def nsamples(self):$/;"	m	class:NTSampler
nsuper	count_top_rule.py	/^    nsuper = 0$/;"	v
nt_escape	HRGRule.py	/^def nt_escape(sym):$/;"	f
nt_escape	rule.py	/^def nt_escape(sym):$/;"	f
ntypes	HRGSample.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	HRGSample.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	add_lexweights.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	add_lexweights.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	cut_type_top_down_sampler.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	cut_type_top_down_sampler.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	dump_sampler.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	dump_sampler.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	edge_type_top_down_sampler.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	edge_type_top_down_sampler.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	initial_sampler.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	initial_sampler.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	parallel_sampler.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	parallel_sampler.py	/^    def ntypes(self):$/;"	m	class:NTSampler
ntypes	simulated_sampler.py	/^    def ntypes(self):$/;"	m	class:NPSampler
ntypes	simulated_sampler.py	/^    def ntypes(self):$/;"	m	class:NTSampler
null	lexweights.py	/^        null = "NULL"$/;"	v
number_article	gflags.py	/^  number_article = "a"$/;"	v	class:FloatParser
number_article	gflags.py	/^  number_article = "an"$/;"	v	class:IntegerParser
number_article	gflags_python3.py	/^  number_article = "a"$/;"	v	class:FloatParser
number_article	gflags_python3.py	/^  number_article = "an"$/;"	v	class:IntegerParser
number_name	gflags.py	/^  number_name = "integer"$/;"	v	class:IntegerParser
number_name	gflags.py	/^  number_name = "number"$/;"	v	class:FloatParser
number_name	gflags_python3.py	/^  number_name = "integer"$/;"	v	class:IntegerParser
number_name	gflags_python3.py	/^  number_name = "number"$/;"	v	class:FloatParser
numpy	draw_graphs.py	/^import numpy$/;"	i
ok	cut_type_top_down_sampler.py	/^    def ok(self, node):$/;"	m	class:ConflictTester
ok	dump_sampler.py	/^    def ok(self, node):$/;"	m	class:ConflictTester
ok	edge_type_top_down_sampler.py	/^    def ok(self, node):$/;"	m	class:ConflictTester
ok	initial_sampler.py	/^    def ok(self, node):$/;"	m	class:ConflictTester
ok	parallel_sampler.py	/^    def ok(self, node):$/;"	m	class:ConflictTester
ok	simulated_sampler.py	/^    def ok(self, node):$/;"	m	class:ConflictTester
oldrule	sort_trees.py	/^                    oldrule = rules.get(rule)$/;"	v
optimize	consensus_training.py	/^    def optimize(self):$/;"	m	class:ConsensusTrainer
optparse	composed_rule_extractor.py	/^import optparse$/;"	i
optparse	em_trainer.py	/^    import optparse$/;"	i
optparse	em_trainer64.py	/^    import optparse$/;"	i
optparse	lexweights.py	/^    import optparse$/;"	i
optparse	smatch-table.py	/^      import optparse$/;"	i
optparse	smatch.py	/^      import optparse$/;"	i
optparse	smatch_modified.py	/^      import optparse$/;"	i
optparser	em_trainer.py	/^    optparser = optparse.OptionParser()$/;"	v	class:EMTrainer
optparser	em_trainer64.py	/^    optparser = optparse.OptionParser()$/;"	v	class:EMTrainer
optparser	lexweights.py	/^    optparser = optparse.OptionParser()$/;"	v
order	python_lm.py	/^    order = 3$/;"	v	class:LanguageModel
orig_file	non_lexed_weight.py	/^    orig_file = sys.argv[1]$/;"	v
orig_str	extract_alignment.py	/^def orig_str(new_toks):$/;"	f
os	Parallel_Sampler.py	/^import os$/;"	i
os	add_lexweights.py	/^import os$/;"	i
os	anneal_hrg_sampler.py	/^import os$/;"	i
os	concept_init.py	/^import os$/;"	i
os	consensus_training.py	/^import os$/;"	i
os	corpus_server.py	/^import os$/;"	i
os	cut_type_top_down_sampler.py	/^import os$/;"	i
os	data_divider.py	/^import os$/;"	i
os	decoder.py	/^import os$/;"	i
os	driver.py	/^import os$/;"	i
os	dump_sample.py	/^import os$/;"	i
os	dump_sampler.py	/^import os$/;"	i
os	edge_type_top_down_sampler.py	/^import os$/;"	i
os	em_trainer.py	/^import os$/;"	i
os	em_trainer64.py	/^import os$/;"	i
os	extract_alignment.py	/^import os$/;"	i
os	extract_cycles.py	/^import os$/;"	i
os	extractor-ghkm.py	/^import os$/;"	i
os	extractor.py	/^import sys, os, os.path$/;"	i
os	forest_prev.py	/^import os$/;"	i
os	fragment_forest.py	/^import os$/;"	i
os	fragment_hypergraph.py	/^import os$/;"	i
os	gflags.py	/^import os$/;"	i
os	gflags_python3.py	/^import os$/;"	i
os	grammar.py	/^import os$/;"	i
os	hrg_sampler.py	/^import os$/;"	i
os	hypergraph.py	/^import os$/;"	i
os	init_unaligned_gram.py	/^import os$/;"	i
os	initial_sampler.py	/^import os$/;"	i
os	job_logger.py	/^import os$/;"	i
os	load_samples.py	/^import os$/;"	i
os	monitor.py	/^import os$/;"	i
os	mymonitor.py	/^import sys, os, gc$/;"	i
os	parallel_sampler.py	/^import os$/;"	i
os	phrase_forest.py	/^import os$/;"	i
os	phrase_hypergraph.py	/^import os$/;"	i
os	read_amr.py	/^import os$/;"	i
os	read_amr_aligner.py	/^import os$/;"	i
os	references.py	/^import os$/;"	i
os	rule.py	/^import os$/;"	i
os	rule_dumper.py	/^import os$/;"	i
os	scorer.py	/^import sys, os, os.path$/;"	i
os	simulated_sampler.py	/^import os$/;"	i
os	smatch-table.py	/^import os$/;"	i
os	smatch.py	/^import os$/;"	i
os	smatch_modified.py	/^import os$/;"	i
out_amr	amr.py	/^  def out_amr(self):$/;"	m	class:AMR
out_amr	amr_old.py	/^  def out_amr(self):$/;"	m	class:AMR
out_amr	amr_without_alignment.py	/^  def out_amr(self):$/;"	m	class:AMR
out_edges	hgraph.py	/^    def out_edges(self, node, nodelabels = False):$/;"	m	class:Hgraph
out_of_range	consensus_training.py	/^    def out_of_range(self, weights):$/;"	m	class:ConsensusTrainer
output_all_unaligned_edges	forest_prev.py	/^def output_all_unaligned_edges(edge_alignment, amr_graph):$/;"	f
output_all_unaligned_nodes	forest_prev.py	/^def output_all_unaligned_nodes(edge_alignment, amr_graph):$/;"	f
output_file	scorer.py	/^output_file = None$/;"	v
output_name	len_filter.py	/^def output_name(filename, n):$/;"	f
outside	hypergraph.py	/^    def outside(self):$/;"	m	class:Hypergraph
outside_exp	hypergraph.py	/^    def outside_exp(self):$/;"	m	class:Hypergraph
p	extractor-ghkm.py	/^    p = subprocess.Popen(str_cmd, shell=True, stdout=subprocess.PIPE)$/;"	v
p	lexweights.py	/^            p = float(c2)\/count$/;"	v
p1	lexweights.py	/^            p1 = float(c12)\/c1$/;"	v
p2	lexweights.py	/^            p2 = float(c2-c12)\/(count-c1)$/;"	v
parallel_forest_construct	forest_prev.py	/^def parallel_forest_construct(argv):$/;"	f
parallel_forest_construct	fragment_forest.py	/^def parallel_forest_construct(argv):$/;"	f
parent_symbol	Parallel_Sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	add_lexweights.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	anneal_hrg_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	cut_type_top_down_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	dump_sample.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	dump_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	edge_type_top_down_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	hrg_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	initial_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	load_samples.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	parallel_sampler.py	/^def parent_symbol(nt):$/;"	f
parent_symbol	simulated_sampler.py	/^def parent_symbol(nt):$/;"	f
parse	abc_parser.py	/^    def parse(self):$/;"	m	class:ABCParser
parse_AMR_line	amr.py	/^  def parse_AMR_line(line):$/;"	m	class:AMR
parse_AMR_line	amr_old.py	/^  def parse_AMR_line(line):$/;"	m	class:AMR
parse_AMR_line	amr_without_alignment.py	/^  def parse_AMR_line(line):$/;"	m	class:AMR
parse_agenda	abc_parser.py	/^    def parse_agenda(self):$/;"	m	class:ABCParser
parse_flags	common.py	/^def parse_flags():$/;"	f
parse_proc_stat	monitor.py	/^    def parse_proc_stat(self):$/;"	m	class:Monitor
parse_weight_ranges	features.py	/^    def parse_weight_ranges(self, weight_range_str):$/;"	m	class:Features
parser	smatch-table.py	/^      parser=build_arg_parser()$/;"	v
parser	smatch-table.py	/^      parser=build_arg_parser2();$/;"	v
parser	smatch-table.py	/^   parser=None$/;"	v
parser	smatch.py	/^      parser=build_arg_parser()$/;"	v
parser	smatch.py	/^      parser=build_arg_parser2();$/;"	v
parser	smatch.py	/^   parser=None$/;"	v
parser	smatch_modified.py	/^      parser=build_arg_parser()$/;"	v
parser	smatch_modified.py	/^      parser=build_arg_parser2();$/;"	v
parser	smatch_modified.py	/^   parser=None$/;"	v
path	extractor.py	/^import sys, os, os.path$/;"	i
path	scorer.py	/^import sys, os, os.path$/;"	i
pattern	translation_job.py	/^pattern = re.compile(r'(\\$number|\\$date)\\s*\\{\\s*(.*?)\\s*\\}')$/;"	v
pcounter	composed_rule_extractor.py	/^    pcounter = PercentCounter(total=len(argv), file=sys.stderr)$/;"	v	class:ComposedRuleExtractor
pcounter	count_top_rule.py	/^    pcounter = PercentCounter(total=len(filenames), file=sys.stderr)$/;"	v
pcounter	sort_trees.py	/^    pcounter = PercentCounter(total=len(filenames), file=sys.stderr)$/;"	v
pdb	scorer.py	/^import pdb$/;"	i
persentence	grammar.py	/^    def persentence(self):$/;"	m	class:SCFG
person_dict_file	extract_alignment.py	/^    person_dict_file = sys.argv[5]$/;"	v
pgv	hgraph.py	/^    import pygraphviz as pgv$/;"	i
phrase_decomposition_forest	add_lexweights.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
phrase_decomposition_forest	cut_type_top_down_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
phrase_decomposition_forest	dump_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
phrase_decomposition_forest	edge_type_top_down_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
phrase_decomposition_forest	initial_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
phrase_decomposition_forest	parallel_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
phrase_decomposition_forest	phrase_forest.py	/^def phrase_decomposition_forest(align):$/;"	f
phrase_decomposition_forest	simulated_sampler.py	/^from phrase_forest import make_rule, phrase_decomposition_forest$/;"	i
pickle	Parallel_Sampler.py	/^import pickle$/;"	i
pickle	add_lexweights.py	/^import pickle$/;"	i
pickle	anneal_hrg_sampler.py	/^import pickle$/;"	i
pickle	concept_init.py	/^import pickle$/;"	i
pickle	cut_type_top_down_sampler.py	/^import pickle$/;"	i
pickle	dump_sample.py	/^import pickle$/;"	i
pickle	dump_sampler.py	/^import pickle$/;"	i
pickle	edge_type_top_down_sampler.py	/^import pickle$/;"	i
pickle	extract_alignment.py	/^import pickle$/;"	i
pickle	extract_cycles.py	/^import pickle$/;"	i
pickle	forest_prev.py	/^import pickle$/;"	i
pickle	fragment_forest.py	/^import pickle$/;"	i
pickle	hrg_sampler.py	/^import pickle$/;"	i
pickle	init_unaligned_gram.py	/^import pickle$/;"	i
pickle	initial_sampler.py	/^import pickle$/;"	i
pickle	load_samples.py	/^import pickle$/;"	i
pickle	parallel_sampler.py	/^import pickle$/;"	i
pickle	phrase_forest.py	/^import pickle$/;"	i
pickle	simulated_sampler.py	/^import pickle$/;"	i
pitman_yor_posterior_rule_size	HRGSample.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	add_lexweights.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	cut_type_top_down_sampler.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	dump_sampler.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	edge_type_top_down_sampler.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	initial_sampler.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	parallel_sampler.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
pitman_yor_posterior_rule_size	simulated_sampler.py	/^    def pitman_yor_posterior_rule_size(self, x):$/;"	m	class:NPSampler
plot_comparison_likelihood	draw_graphs.py	/^def plot_comparison_likelihood(diff_likelihoods, labels, file, title):$/;"	f
plot_graph	draw_graphs.py	/^def plot_graph(points):$/;"	f
plot_likelihood	draw_graphs.py	/^def plot_likelihood(likelihoods, file, title):$/;"	f
plot_points	draw_graphs.py	/^def plot_points(trn_points, dev_points, file):$/;"	f
plt	draw_graphs.py	/^import matplotlib.pyplot as plt$/;"	i
poisson	HRGSample.py	/^def poisson(rule):$/;"	f
poisson	add_lexweights.py	/^def poisson(rule):$/;"	f
poisson	cut_type_top_down_sampler.py	/^def poisson(rule):$/;"	f
poisson	dump_sampler.py	/^def poisson(rule):$/;"	f
poisson	edge_type_top_down_sampler.py	/^def poisson(rule):$/;"	f
poisson	initial_sampler.py	/^def poisson(rule):$/;"	f
poisson	parallel_sampler.py	/^def poisson(rule):$/;"	f
poisson	simulated_sampler.py	/^def poisson(rule):$/;"	f
pop	decode.py	/^    def pop(self):$/;"	m	class:Agenda
port	hrg_sampler.py	/^            port = FLAGS.port$/;"	v
port	hrg_sampler.py	/^        port = FLAGS.port$/;"	v
posterior	HRGSample.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	HRGSample.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	add_lexweights.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	add_lexweights.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	cut_type_top_down_sampler.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	cut_type_top_down_sampler.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	dump_sampler.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	dump_sampler.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	edge_type_top_down_sampler.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	edge_type_top_down_sampler.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	hypergraph.py	/^    def posterior(self):$/;"	m	class:Edge
posterior	initial_sampler.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	initial_sampler.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	parallel_sampler.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	parallel_sampler.py	/^    def posterior(self, x):$/;"	m	class:Sampler
posterior	simulated_sampler.py	/^    def posterior(self, x):$/;"	m	class:NTSampler
posterior	simulated_sampler.py	/^    def posterior(self, x):$/;"	m	class:Sampler
pprint_table	smatch-table.py	/^def pprint_table(table):$/;"	f
pr_flag	smatch.py	/^pr_flag=False #global variable, output precision and recall$/;"	v
pr_flag	smatch_modified.py	/^pr_flag=True #global variable, output precision and recall$/;"	v
prefix_labels	extractor.py	/^prefix_labels = set()$/;"	v
preprocess	translation_job.py	/^def preprocess(line):$/;"	f
print_alignment	smatch.py	/^def print_alignment(match,test_instance,gold_instance,flip=False):$/;"	f
print_alignment	smatch_modified.py	/^def print_alignment(match,test_instance,gold_instance,flip=False):$/;"	f
print_amr_error	hgraph.py	/^def print_amr_error(amr_str, warn=sys.stderr):$/;"	f
print_function	Parallel_Sampler.py	/^from __future__ import print_function$/;"	i
print_function	add_lexweights.py	/^from __future__ import print_function$/;"	i
print_function	anneal_hrg_sampler.py	/^from __future__ import print_function$/;"	i
print_function	cut_type_top_down_sampler.py	/^from __future__ import print_function$/;"	i
print_function	dump_sample.py	/^from __future__ import print_function$/;"	i
print_function	dump_sampler.py	/^from __future__ import print_function$/;"	i
print_function	edge_type_top_down_sampler.py	/^from __future__ import print_function$/;"	i
print_function	hrg_sampler.py	/^from __future__ import print_function$/;"	i
print_function	initial_sampler.py	/^from __future__ import print_function$/;"	i
print_function	load_samples.py	/^from __future__ import print_function$/;"	i
print_function	parallel_sampler.py	/^from __future__ import print_function$/;"	i
print_function	python_lm.py	/^from __future__ import print_function$/;"	i
print_function	simulated_sampler.py	/^from __future__ import print_function$/;"	i
print_help	smatch-table.py	/^def print_help():$/;"	f
print_info	amr_graph.py	/^    def print_info(self):$/;"	m	class:AMRGraph
print_percent	percent_counter.py	/^    def print_percent(self, i):$/;"	m	class:PercentCounter
print_site	cut_type_top_down_sampler.py	/^def print_site(sample, node, r1, r2, r3):$/;"	f
print_site	dump_sampler.py	/^def print_site(sample, node, r1, r2, r3):$/;"	f
print_site	edge_type_top_down_sampler.py	/^def print_site(sample, node, r1, r2, r3):$/;"	f
print_site	initial_sampler.py	/^def print_site(sample, node, r1, r2, r3):$/;"	f
print_site	parallel_sampler.py	/^def print_site(sample, node, r1, r2, r3):$/;"	f
print_site	simulated_sampler.py	/^def print_site(sample, node, r1, r2, r3):$/;"	f
print_variables	amr_graph.py	/^    def print_variables(self):$/;"	m	class:AMRGraph
probe	monitor.py	/^    def probe(self, cpu_reserve, mem_reserve):$/;"	m	class:Monitor
proc_status	mymonitor.py	/^proc_status = '\/proc\/%d\/status' % os.getpid()$/;"	v
process_rule	extractor-ghkm.py	/^def process_rule(str_rule):$/;"	f
profile	extractor.py	/^profile = False$/;"	v
profile	scorer.py	/^profile = False$/;"	v
progress	lexweights.py	/^    progress = 0$/;"	v
prune	chart.py	/^    def prune(self):$/;"	m	class:Bin
prune	grammar.py	/^    def prune(self):$/;"	m	class:RuleBin
psyco	extractor.py	/^        import psyco$/;"	i
psyco	lexweights.py	/^        import psyco$/;"	i
psyco	scorer.py	/^        import psyco$/;"	i
pure_edge_rep	gene_glue.py	/^def pure_edge_rep(ntype, suffix):$/;"	f
push	decode.py	/^    def push(self, item):$/;"	m	class:Agenda
random	HRGSample.py	/^import random$/;"	i
random	Parallel_Sampler.py	/^import random$/;"	i
random	add_lexweights.py	/^import random$/;"	i
random	anneal_hrg_sampler.py	/^import random$/;"	i
random	cut_type_top_down_sampler.py	/^import random$/;"	i
random	dump_sample.py	/^import random$/;"	i
random	dump_sampler.py	/^import random$/;"	i
random	edge_type_top_down_sampler.py	/^import random$/;"	i
random	hrg_sampler.py	/^import random$/;"	i
random	initial_sampler.py	/^import random$/;"	i
random	load_samples.py	/^import random$/;"	i
random	parallel_sampler.py	/^import random$/;"	i
random	read_amr.py	/^import random$/;"	i
random	read_amr_aligner.py	/^import random$/;"	i
random	simulated_sampler.py	/^import random$/;"	i
random	smatch-table.py	/^import random$/;"	i
random	smatch.py	/^import random$/;"	i
random	smatch_modified.py	/^import random$/;"	i
rank_cost	HRGRule.py	/^    def rank_cost(self):$/;"	m	class:SHRGRule
rank_cost	decode.py	/^    def rank_cost(self):$/;"	m	class:Item
rank_cost	rule.py	/^    def rank_cost(self):$/;"	m	class:Rule
ratiofile	lexweights.py	/^        ratiofile = open(opts.ratiofile, "w")$/;"	v
re	alignment.py	/^import re$/;"	i
re	extract_alignment.py	/^import re$/;"	i
re	extractor-ghkm.py	/^import re$/;"	i
re	gflags.py	/^import re$/;"	i
re	gflags_python3.py	/^import re$/;"	i
re	hgraph.py	/^import re$/;"	i
re	python_lm.py	/^import re$/;"	i
re	rule.py	/^import re$/;"	i
re	scorer.py	/^import re$/;"	i
re	translation_job.py	/^import re$/;"	i
re_alignment	extractor-ghkm.py	/^re_alignment = re.compile('"E_(\\S+)"\\-"C_(\\S+)"')$/;"	v
re_leaves	extractor-ghkm.py	/^re_leaves = re.compile("x\\d+:[^\\)\\s]+|\\"E_\\S+\\"")$/;"	v
re_nonterminal	extractor-ghkm.py	/^re_nonterminal = re.compile("x(\\d+):(\\S+)")$/;"	v
re_rule	extractor-ghkm.py	/^re_rule = re.compile("^(\\S+)(\\(.+) -> (.+) \\|\\|\\|(.+)$")$/;"	v
reach	hgraph.py	/^    def reach(self, node):$/;"	m	class:Hgraph
readLM	srilm.py	/^def readLM(*args):$/;"	f
readLM	srilm.py	/^readLM = _srilm.readLM$/;"	v
readPOSs	extract_alignment.py	/^from pos_processor import readPOSs$/;"	i
readPOSs	lemmatize_snts.py	/^from pos_processor import readPOSs$/;"	i
readPOSs	pos_processor.py	/^def readPOSs(pos_file):$/;"	f
read_lexical_weighting_file	extractor-ghkm.py	/^def read_lexical_weighting_file(file_name, dict_lexical_weighting):$/;"	f
read_rule_blocks	scorer.py	/^def read_rule_blocks(files):$/;"	f
read_rules	scorer.py	/^def read_rules(files):$/;"	f
read_tree_file	composed_rule_extractor.py	/^    def read_tree_file(self, treefile):$/;"	m	class:ComposedRuleExtractor
read_weightfile	lexical_weighter.py	/^def read_weightfile(f, threshold=None):$/;"	f
reader	alignment.py	/^    def reader(file, transpose=False):$/;"	m	class:Alignment
reader	alignment.py	/^    reader = staticmethod(reader)$/;"	v	class:Alignment
reader_pharaoh	alignment.py	/^    def reader_pharaoh(ffile, efile, afile):$/;"	m	class:Alignment
reader_pharaoh	alignment.py	/^    reader_pharaoh = staticmethod(reader_pharaoh)$/;"	v	class:Alignment
rec_step	hgraph.py	/^        def rec_step(node, depth):$/;"	f	function:Hgraph.concept_dfs
rec_step	hgraph.py	/^        def rec_step(node, depth):$/;"	f	function:Hgraph.dfs
rec_step	hgraph.py	/^        def rec_step(node, depth):$/;"	f	function:Hgraph.graph_yield
recall_unaligned_concepts	amr_graph.py	/^    def recall_unaligned_concepts(self, edge_alignment, unaligned_toks, lemma_map, stop_words, refine=False):$/;"	m	class:AMRGraph
reform_edge	amr_util.py	/^def reform_edge(s):$/;"	f
reform_edge	rule.py	/^def reform_edge(s):$/;"	f
remove	cut_type_top_down_sampler.py	/^    def remove(self, key, sample, node):$/;"	m	class:TypeIndexer
remove	dump_sampler.py	/^    def remove(self, rule, sample, node):$/;"	m	class:CutTypeIndex
remove	edge_type_top_down_sampler.py	/^    def remove(self, key, sample, node):$/;"	m	class:TypeIndexer
remove	hgraph.py	/^    def remove(self, k, v):$/;"	m	class:ListMap
remove	initial_sampler.py	/^    def remove(self, rule, sample, node):$/;"	m	class:CutTypeIndex
remove	parallel_sampler.py	/^    def remove(self, key, sample, node):$/;"	m	class:TypeIndexer
remove	simulated_sampler.py	/^    def remove(self, key, sample, node):$/;"	m	class:TypeIndexer
remove_fragment	hgraph.py	/^    def remove_fragment(self, dag):$/;"	m	class:Hgraph
remove_nonterminal_index	extractor-ghkm.py	/^def remove_nonterminal_index(trg):$/;"	f
remove_overlaps	extractor.py	/^def remove_overlaps(self, phrases):$/;"	f
remove_prefix	extractor-ghkm.py	/^remove_prefix = lambda w, prefix: w[3:-1] if w.startswith(prefix) else w$/;"	v
remove_req	extractor.py	/^def remove_req(node):$/;"	f
remove_unaligned	alignment.py	/^    def remove_unaligned(self):$/;"	m	class:Alignment
remove_unaligned_words	alignment.py	/^    def remove_unaligned_words(self, phrase_nodes):$/;"	m	class:Alignment
remove_uncovered_words	alignment.py	/^    def remove_uncovered_words(self, phrases):$/;"	m	class:Alignment
rename_node	amr.py	/^  def rename_node(self,prefix):$/;"	m	class:AMR
rename_node	amr_old.py	/^  def rename_node(self,prefix):$/;"	m	class:AMR
rename_node	amr_without_alignment.py	/^  def rename_node(self,prefix):$/;"	m	class:AMR
render	hgraph.py	/^    def render(self, instances = True):$/;"	m	class:Hgraph
render_to_file	hgraph.py	/^    def render_to_file(self, file_or_name, instances = True, *args, **kwargs):$/;"	m	class:Hgraph
replace	hgraph.py	/^    def replace(self, k, v):$/;"	m	class:ListMap
replace_fragment	hgraph.py	/^    def replace_fragment(self, dag, new_dag, partial_boundary_map = {}, warn=False):$/;"	m	class:Hgraph
replace_nonterminals	composed_rule_extractor.py	/^    def replace_nonterminals(self):$/;"	m	class:ComposedRuleExtractor
replace_wordseq_part	extract_alignment.py	/^def replace_wordseq_part(line, new_seq):$/;"	f
require_graphics	hgraph.py	/^def require_graphics():$/;"	f
reset	grammar.py	/^    def reset(self):$/;"	m	class:Grammar
resident	HRGSample.py	/^from monitor import memory, resident$/;"	i
resident	Parallel_Sampler.py	/^from monitor import memory, resident$/;"	i
resident	add_lexweights.py	/^from monitor import memory, resident$/;"	i
resident	anneal_hrg_sampler.py	/^from monitor import memory, resident$/;"	i
resident	cut_type_top_down_sampler.py	/^from monitor import memory, resident$/;"	i
resident	dump_sample.py	/^from monitor import memory, resident$/;"	i
resident	dump_sampler.py	/^from monitor import memory, resident$/;"	i
resident	edge_type_top_down_sampler.py	/^from monitor import memory, resident$/;"	i
resident	hrg_sampler.py	/^from monitor import memory, resident$/;"	i
resident	initial_sampler.py	/^from monitor import memory, resident$/;"	i
resident	load_samples.py	/^from monitor import memory, resident$/;"	i
resident	monitor.py	/^def resident(since=0.0):$/;"	f
resident	parallel_sampler.py	/^from monitor import memory, resident$/;"	i
resident	simulated_sampler.py	/^from monitor import memory, resident$/;"	i
retrieve_NN	extract_alignment.py	/^def retrieve_NN(word, der_lemma_map, lemma_to_rules, train_dict):$/;"	f
retrieve_NNS	extract_alignment.py	/^def retrieve_NNS(word, infl_lemma_map, der_lemma_map, lemma_to_rules, train_dict):$/;"	f
retrieve_edges	amr_util.py	/^def retrieve_edges($/;"	f
retrieve_edges	extract_alignment.py	/^from rule import retrieve_edges$/;"	i
retrieve_edges	filter_rules.py	/^from rule import retrieve_edges$/;"	i
retrieve_edges	rule.py	/^def retrieve_edges(rule_str):$/;"	f
retrieve_edges	to_lower.py	/^from rule import retrieve_edges$/;"	i
retrieve_first_concept	amr_graph.py	/^    def retrieve_first_concept(self, i_path):$/;"	m	class:AMRGraph
retrieve_fragment	amr_graph.py	/^    def retrieve_fragment(self, integer_reps):$/;"	m	class:AMRGraph
retrieve_one_concept	amr_graph.py	/^    def retrieve_one_concept(self, child_num, par_node_index):$/;"	m	class:AMRGraph
retrieve_one_hrg_rule	HRGSample.py	/^    def retrieve_one_hrg_rule(self, curr_node, children, ext_list):$/;"	m	class:Sample
retrieve_sub_graph	amr_fragment.py	/^    def retrieve_sub_graph(self):$/;"	m	class:AMRFragment
reverse_topo_order	hypergraph.py	/^    def reverse_topo_order(self):$/;"	m	class:Hypergraph
reversed	extract_alignment.py	/^def reversed(tmp_entities, start, end, toks):$/;"	f
rewrite	HRGRule.py	/^    def rewrite(self, vars):$/;"	m	class:SHRGRule
rewrite	rule.py	/^    def rewrite(self, vars):$/;"	m	class:Rule
rfile	add_lexweights.py	/^    rfile = open(rfilename)$/;"	v	class:Sample
rfilename	add_lexweights.py	/^    rfilename = argv[4]$/;"	v	class:Sample
rightneighbors	chart.py	/^    def rightneighbors(self, item):$/;"	m	class:Chart
rule	count_top_rule.py	/^        rule = Rule()$/;"	v
rule	extractor-ghkm.py	/^        rule = p.stdout.readline()$/;"	v
rule	extractor-ghkm.py	/^        rule = rule.decode("utf-8")$/;"	v
rule	sort_trees.py	/^                rule = Rule()$/;"	v
rule_dumper	composed_rule_extractor.py	/^    rule_dumper = RuleDumper(FLAGS.outputdir, 1000000)$/;"	v	class:ComposedRuleExtractor
rule_dumper	phrase_forest.py	/^    rule_dumper = RuleDumper()$/;"	v
rule_dumper	rule_dumper.py	/^    rule_dumper = RuleDumper()$/;"	v	class:RuleDumper
rule_extraction_flags	extractor.py	/^import rule_extraction_flags$/;"	i
rule_extraction_flags	phrase_forest.py	/^import rule_extraction_flags$/;"	i
rule_extraction_flags	rule_filter.py	/^import rule_extraction_flags$/;"	i
rule_f	forest_prev.py	/^rule_f = open('train_rules.gr', 'w')$/;"	v
rule_f	fragment_forest.py	/^rule_f = open('train_rules.gr', 'w')$/;"	v
rule_f	rule.py	/^rule_f = open(os.path.join(os.getcwd(), 'hrg_error.log'), 'a')$/;"	v
rule_filter	composed_rule_extractor.py	/^import rule_filter$/;"	i
rule_filter	fragment_hypergraph.py	/^import rule_filter$/;"	i
rule_filter	phrase_forest.py	/^import rule_filter$/;"	i
rule_filter	phrase_hypergraph.py	/^import rule_filter$/;"	i
rule_heuristic	swig_lm.py	/^    def rule_heuristic(self, ruleitem):$/;"	m	class:LanguageModel
rule_size	HRGSample.py	/^def rule_size(rule):$/;"	f
rule_size	add_lexweights.py	/^def rule_size(rule):$/;"	f
rule_size	cut_type_top_down_sampler.py	/^def rule_size(rule):$/;"	f
rule_size	dump_sampler.py	/^def rule_size(rule):$/;"	f
rule_size	edge_type_top_down_sampler.py	/^def rule_size(rule):$/;"	f
rule_size	initial_sampler.py	/^def rule_size(rule):$/;"	f
rule_size	parallel_sampler.py	/^def rule_size(rule):$/;"	f
rule_size	simulated_sampler.py	/^def rule_size(rule):$/;"	f
rule_size_likelihood	HRGSample.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	add_lexweights.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	cut_type_top_down_sampler.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	dump_sampler.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	edge_type_top_down_sampler.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	initial_sampler.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	parallel_sampler.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_likelihood	simulated_sampler.py	/^    def rule_size_likelihood(self):$/;"	m	class:NPSampler
rule_size_prob	HRGSample.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	add_lexweights.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	cut_type_top_down_sampler.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	dump_sampler.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	edge_type_top_down_sampler.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	initial_sampler.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	parallel_sampler.py	/^rule_size_prob = poisson$/;"	v
rule_size_prob	simulated_sampler.py	/^rule_size_prob = poisson$/;"	v
rules	phrase_forest.py	/^        rules = []$/;"	v
rules	sort_trees.py	/^    rules = {}$/;"	v
run	corpus_server.py	/^    def run(self):$/;"	m	class:CorpusServer
run	scorer.py	/^    def run(self):$/;"	m	class:Tabulator
run	translation_job.py	/^    def run(self):$/;"	m	class:TranslationJob
s	hrg_sampler.py	/^            s = socket.socket()$/;"	v
same_seq	extract_alignment.py	/^def same_seq(seq1, seq2):$/;"	f
sample	HRGSample.py	/^    def sample(self):$/;"	m	class:Sample
sample	cut_type_top_down_sampler.py	/^    def sample(self):$/;"	m	class:Sample
sample	dump_sampler.py	/^    def sample(self):$/;"	m	class:Sample
sample	edge_type_top_down_sampler.py	/^    def sample(self):$/;"	m	class:Sample
sample	initial_sampler.py	/^    def sample(self):$/;"	m	class:Sample
sample	parallel_sampler.py	/^    def sample(self):$/;"	m	class:Sample
sample	simulated_sampler.py	/^    def sample(self):$/;"	m	class:Sample
sample_cut	HRGSample.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_cut	cut_type_top_down_sampler.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_cut	dump_sampler.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_cut	edge_type_top_down_sampler.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_cut	initial_sampler.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_cut	parallel_sampler.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_cut	simulated_sampler.py	/^    def sample_cut(self, node, parent):$/;"	m	class:Sample
sample_edge	HRGSample.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_edge	cut_type_top_down_sampler.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_edge	dump_sampler.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_edge	edge_type_top_down_sampler.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_edge	initial_sampler.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_edge	parallel_sampler.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_edge	simulated_sampler.py	/^    def sample_edge(self, node, parent):$/;"	m	class:Sample
sample_file	dump_sample.py	/^        sample_file = os.path.join(FLAGS.data, 'sample_%s' % id)$/;"	v
sample_file	hrg_sampler.py	/^            sample_file = os.path.join(FLAGS.data, 'sample_%s' % id)$/;"	v
sample_file	hrg_sampler.py	/^        sample_file = os.path.join(FLAGS.data, 'sample_%d' % FLAGS.currid)$/;"	v
sample_nt	cut_type_top_down_sampler.py	/^    def sample_nt(self, node, parent):$/;"	m	class:Sample
sample_nt	dump_sampler.py	/^    def sample_nt(self, node, parent):$/;"	m	class:Sample
sample_nt	edge_type_top_down_sampler.py	/^    def sample_nt(self, node, parent):$/;"	m	class:Sample
sample_nt	initial_sampler.py	/^    def sample_nt(self, node, parent):$/;"	m	class:Sample
sample_nt	parallel_sampler.py	/^    def sample_nt(self, node, parent):$/;"	m	class:Sample
sample_nt	simulated_sampler.py	/^    def sample_nt(self, node, parent):$/;"	m	class:Sample
samples	Parallel_Sampler.py	/^    samples = []$/;"	v
samples	anneal_hrg_sampler.py	/^    samples = cPickle.load(f)$/;"	v
samples	cut_type_top_down_sampler.py	/^    samples = []$/;"	v	class:Sample
samples	dump_sample.py	/^        samples = []$/;"	v
samples	dump_sampler.py	/^    samples = []$/;"	v	class:Sample
samples	edge_type_top_down_sampler.py	/^    samples = []$/;"	v	class:Sample
samples	hrg_sampler.py	/^            samples = cPickle.load(f)$/;"	v
samples	hrg_sampler.py	/^        samples = cPickle.load(f) #Load a subset of the whole data$/;"	v
samples	initial_sampler.py	/^    samples = []$/;"	v	class:Sample
samples	load_samples.py	/^    samples = []$/;"	v
samples	simulated_sampler.py	/^    samples = []$/;"	v	class:Sample
sanity_check	hypergraph.py	/^    def sanity_check(self):$/;"	m	class:Hypergraph
scale	mymonitor.py	/^scale = {'B': 1.0,$/;"	v
scan	dot_chart.py	/^    def scan(self, i, j):$/;"	m	class:DotChart
scope	HRGRule.py	/^    def scope(self):$/;"	m	class:SHRGRule
scope	extractor-ghkm.py	/^def scope(src_side):$/;"	f
scope	rule.py	/^    def scope(self):$/;"	m	class:Rule
score1	draw_graphs.py	/^        score1 = float(line1)$/;"	v
score2	draw_graphs.py	/^        score2 = float(line2)$/;"	v
score_rule	features.py	/^    def score_rule(self, rule):$/;"	m	class:Features
score_rule	lexical_weighter.py	/^    def score_rule(self, a, r):$/;"	m	class:LexicalWeighter
score_rule_fake	features.py	/^    def score_rule_fake(self, rule):$/;"	m	class:Features
scorer	driver.py	/^import scorer$/;"	i
select	common.py	/^def select(l):$/;"	f
select	extractor.py	/^from common import timed, select$/;"	i
select	phrase_forest.py	/^from common import timed, select$/;"	i
sent_no_file	dump_sample.py	/^        sent_no_file = os.path.join(FLAGS.data, 'used_sent_%s' % id)$/;"	v
sent_nos	dump_sample.py	/^        sent_nos = cPickle.load(f)$/;"	v
sent_smatch	smatch_modified.py	/^def sent_smatch(cur_amr1, cur_amr2, sent_num):$/;"	f
sentence_file	concept_init.py	/^    sentence_file = sys.argv[2]$/;"	v
sentence_file	extract_alignment.py	/^    sentence_file = sys.argv[2]$/;"	v
sentence_file	forest_prev.py	/^    sentence_file = sys.argv[2]$/;"	v
sentence_file	fragment_forest.py	/^    sentence_file = sys.argv[2]$/;"	v
serialize	decode.py	/^    def serialize(self):$/;"	m	class:Deduction
serialize	fragment_hypergraph.py	/^    def serialize(self):$/;"	m	class:FragmentHGEdge
serialize	hypergraph.py	/^    def serialize(self):$/;"	m	class:Edge
serialize	hypergraph.py	/^    def serialize(self):$/;"	m	class:Node
serialize	hypergraph.py	/^    def serialize(self, filename):$/;"	m	class:Hypergraph
serialize	phrase_hypergraph.py	/^    def serialize(self):$/;"	m	class:PhraseHGEdge
serve	corpus_server.py	/^    def serve(self):$/;"	m	class:CorpusServer
server	hrg_sampler.py	/^        server = socket.socket()$/;"	v
setUp	hypergraph_test.py	/^    def setUp(self):$/;"	m	class:InsideOutsideTest
set_const_edge	amr_graph.py	/^    def set_const_edge(self, edge):$/;"	m	class:AMRNode
set_coref	amr_graph.py	/^    def set_coref(self, val):$/;"	m	class:AMREdge
set_edge	amr_fragment.py	/^    def set_edge(self, edge_num):$/;"	m	class:AMRFragment
set_edges	amr_fragment.py	/^    def set_edges(self, edges):$/;"	m	class:AMRFragment
set_ext_set	amr_fragment.py	/^    def set_ext_set(self, ext_set):$/;"	m	class:AMRFragment
set_functions	hypergraph.py	/^    def set_functions(self, w, f, g):$/;"	m	class:Hypergraph
set_lhs	extractor-ghkm.py	/^    set_lhs = set()$/;"	v
set_node	amr_fragment.py	/^    def set_node(self, node_num):$/;"	m	class:AMRFragment
set_nodes	amr_fragment.py	/^    def set_nodes(self, nodes):$/;"	m	class:AMRFragment
set_nosample	fragment_hypergraph.py	/^    def set_nosample(self, _nosample=True):$/;"	m	class:FragmentHGNode
set_parents_under	HRGSample.py	/^def set_parents_under(node):$/;"	f
set_parents_under	add_lexweights.py	/^def set_parents_under(node):$/;"	f
set_parents_under	cut_type_top_down_sampler.py	/^def set_parents_under(node):$/;"	f
set_parents_under	dump_sampler.py	/^def set_parents_under(node):$/;"	f
set_parents_under	edge_type_top_down_sampler.py	/^def set_parents_under(node):$/;"	f
set_parents_under	initial_sampler.py	/^def set_parents_under(node):$/;"	f
set_parents_under	parallel_sampler.py	/^def set_parents_under(node):$/;"	f
set_parents_under	simulated_sampler.py	/^def set_parents_under(node):$/;"	f
set_quote	amr_graph.py	/^    def set_quote(self, val):$/;"	m	class:AMRNode
set_reenter	amr_graph.py	/^    def set_reenter(self, val):$/;"	m	class:AMRNode
set_root	amr_fragment.py	/^    def set_root(self, node_num):$/;"	m	class:AMRFragment
set_sampler	HRGSample.py	/^    def set_sampler(self, SAMPLER):$/;"	m	class:Sample
set_semiring	hypergraph.py	/^    def set_semiring(self, semiring):$/;"	m	class:Hypergraph
set_sentence	amr_graph.py	/^    def set_sentence(self, s):$/;"	m	class:AMRGraph
set_span	amr_fragment.py	/^    def set_span(self, start, end):$/;"	m	class:AMRFragment
shortened_toks	extract_alignment.py	/^def shortened_toks(toks):$/;"	f
show	hypergraph.py	/^    def show(self):$/;"	m	class:Hypergraph
show_neighborhood	hypergraph.py	/^    def show_neighborhood(self, max_dist=3, detailed=True):$/;"	m	class:Node
shutil	extractor-ghkm.py	/^import shutil$/;"	i
simple_dirichlet_posterior	HRGSample.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	add_lexweights.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	cut_type_top_down_sampler.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	dump_sampler.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	edge_type_top_down_sampler.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	initial_sampler.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	parallel_sampler.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior	simulated_sampler.py	/^    def simple_dirichlet_posterior(self, x):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	HRGSample.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	add_lexweights.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	cut_type_top_down_sampler.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	dump_sampler.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	edge_type_top_down_sampler.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	initial_sampler.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	parallel_sampler.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
simple_dirichlet_posterior_for_choice	simulated_sampler.py	/^    def simple_dirichlet_posterior_for_choice(self, c):$/;"	m	class:NPSampler
single_alike	extract_alignment.py	/^def single_alike(str1, str2):$/;"	f
single_exp	amr_fragment.py	/^    def single_exp(self):$/;"	m	class:AMRFragment
single_score	smatch.py	/^single_score=True #global variable, single score output control$/;"	v
single_score	smatch_modified.py	/^single_score=False #global variable, single score output control$/;"	v
single_worker_decode	decoder.py	/^def single_worker_decode():$/;"	f
sites	HRGSample.py	/^    def sites(self):$/;"	m	class:Sample
sites	cut_type_top_down_sampler.py	/^    def sites(self):$/;"	m	class:Sample
sites	dump_sampler.py	/^    def sites(self):$/;"	m	class:Sample
sites	edge_type_top_down_sampler.py	/^    def sites(self):$/;"	m	class:Sample
sites	initial_sampler.py	/^    def sites(self):$/;"	m	class:Sample
sites	parallel_sampler.py	/^    def sites(self):$/;"	m	class:Sample
sites	simulated_sampler.py	/^    def sites(self):$/;"	m	class:Sample
size	grammar.py	/^    def size(self):$/;"	m	class:Grammar
slave_mode_decode	decoder.py	/^def slave_mode_decode():$/;"	f
sleep	decoder.py	/^from time import sleep$/;"	i
sleep	monitor.py	/^from time import sleep$/;"	i
smatch	concept_init.py	/^import smatch$/;"	i
smatch	extract_alignment.py	/^import smatch$/;"	i
smatch	extract_cycles.py	/^import smatch$/;"	i
smatch	forest_prev.py	/^import smatch$/;"	i
smatch	fragment_forest.py	/^import smatch$/;"	i
smatch	init_unaligned_gram.py	/^import smatch$/;"	i
smatch	read_amr_aligner.py	/^import smatch$/;"	i
smatch	smatch-table.py	/^import smatch$/;"	i
smoothed_rule	extractor-ghkm.py	/^def smoothed_rule(rule):$/;"	f
snt	extract_voc.py	/^        snt = snt_f.readline()$/;"	v
snt	extract_voc.py	/^    snt = snt_f.readline()$/;"	v
snt_f	extract_voc.py	/^    snt_f = open(snt_file, 'r')$/;"	v
snt_file	extract_voc.py	/^    snt_file = sys.argv[1]$/;"	v
socket	anneal_hrg_sampler.py	/^import socket$/;"	i
socket	corpus_server.py	/^import socket$/;"	i
socket	decoder.py	/^import socket$/;"	i
socket	dump_sample.py	/^import socket$/;"	i
socket	hrg_sampler.py	/^import socket$/;"	i
socket	parallel_sampler.py	/^import socket$/;"	i
socket	translation_job.py	/^import socket$/;"	i
sortline	sort_trees.py	/^        sortline = '%s ||| %s\\n' % (' '.join(str(s) for s in rule.e),$/;"	v
srilm	swig_lm.py	/^import srilm, sys$/;"	i
stacksize	monitor.py	/^def stacksize(since=0.0):$/;"	f
star	hgraph.py	/^    def star(self, node):$/;"	m	class:Hgraph
start	python_lm.py	/^    start = time.time()$/;"	v	class:LanguageModel
start_likelihood	Parallel_Sampler.py	/^    start_likelihood = SAMPLER.likelihood()$/;"	v
start_likelihood	anneal_hrg_sampler.py	/^    start_likelihood = SAMPLER.likelihood()$/;"	v
start_likelihood	cut_type_top_down_sampler.py	/^    start_likelihood = SAMPLER.likelihood()$/;"	v	class:Sample
start_likelihood	edge_type_top_down_sampler.py	/^    start_likelihood = SAMPLER.likelihood()$/;"	v	class:Sample
start_likelihood	hrg_sampler.py	/^        start_likelihood = global_sampler.likelihood()$/;"	v
start_likelihood	load_samples.py	/^    start_likelihood = SAMPLER.likelihood()$/;"	v
start_likelihood	simulated_sampler.py	/^    start_likelihood = SAMPLER.likelihood()$/;"	v	class:Sample
start_slave	corpus_server.py	/^    def start_slave(self, sid, host):$/;"	m	class:CorpusServer
start_slaves	corpus_server.py	/^    def start_slaves(self):$/;"	m	class:CorpusServer
start_time	scorer.py	/^start_time = None$/;"	v
stats	abc_parser.py	/^    def stats(self):$/;"	m	class:ABCParser
stats	chart.py	/^    def stats(self):$/;"	m	class:Chart
stats	dot_chart.py	/^    def stats(self):$/;"	m	class:DotChart
stats	extractor.py	/^    import hotshot, hotshot.stats$/;"	i
stats	grammar.py	/^    def stats(self):$/;"	m	class:LexicalITG
stats	grammar.py	/^    def stats(self):$/;"	m	class:SCFG
stats	hypergraph.py	/^    def stats(self):$/;"	m	class:Hypergraph
stats	scorer.py	/^    import hotshot, hotshot.stats$/;"	i
stderr	extractor-ghkm.py	/^from sys import stderr$/;"	i
stdin	extractor-ghkm.py	/^from sys import stdin$/;"	i
stdout	percent_counter.py	/^from sys import stdout$/;"	i
str_cmd	extractor-ghkm.py	/^    str_cmd = "%s -nounary -alignments -depthtwo %s %s %s" % (EXTRACTOR_BIN, $/;"	v
str_helper	HRGSample.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	add_lexweights.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	cut_type_top_down_sampler.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	dump_sampler.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	edge_type_top_down_sampler.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	initial_sampler.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	parallel_sampler.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper	simulated_sampler.py	/^    def str_helper(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	HRGSample.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	add_lexweights.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	cut_type_top_down_sampler.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	dump_sampler.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	edge_type_top_down_sampler.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	initial_sampler.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	parallel_sampler.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_helper_expand	simulated_sampler.py	/^    def str_helper_expand(self, node, indent=0):$/;"	m	class:Sample
str_list	amr_fragment.py	/^    def str_list(self):$/;"	m	class:AMRFragment
str_side	amr_fragment.py	/^    def str_side(self):$/;"	m	class:AMRFragment
string	gflags.py	/^import string$/;"	i
string	gflags_python3.py	/^import string$/;"	i
string_to_graph_alignment	cut_type_top_down_sampler.py	/^    string_to_graph_alignment = read_alignments()$/;"	v	class:Sample
stringify	hgraph.py	/^    def stringify(self, warn=False):$/;"	m	class:Hgraph
struct	gflags.py	/^import struct$/;"	i
sub_graph_node	amr_fragment.py	/^    def sub_graph_node(self, node_index, visited_index):$/;"	m	class:AMRFragment
sub_graph_under	amr_fragment.py	/^    def sub_graph_under(self, node_index, ext_mapping, include_root=True, sample=None, var_mapping=None, nonterm_index=None, unvisited_nodes=None, att_list_mapping=None, visited_index=None):$/;"	m	class:AMRFragment
subprocess	extractor-ghkm.py	/^import subprocess$/;"	i
subprocess	smatch-table.py	/^import subprocess$/;"	i
subseq	extract_alignment.py	/^def subseq(seq1, seq2, start):$/;"	f
substract	HRGSample.py	/^    def substract(self, other):$/;"	m	class:NPSampler
substract	parallel_sampler.py	/^    def substract(self, another):$/;"	m	class:NTSampler
substract	parallel_sampler.py	/^    def substract(self, another):$/;"	m	class:Sampler
substract	parallel_sampler.py	/^    def substract(self, other):$/;"	m	class:NPSampler
subtract_phrases	extractor.py	/^    def subtract_phrases(self, a, phrases):$/;"	m	class:Extractor
suffixes	gene_glue.py	/^def suffixes(ntype):$/;"	f
surface_check_var	amr_parser.py	/^def surface_check_var(s):$/;"	f
swap_gain	smatch.py	/^def swap_gain(match,i,m,j,m2,weight_dict,match_num):$/;"	f
swap_gain	smatch_modified.py	/^def swap_gain(match,i,m,j,m2,weight_dict,match_num):$/;"	f
swig_import_helper	srilm.py	/^    def swig_import_helper():$/;"	f
sym_str	grammar.py	/^    def sym_str(self):$/;"	m	class:TrieNode
symbol_table	HRGRule.py	/^    symbol_table = {}$/;"	v	class:SHRGRule
symbol_table	rule.py	/^    symbol_table = {}$/;"	v	class:Rule
symfromstr	HRGRule.py	/^def symfromstr(s):$/;"	f
symfromstr	rule.py	/^def symfromstr(s):$/;"	f
symtostr	HRGRule.py	/^def symtostr(sym, idx):$/;"	f
symtostr	rule.py	/^def symtostr(sym, idx):$/;"	f
syntactic_help	gflags.py	/^  syntactic_help = " ".join((number_article, number_name))$/;"	v	class:FloatParser
syntactic_help	gflags.py	/^  syntactic_help = " ".join((number_article, number_name))$/;"	v	class:IntegerParser
syntactic_help	gflags.py	/^  syntactic_help = ""$/;"	v	class:ArgumentParser
syntactic_help	gflags_python3.py	/^  syntactic_help = " ".join((number_article, number_name))$/;"	v	class:FloatParser
syntactic_help	gflags_python3.py	/^  syntactic_help = " ".join((number_article, number_name))$/;"	v	class:IntegerParser
syntactic_help	gflags_python3.py	/^  syntactic_help = ""$/;"	v	class:ArgumentParser
sys	HRGRule.py	/^import sys$/;"	i
sys	HRGSample.py	/^import sys$/;"	i
sys	Parallel_Sampler.py	/^import sys$/;"	i
sys	add_lexweights.py	/^import sys$/;"	i
sys	alignment.py	/^import sys$/;"	i
sys	amr.py	/^import sys$/;"	i
sys	amr_fragment.py	/^import sys$/;"	i
sys	amr_graph.py	/^import sys$/;"	i
sys	amr_old.py	/^import sys$/;"	i
sys	amr_parser.py	/^import sys$/;"	i
sys	amr_without_alignment.py	/^import sys$/;"	i
sys	anneal_hrg_sampler.py	/^import sys$/;"	i
sys	best_path.py	/^import sys$/;"	i
sys	common.py	/^    import sys$/;"	i
sys	common.py	/^import sys$/;"	i
sys	composed_rule_extractor.py	/^import sys$/;"	i
sys	concept_init.py	/^import sys$/;"	i
sys	corpus_server.py	/^import sys$/;"	i
sys	count_top_rule.py	/^import sys$/;"	i
sys	cut_type_top_down_sampler.py	/^import sys$/;"	i
sys	data_divider.py	/^import sys$/;"	i
sys	decode.py	/^import sys$/;"	i
sys	decoder.py	/^import sys$/;"	i
sys	draw_graphs.py	/^import sys$/;"	i
sys	driver.py	/^import sys$/;"	i
sys	dump_sample.py	/^import sys$/;"	i
sys	dump_sampler.py	/^import sys$/;"	i
sys	edge_type_top_down_sampler.py	/^import sys$/;"	i
sys	em_trainer.py	/^import sys$/;"	i
sys	em_trainer64.py	/^import sys$/;"	i
sys	extract_alignment.py	/^import sys$/;"	i
sys	extract_cycles.py	/^import sys$/;"	i
sys	extract_unseen.py	/^import sys$/;"	i
sys	extract_voc.py	/^import sys$/;"	i
sys	extractor.py	/^import sys, os, os.path$/;"	i
sys	feature.py	/^import sys$/;"	i
sys	filter_rules.py	/^import sys$/;"	i
sys	filter_stop_words.py	/^import sys$/;"	i
sys	forest_prev.py	/^import sys$/;"	i
sys	fragment_forest.py	/^import sys$/;"	i
sys	fragment_hypergraph.py	/^import sys$/;"	i
sys	gene_glue.py	/^import sys$/;"	i
sys	gflags.py	/^import sys$/;"	i
sys	gflags_python3.py	/^import sys$/;"	i
sys	grammar.py	/^import sys$/;"	i
sys	hg_show.py	/^import sys$/;"	i
sys	hgraph.py	/^import sys$/;"	i
sys	hgshow.py	/^import sys$/;"	i
sys	hrg_sampler.py	/^import sys$/;"	i
sys	hypergraph.py	/^import sys$/;"	i
sys	init_unaligned_gram.py	/^import sys$/;"	i
sys	init_unseen_grammar.py	/^import sys$/;"	i
sys	initial_sampler.py	/^import sys$/;"	i
sys	killall.py	/^import sys$/;"	i
sys	lemmatize_snts.py	/^import sys$/;"	i
sys	len_filter.py	/^import sys$/;"	i
sys	lexweights.py	/^import sys, math, itertools$/;"	i
sys	load_samples.py	/^import sys$/;"	i
sys	logger.py	/^import sys$/;"	i
sys	mymonitor.py	/^import sys, os, gc$/;"	i
sys	non_lexed_weight.py	/^import sys$/;"	i
sys	parallel_sampler.py	/^import sys$/;"	i
sys	phrase_forest.py	/^import sys$/;"	i
sys	phrase_hypergraph.py	/^import sys$/;"	i
sys	python_lm.py	/^import sys$/;"	i
sys	read_amr.py	/^import sys$/;"	i
sys	read_amr_aligner.py	/^import sys$/;"	i
sys	rule-format-old2new.py	/^import sys$/;"	i
sys	rule.py	/^import sys$/;"	i
sys	rule_dumper.py	/^import sys$/;"	i
sys	scorer.py	/^import sys, os, os.path$/;"	i
sys	simulated_sampler.py	/^import sys$/;"	i
sys	smatch-table.py	/^import sys$/;"	i
sys	smatch.py	/^import sys$/;"	i
sys	smatch_modified.py	/^import sys$/;"	i
sys	sort_trees.py	/^import sys$/;"	i
sys	swig_lm.py	/^import srilm, sys$/;"	i
sys	to_lower.py	/^import sys$/;"	i
sys	translation_job.py	/^import sys$/;"	i
system	corpus_server.py	/^from os import system$/;"	i
system	em_trainer.py	/^from os import system$/;"	i
system	em_trainer64.py	/^from os import system$/;"	i
system	job_logger.py	/^from os import system$/;"	i
system	killall.py	/^from os import system$/;"	i
system	monitor.py	/^from os import system$/;"	i
tabulate	scorer.py	/^    def tabulate(self):$/;"	m	class:Tabulator
tabulate	scorer.py	/^def tabulate():$/;"	f
tell_server	decoder.py	/^def tell_server(data, recv=False):$/;"	f
terminal_limit	extractor-ghkm.py	/^def terminal_limit(src, trg):$/;"	f
termios	gflags.py	/^  import termios$/;"	i
termios	gflags.py	/^  termios = None$/;"	v
test	cut_type_top_down_sampler.py	/^    def test(self, key, sample, node):$/;"	m	class:TypeIndexer
test	dump_sampler.py	/^    def test(self, rule, sample, node):$/;"	m	class:CutTypeIndex
test	edge_type_top_down_sampler.py	/^    def test(self, key, sample, node):$/;"	m	class:TypeIndexer
test	initial_sampler.py	/^    def test(self, rule, sample, node):$/;"	m	class:CutTypeIndex
test	parallel_sampler.py	/^    def test(self, key, sample, node):$/;"	m	class:TypeIndexer
test	simulated_sampler.py	/^    def test(self, key, sample, node):$/;"	m	class:TypeIndexer
test_and_add	abc_parser.py	/^    def test_and_add(self, edge):$/;"	m	class:EdgeIndex
test_best_paths	hypergraph_test.py	/^    def test_best_paths(self):$/;"	m	class:InsideOutsideTest
test_inside_exp_outside_exp	hypergraph_test.py	/^    def test_inside_exp_outside_exp(self):$/;"	m	class:InsideOutsideTest
test_inside_exp_outside_exp_log	hypergraph_test.py	/^    def test_inside_exp_outside_exp_log(self):$/;"	m	class:InsideOutsideTest
test_inside_outside	hypergraph_test.py	/^    def test_inside_outside(self):$/;"	m	class:InsideOutsideTest
test_inside_outside_log	hypergraph_test.py	/^    def test_inside_outside_log(self):$/;"	m	class:InsideOutsideTest
threading	decoder.py	/^import threading$/;"	i
tight_phrases	extractor.py	/^tight_phrases = False$/;"	v
time	Parallel_Sampler.py	/^import time$/;"	i
time	add_lexweights.py	/^import time$/;"	i
time	anneal_hrg_sampler.py	/^import time$/;"	i
time	common.py	/^import time$/;"	i
time	concept_init.py	/^import time$/;"	i
time	corpus_server.py	/^from time import time$/;"	i
time	cut_type_top_down_sampler.py	/^import time$/;"	i
time	dump_sample.py	/^import time$/;"	i
time	dump_sampler.py	/^import time$/;"	i
time	edge_type_top_down_sampler.py	/^import time$/;"	i
time	em_trainer.py	/^import time$/;"	i
time	extract_alignment.py	/^import time$/;"	i
time	extract_cycles.py	/^import time$/;"	i
time	extractor.py	/^import time, math$/;"	i
time	forest_prev.py	/^import time$/;"	i
time	fragment_forest.py	/^import time$/;"	i
time	fragment_hypergraph.py	/^import time$/;"	i
time	hrg_sampler.py	/^import time$/;"	i
time	init_unaligned_gram.py	/^import time$/;"	i
time	initial_sampler.py	/^import time$/;"	i
time	load_samples.py	/^import time$/;"	i
time	parallel_sampler.py	/^import time$/;"	i
time	phrase_forest.py	/^import time$/;"	i
time	phrase_hypergraph.py	/^import time$/;"	i
time	python_lm.py	/^import time$/;"	i
time	read_amr.py	/^import time$/;"	i
time	read_amr_aligner.py	/^import time$/;"	i
time	scorer.py	/^import time, math$/;"	i
time	simulated_sampler.py	/^import time$/;"	i
time	smatch-table.py	/^import time$/;"	i
time	smatch.py	/^import time$/;"	i
time	smatch_modified.py	/^import time$/;"	i
time	translation_job.py	/^from time import time$/;"	i
timed	HRGSample.py	/^def timed(l):$/;"	f
timed	add_lexweights.py	/^def timed(l):$/;"	f
timed	common.py	/^def timed(l):$/;"	f
timed	cut_type_top_down_sampler.py	/^def timed(l):$/;"	f
timed	dump_sampler.py	/^def timed(l):$/;"	f
timed	edge_type_top_down_sampler.py	/^def timed(l):$/;"	f
timed	extractor.py	/^from common import timed, select$/;"	i
timed	initial_sampler.py	/^def timed(l):$/;"	f
timed	parallel_sampler.py	/^def timed(l):$/;"	f
timed	phrase_forest.py	/^from common import timed, select$/;"	i
timed	simulated_sampler.py	/^def timed(l):$/;"	f
tmp	count_top_rule.py	/^        tmp = next(f)$/;"	v
to_amr_format	hgraph.py	/^    def to_amr_format(self, ident_set=None):$/;"	m	class:Hgraph
to_amr_string	hgraph.py	/^    def to_amr_string(self):$/;"	m	class:Hgraph
to_concept_edge_labels	hgraph.py	/^    def to_concept_edge_labels(self, warn=False):$/;"	m	class:Hgraph
to_edge_labeled	amr.py	/^  def to_edge_labeled(self):$/;"	m	class:AMR
to_lower	to_lower.py	/^def to_lower(f_str):$/;"	f
to_string	hgraph.py	/^    def to_string(self, newline = False):$/;"	m	class:Hgraph
to_written_rule	extract_alignment.py	/^def to_written_rule(start, end, rule_str, str_side = None):$/;"	f
top_stats	HRGSample.py	/^    def top_stats(self):$/;"	m	class:NPSampler
topo_order	hypergraph.py	/^    def topo_order(self):$/;"	m	class:Hypergraph
topo_sort	hypergraph.py	/^    def topo_sort(self):$/;"	m	class:Hypergraph
total	python_lm.py	/^    total = 0$/;"	v	class:LanguageModel
totaltime	python_lm.py	/^    totaltime = 0$/;"	v	class:LanguageModel
train	em_trainer.py	/^    def train(self, n):$/;"	m	class:EMTrainer
train	em_trainer64.py	/^    def train(self, n):$/;"	m	class:EMTrainer
train_dict_file	extract_alignment.py	/^    train_dict_file = sys.argv[4]$/;"	v
trainer	em_trainer.py	/^    trainer = EMTrainer(ffilename,$/;"	v	class:EMTrainer
trainer	em_trainer64.py	/^    trainer = EMTrainer(ffilename,$/;"	v	class:EMTrainer
trans_heuristic	swig_lm.py	/^    def trans_heuristic(self, s):$/;"	m	class:LanguageModel
translation_job	scorer.py	/^import translation_job$/;"	i
tree_files	composed_rule_extractor.py	/^    tree_files = argv$/;"	v	class:ComposedRuleExtractor
tree_str	add_lexweights.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str	cut_type_top_down_sampler.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str	dump_sampler.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str	edge_type_top_down_sampler.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str	grammar.py	/^    def tree_str(self, indent=0):$/;"	m	class:TrieNode
tree_str	hypergraph.py	/^    def tree_str(self, indent=0):$/;"	m	class:Path
tree_str	initial_sampler.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str	parallel_sampler.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str	simulated_sampler.py	/^    def tree_str(self):$/;"	m	class:Sample
tree_str_helper	add_lexweights.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
tree_str_helper	cut_type_top_down_sampler.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
tree_str_helper	dump_sampler.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
tree_str_helper	edge_type_top_down_sampler.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
tree_str_helper	initial_sampler.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
tree_str_helper	parallel_sampler.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
tree_str_helper	simulated_sampler.py	/^    def tree_str_helper(self, node, indent=0):$/;"	m	class:Sample
treefile	add_lexweights.py	/^    treefile = TreeFile('dump-test')$/;"	v	class:Sample
triples	hgraph.py	/^    def triples(self, instances =  False, start_node = None, refresh = False, nodelabels = False):$/;"	m	class:Hgraph
type_sample_cut	cut_type_top_down_sampler.py	/^    def type_sample_cut(self, node, parent):$/;"	m	class:Sample
type_sample_cut	dump_sampler.py	/^    def type_sample_cut(self, node, parent):$/;"	m	class:Sample
type_sample_cut	edge_type_top_down_sampler.py	/^    def type_sample_cut(self, node, parent):$/;"	m	class:Sample
type_sample_cut	initial_sampler.py	/^    def type_sample_cut(self, node, parent):$/;"	m	class:Sample
type_sample_cut	parallel_sampler.py	/^    def type_sample_cut(self, node, parent):$/;"	m	class:Sample
type_sample_cut	simulated_sampler.py	/^    def type_sample_cut(self, node, parent):$/;"	m	class:Sample
type_sample_edge	edge_type_top_down_sampler.py	/^    def type_sample_edge(self, node, parent):$/;"	m	class:Sample
unalign_f	forest_prev.py	/^unalign_f = open('unaligned_info', 'w')$/;"	v
unalign_f	init_unaligned_gram.py	/^    unalign_f = open(sys.argv[2], 'w')$/;"	v
unaligned_file	concept_init.py	/^    unaligned_file = sys.argv[5]$/;"	v
unary_cycle	decode.py	/^    def unary_cycle(self):$/;"	m	class:Item
unary_deduce	decode.py	/^    def unary_deduce(self, item):$/;"	m	class:Decoder
unary_expand	decode.py	/^    def unary_expand(self, i, j):$/;"	m	class:Decoder
unary_expand	dot_chart.py	/^    def unary_expand(self, i, j):$/;"	m	class:DotChart
uniform	HRGSample.py	/^def uniform(rule):$/;"	f
uniform	add_lexweights.py	/^def uniform(rule):$/;"	f
uniform	cut_type_top_down_sampler.py	/^def uniform(rule):$/;"	f
uniform	dump_sampler.py	/^def uniform(rule):$/;"	f
uniform	edge_type_top_down_sampler.py	/^def uniform(rule):$/;"	f
uniform	initial_sampler.py	/^def uniform(rule):$/;"	f
uniform	parallel_sampler.py	/^def uniform(rule):$/;"	f
uniform	simulated_sampler.py	/^def uniform(rule):$/;"	f
uniform_base	HRGSample.py	/^def uniform_base(rule):$/;"	f
uniform_base	add_lexweights.py	/^def uniform_base(rule):$/;"	f
uniform_base	cut_type_top_down_sampler.py	/^def uniform_base(rule):$/;"	f
uniform_base	dump_sampler.py	/^def uniform_base(rule):$/;"	f
uniform_base	edge_type_top_down_sampler.py	/^def uniform_base(rule):$/;"	f
uniform_base	initial_sampler.py	/^def uniform_base(rule):$/;"	f
uniform_base	parallel_sampler.py	/^def uniform_base(rule):$/;"	f
uniform_base	simulated_sampler.py	/^def uniform_base(rule):$/;"	f
union	alignment.py	/^    def union(a1, a2):$/;"	m	class:Alignment
union	alignment.py	/^    union = staticmethod(union)$/;"	v	class:Alignment
unittest	hgraph.py	/^import unittest$/;"	i
unittest	hypergraph_test.py	/^import unittest$/;"	i
unknown_word_rule	decode.py	/^    def unknown_word_rule(self, word):$/;"	m	class:Decoder
unseen_set	init_unseen_grammar.py	/^    unseen_set = init_set(f1)$/;"	v
update	consensus_training.py	/^    def update(self):$/;"	m	class:ConsensusTrainer
update	consensus_training.py	/^    def update(self):$/;"	m	class:ConsensusTrainingCounter
update	cut_type_top_down_sampler.py	/^    def update(self, parent):$/;"	m	class:CutSite
update	dump_sampler.py	/^    def update(self, parent):$/;"	m	class:CutSite
update	edge_type_top_down_sampler.py	/^    def update(self, parent):$/;"	m	class:CutSite
update	grammar.py	/^    def update(self, i):$/;"	m	class:LexicalITG
update	grammar.py	/^    def update(self, i):$/;"	m	class:SCFG
update	initial_sampler.py	/^    def update(self, parent):$/;"	m	class:CutSite
update	parallel_sampler.py	/^    def update(self, parent):$/;"	m	class:CutSite
update	simulated_sampler.py	/^    def update(self, parent):$/;"	m	class:CutSite
update_edge_costs	consensus_training.py	/^    def update_edge_costs(self):$/;"	m	class:ConsensusTrainingCounter
update_rule_size_tables	HRGSample.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	HRGSample.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	add_lexweights.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	add_lexweights.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	cut_type_top_down_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	cut_type_top_down_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	dump_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	dump_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	edge_type_top_down_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	edge_type_top_down_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	initial_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	initial_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	parallel_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	parallel_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_rule_size_tables	simulated_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NPSampler
update_rule_size_tables	simulated_sampler.py	/^    def update_rule_size_tables(self):$/;"	m	class:NTSampler
update_sampler	anneal_hrg_sampler.py	/^def update_sampler(samples, g_sampler):$/;"	f
update_sampler	dump_sample.py	/^def update_sampler(samples, g_sampler):$/;"	f
update_sampler	hrg_sampler.py	/^def update_sampler(samples, g_sampler):$/;"	f
update_weights	features.py	/^    def update_weights(self):$/;"	m	class:Features
usage	len_filter.py	/^def usage():$/;"	f
usage	rule-format-old2new.py	/^def usage():$/;"	f
validators_count	gflags_validators.py	/^  validators_count = 0$/;"	v	class:Validator
values	hgraph.py	/^    def values(self):$/;"	m	class:ListMap
var_from_graph	amr_fragment.py	/^    def var_from_graph(amr_graph, binary_reps):$/;"	m	class:AMRFragment
verbose	smatch-table.py	/^verbose=False$/;"	v
verbose	smatch.py	/^verbose=False #global variable, verbose output control$/;"	v
verbose	smatch_modified.py	/^verbose=False #global variable, verbose output control$/;"	v
verify_order	HRGSample.py	/^    def verify_order(self, children):$/;"	m	class:Sample
verify_site	cut_type_top_down_sampler.py	/^def verify_site(sample, node, r1, r2, r3):$/;"	f
verify_site	dump_sampler.py	/^def verify_site(sample, node, r1, r2, r3):$/;"	f
verify_site	edge_type_top_down_sampler.py	/^def verify_site(sample, node, r1, r2, r3):$/;"	f
verify_site	initial_sampler.py	/^def verify_site(sample, node, r1, r2, r3):$/;"	f
verify_site	parallel_sampler.py	/^def verify_site(sample, node, r1, r2, r3):$/;"	f
verify_site	simulated_sampler.py	/^def verify_site(sample, node, r1, r2, r3):$/;"	f
version_info	srilm.py	/^from sys import version_info$/;"	i
voc_dict	extract_voc.py	/^    voc_dict = set()$/;"	v
voc_f	extract_voc.py	/^    voc_f = open(voc_file, 'w')$/;"	v
voc_file	extract_voc.py	/^    voc_file = sys.argv[2]$/;"	v
voc_set	init_unaligned_gram.py	/^    voc_set = set()$/;"	v
weibull	HRGSample.py	/^def weibull(rule):$/;"	f
weibull	add_lexweights.py	/^def weibull(rule):$/;"	f
weibull	cut_type_top_down_sampler.py	/^def weibull(rule):$/;"	f
weibull	dump_sampler.py	/^def weibull(rule):$/;"	f
weibull	edge_type_top_down_sampler.py	/^def weibull(rule):$/;"	f
weibull	initial_sampler.py	/^def weibull(rule):$/;"	f
weibull	parallel_sampler.py	/^def weibull(rule):$/;"	f
weibull	simulated_sampler.py	/^def weibull(rule):$/;"	f
weight	feature.py	/^    def weight(self, deduction):$/;"	m	class:Feature
weight	feature.py	/^    def weight(self, deduction):$/;"	m	class:LM
weight	feature.py	/^    def weight(self, deduction):$/;"	m	class:MockLM
weight	feature.py	/^    def weight(self, deduction):$/;"	m	class:NTMismatch
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:Count
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:EdgeCount
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:FE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKM
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMCount
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMGlobal
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMLHSConditional
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMLexicalCE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMLexicalEC
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMRHSConditionalCE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GHKMRHSConditionalEC
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GlueRule
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:GlueRuleCount
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:HieroCount
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:HieroLHSConditional
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:HieroLexicalCE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:HieroLexicalEC
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:HieroRHSConditionalCE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:HieroRHSConditionalEC
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:ITG
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:LengthPenalty
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:NTPunish
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:NumTerminals
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:PhraseCount
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:PhraseEF
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:PhraseFE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:PhraseLexEF
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:PhraseLexFE
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:RuleType
weight	feature.py	/^    def weight(self, rule):$/;"	m	class:UnknownWord
weights	best_path.py	/^    weights = [float(x) for x in sys.argv[1].split(',')]$/;"	v
wf	read_amr.py	/^    wf = open(sys.argv[2], 'w')$/;"	v
whole_end	smatch-table.py	/^   whole_end=time.clock()$/;"	v
whole_start	smatch-table.py	/^   whole_start=time.clock()$/;"	v
whole_time	smatch-table.py	/^   whole_time=whole_end-whole_start$/;"	v
words	init_unaligned_gram.py	/^        words = line.strip().split()$/;"	v
write	add_lexweights.py	/^    def write(self, line):$/;"	m	class:TreeFile
write	alignment.py	/^    def write(self, file):$/;"	m	class:Alignment
write	logger.py	/^def write(s):$/;"	f
write_hypergraph	translation_job.py	/^    def write_hypergraph(self):$/;"	m	class:TranslationJob
write_kbest_to_file	translation_job.py	/^    def write_kbest_to_file(self):$/;"	m	class:TranslationJob
write_nonlexical_rules	extractor-ghkm.py	/^def write_nonlexical_rules(nonlexical_rule_file, nonlexical_rules):$/;"	f
write_nonterminal_glue_rules	extractor-ghkm.py	/^def write_nonterminal_glue_rules(glue_rule_file, set_lhs):$/;"	f
write_output_file	translation_job.py	/^    def write_output_file(self):$/;"	m	class:TranslationJob
write_pharaoh	alignment.py	/^    def write_pharaoh(self, file):$/;"	m	class:Alignment
write_rules	em_trainer.py	/^    def write_rules(self):$/;"	m	class:EMTrainer
write_rules	em_trainer64.py	/^    def write_rules(self):$/;"	m	class:EMTrainer
write_to_dump_file	extractor-ghkm.py	/^def write_to_dump_file(dump_dir, dump_file, lexical_rules, dump_no):$/;"	f
write_visual	alignment.py	/^    def write_visual(self, file):$/;"	m	class:Alignment
write_viterbi_tree	em_trainer.py	/^    def write_viterbi_tree(self, hg, treefilename):$/;"	m	class:EMTrainer
write_viterbi_tree	em_trainer64.py	/^    def write_viterbi_tree(self, hg, treefilename):$/;"	m	class:EMTrainer
writeln	logger.py	/^def writeln(s=""):$/;"	f
x	digamma.py	/^    x = 0.1$/;"	v
xdot	hgraph.py	/^    import xdot$/;"	i
xsum	scorer.py	/^xsum = {} # c(lhs)$/;"	v
