#!/usr/bin/python
import sys
import time
import pickle
import os
import cPickle
import alignment
import hypergraph
from fragment_hypergraph import FragmentHGNode, FragmentHGEdge
import smatch
from smatch import get_amr_line
import amr_graph
from amr_graph import *
import logger

import gflags
FLAGS = gflags.FLAGS

gflags.DEFINE_string(
    'fragment_nonterminal',
    'X',
    'Nonterminal used for phrase forest.')
gflags.DEFINE_bool(
    'delete_unaligned',
    False,
    'Delete unaligned words in phrase decomposition forest.')

FRAGMENT_NT = '[%s]' % FLAGS.fragment_nonterminal

#Enlarge a chart with a set of items
def enlarge_chart(prev_chart, new_items):
    for node1 in new_items:
        flag = False
        for node2 in prev_chart:
            if node1.frag == node2.frag:
                for edge in node1.incoming:
                    node2.add_incoming(edge)
                    flag = True

        if not flag: #node1 has never appeared in the previous chart
            prev_chart.add(node1)

#Add one item to a chart
def add_one_item(prev_chart, item):
    flag = False
    for node in prev_chart:
        if node.frag == item.frag:
            for edge in item.incoming:
                node.add_incoming(edge)
                flag = True
    if not flag:
        prev_chart.add(item)

#To verify if a chart item has covered the graph
#i.e. covered all nodes and all edges
def is_goal_item(chart_item):
    fragment = chart_item.frag
    nodes = fragment.nodes
    edges = fragment.edges
    return len(edges) == edges.count()
    #return (len(nodes) == nodes.count()) and (len(edges) == edges.count())

# extract all the binarized fragments combinations for AMR
# each chart item is a set of fragments are consistent with a span of aligned strings
def fragment_decomposition_forest(fragments, unaligned_fragments):
    # save the index mapping so that we can restore indices after phrase
    # decomposition forest generation

    n = len(fragments) #These fragments are aligned, and have some order based on the strings

    chart = [[set() for j in range(n+1)] for i in range(n+1)]

    start_time = time.time()
    #The leaves of the forest is identified concept fragments
    for i in xrange(n):
        j = i + 1
        frag = fragments[i]
        curr_node = FragmentHGNode(FRAGMENT_NT, i, j, frag)
        chart[i][j].add(curr_node)

        curr_candidate = chart[i][j]
        updated = True
        while updated:
            updated = False
            new_node_set = set()
            curr_time = time.time()
            if curr_time - start_time > 30:
                return None
            for node1 in curr_candidate:
                for unaligned_frag in unaligned_fragments:
                    #Before combine two fragments, check if they are disjoint and adjacent
                    if check_disjoint(node1.frag, unaligned_frag) and check_adjacent(node1.frag, unaligned_frag):
                        new_frag = combine_fragments(node1.frag, unaligned_frag)
                        if new_frag is None:
                            continue
                        new_node = FragmentHGNode(FRAGMENT_NT, i, j, new_frag)
                        #edge = FragmentHGEdge()
                        #edge.add_tail(node1)
                        #edge.add_tail(node2)
                        #new_node.add_incoming(edge)
                        updated = True

                        add_one_item(new_node_set, new_node)
            if updated:
                enlarge_chart(chart[i][j], new_node_set)
                curr_candidate = new_node_set

    for span in xrange(2, n+1):
        for i in xrange(0, n):
            j = i + span
            if j > n:
                continue
            for k in xrange(i+1, j):
                if len(chart[i][k]) == 0 or len(chart[k][j]) == 0:
                    continue
                for node1 in chart[i][k]:
                    for node2 in chart[k][j]:
                    #Before combine two fragments, check if they are disjoint and adjacent
                        if check_disjoint(node1.frag, node2.frag) and check_adjacent(node1.frag, node2.frag):
                            new_frag = combine_fragments(node1.frag, node2.frag)
                            if new_frag is None:
                                continue
                            #logger.writeln(str(new_frag))
                            #logger.writeln(new_frag.ext_nodes_str())
                            new_node = FragmentHGNode(FRAGMENT_NT, i, j, new_frag)
                            children = []
                            children.append(node1)
                            children.append(node2)
                            if not check_consist(new_node, children):
                                print 'inconsistency here'
                                print str(new_node.frag)
                                print str(node1.frag)
                                print str(node2.frag)
                            edge = FragmentHGEdge()
                            edge.add_tail(node1)
                            edge.add_tail(node2)
                            new_node.add_incoming(edge)
                            add_one_item(chart[i][j], new_node)

    if chart[0][n] is None:
        print '##################################'
        print 'The goal chart is empty, fail to build a goal item'
        print 'Alignment fragments:'
        for frag in fragments:
            print str(frag)
        print 'Unaligned fragments:'
        for frag in unaligned_fragments:
            print str(frag)
        print '#################################'
        return None

    hg = None
    for node in chart[0][n]:
        #print str(node)
        if is_goal_item(node):
            hg = hypergraph.Hypergraph(node)
            assert len(node.frag.ext_set) == 0, 'The whole graph should not have external nodes: %s \n %s' %(str(node.frag), node.frag.ext_nodes_str())
            #print str(node.frag)

    #assert hg is not None, 'Failed to build a goal item'
    if hg is None:
        print '##################################'
        print 'No goal item in the final chart'
        print 'Alignment fragments:'
        for frag in fragments:
            print str(frag)
        print 'Unaligned fragments:'
        for frag in unaligned_fragments:
            print str(frag)
        print '#################################'
        sys.stdout.flush()
        return None
    #hg.assert_done('topo_sort')
    #print type(hg)
    return hg

def initialize_fragment_forest(amr_file, sent_file, align_file, filter_file):
    f1 = open(amr_file, 'r')
    f2 = open(align_file, 'r')
    f3 = open(sent_file, 'r')
    amr_line = get_amr_line(f1)
    alignment_line = f2.readline()
    sent = f3.readline()
    frag_forests = []
    sent_num = 0

    timely_set = set()
    f4 = open(filter_file, 'r')
    num = f4.readline().strip()
    while num != '':
        num = int(num)
        timely_set.add(num)
        num = f4.readline().strip()
    f4.close()

    while amr_line != '':
        assert alignment_line != '', 'The following amr graph does not have a corresponding alignment:\n%s' % amr_line
        if sent_num < 51 or sent_num > 61:
        #if sent_num != 5:
        #if (sent_num not in timely_set): # or sent_num != 62:
            sent_num += 1
            amr_line = get_amr_line(f1)
            alignment_line = f2.readline()
            sent = f3.readline()
            continue
        amr_graph = AMRGraph(amr_line)
        amr_graph.set_sentence(sent.strip().split())

        logger.writeln(str(amr_graph))

        alignments = alignment_line.strip().split()
        alignments = [tuple(align.split('|')) for align in alignments]
        #num_aligned = len(alignments)
        aligned_fragments = []
        error_happened = False
        #start_time = time.time()
        #logger.writeln('aligned fragments:')
        for align in alignments:
            s_side = align[0]
            f_side = align[1]
            s_start = s_side.split('-')[0]
            s_start = (int)(s_start)
            s_end = s_side.split('-')[1]
            s_end = (int)(s_end)
            fragment = amr_graph.retrieve_fragment(f_side)
            if fragment is None:
                error_happened = True
                break
            fragment.set_span(s_start, s_end)
            aligned_fragments.append((s_start, s_end, fragment))

        if error_happened:

            sent_num += 1
            amr_line = get_amr_line(f1)
            alignment_line = f2.readline()
            sent = f3.readline()
            continue

        aligned_fragments = sorted(aligned_fragments) #This sort this used to constrain the possible combinations
        curr_start = 0
        curr_end = 0
        for start, end, frag in aligned_fragments:
            if start < curr_end:
                #logger.writeln('wrong at sentence %d' % sent_num)
                error_happened = True
                break
            curr_end = end

        if error_happened:
            #logger.writeln('Skip alignment overlapping sentence %d' % sent_num)
            sent_num += 1
            amr_line = get_amr_line(f1)
            alignment_line = f2.readline()
            sent = f3.readline()
            continue

        aligned_fragments = [z for x,y,z in aligned_fragments]
        edge_alignment = bitarray(len(amr_graph.edges))
        if edge_alignment.count() != 0:
            edge_alignment ^= edge_alignment

        for frag in aligned_fragments:
            edge_alignment |= frag.edges

        unaligned_fragments = amr_graph.extract_unaligned_fragments(edge_alignment)

        #curr_time = time.time()
        #if curr_time - start_time > 60:
        #    logger.writeln('sentence %d take too much time' % sent_num)
        #    sent_num += 1
        #    amr_line = get_amr_line(f1)
        #    alignment_line = f2.readline()
        #    sent = f3.readline()
        #    continue

        hg = fragment_decomposition_forest(aligned_fragments, unaligned_fragments)
        if hg is None:
            hg = None

        if hg is not None:
            frag_forests.append((hg, sent_num))
        sent_num += 1

        amr_line = get_amr_line(f1)
        alignment_line = f2.readline()
        sent = f3.readline()

    f1.close()
    f2.close()
    f3.close()
    return frag_forests

def parallel_forest_construct(argv):
    if argv[1] == '-m': #The main processor
    #if is_master: #The main processor
        data_dir = argv[2]
        file_no = int(argv[3])
        forest_dir = argv[4]
        cluster_nodes = argv[5].split('+')  #The cluster nodes are separted with '+'
        assert len(cluster_nodes) == file_no, 'The number of files and number of cluster nodes does not match'

        os.system('rm -rf %s' % forest_dir)
        os.mkdir(forest_dir)
        i = 0
        for curr_node in cluster_nodes: #iterate through each file
            data_file = 'graph_%d' % i
            align_file = 'align_%d' % i
            sent_file = 'sent_%d' % i
            des_file = 'forest_%d' % i
            used_sent_file = 'used_sent_%d' % i

            data_file = os.path.join(data_dir, data_file)
            align_file = os.path.join(data_dir, align_file)
            error_log_file = 'error_log_%d' % i
            sent_file = os.path.join(data_dir, sent_file)
            used_sent_file = os.path.join(forest_dir, used_sent_file)
            des_file = os.path.join(forest_dir, des_file)
            print 'start to launch program in %s' % curr_node

            cmd = 'python %s -s %s %s %s %s %s %d' % (argv[0], data_file, align_file, sent_file, des_file, used_sent_file, i)
            os.system(r'ssh %s "cd %s; nohup %s >& %s" &' % (curr_node, os.getcwd(), cmd, error_log_file))
            i += 1
            if i >= file_no:
                break

    else:
        assert len(argv) == 8, 'There should 8 arguments for the slaves'
        subset_id = int(argv[7])
        logger.file = open('logger_%d' % subset_id, 'w')
        #print argv
        amr_graph_file = argv[2]
        align_file = argv[3]
        sent_file = argv[4]
        des_file = argv[5]
        used_sent_file = argv[6]
        #logger.writeln(argv[0])
        #logger.writeln(argv[1])

        f1 = open(amr_graph_file, 'rb')
        amr_graphs = cPickle.load(f1)
        f1.close()

        f2 = open(align_file, 'r')
        sent_alignments = []
        alignment_line = f2.readline()
        while alignment_line != '':
            alignment_line = alignment_line.strip()
            sent_alignments.append(alignment_line)
            alignment_line = f2.readline()
        f2.close()

        f3 = open(sent_file, 'r')
        sents = []
        sent_line = f3.readline()
        while sent_line != '':
            sent_line = sent_line.strip()
            sents.append(sent_line)
            sent_line = f3.readline()
        f3.close()

        sent_no = len(sents)
        assert sent_no == len(sent_alignments) and sent_no == len(amr_graphs), '%d %d %d' % (sent_no, len(sent_alignments), len(amr_graphs))

        frag_forests = []
        sent_indexes = []


        #for sent_index in xrange(sent_no):
        num_self_cycle = 0
        for sent_index in xrange(sent_no):
        #for sent_index in xrange(30):
            curr_sent_index = 500 * subset_id + sent_index
            amr_graph = amr_graphs[sent_index]
            if amr_graph.check_self_cycle():
                num_self_cycle += 1
                logger.writeln('The %d-th sentence has self cycle' % curr_sent_index)
                #logger.writeln(str(amr_graph))
                continue
            #logger.writeln('There are %d self cycle sentences' % num_self_cycle)
            #print str(amr_graph)
            alignment_line = sent_alignments[sent_index]
            if alignment_line == '':
                logger.writeln('The %d-th sentence is totally unaligned' % curr_sent_index)
                logger.writeln(str(amr_graph))
                continue
            #assert alignment_line != '', 'The following amr graph does not have a corresponding alignment:\n%s' % amr_line
            sent = sents[sent_index]
            #if sent_num < 51 or sent_num > 61:
            #    continue
            amr_graph.set_sentence(sent.strip().split())

            alignments = alignment_line.strip().split()
            alignments = [tuple(align.split('|')) for align in alignments]
            aligned_fragments = []
            error_happened = False
            for align in alignments:
                s_side = align[0]
                f_side = align[1]
                s_start = s_side.split('-')[0]
                s_start = (int)(s_start)
                s_end = s_side.split('-')[1]
                s_end = (int)(s_end)
                fragment = amr_graph.retrieve_fragment(f_side)
                if fragment is None:
                    error_happened = True
                    break
                fragment.set_span(s_start, s_end)
                aligned_fragments.append((s_start, s_end, fragment))

            if error_happened:
                continue

            aligned_fragments = sorted(aligned_fragments) #This sort this used to constrain the possible combinations
            curr_start = 0
            curr_end = 0
            for start, end, frag in aligned_fragments:
                if start < curr_end:
                    error_happened = True
                    break
                curr_end = end

            if error_happened:
                continue

            aligned_fragments = [z for x,y,z in aligned_fragments]
            edge_alignment = bitarray(len(amr_graph.edges))
            if edge_alignment.count() != 0:
                edge_alignment ^= edge_alignment

            for frag in aligned_fragments:
                edge_alignment |= frag.edges

            unaligned_fragments = amr_graph.extract_unaligned_fragments(edge_alignment)

            hg = fragment_decomposition_forest(aligned_fragments, unaligned_fragments)

            if hg is not None:
                frag_forests.append(hg)
                sent_indexes.append(curr_sent_index)
                #logger.writeln(curr_sent_index)

        f4 = open(des_file, 'wb')
        cPickle.dump(frag_forests, f4)
        f4.close()
        f5 = open(used_sent_file, 'wb')
        cPickle.dump(sent_indexes, f5)
        f5.close()
        logger.writeln('finished')

if __name__ == '__main__':
    #amr_file = sys.argv[1]
    #sentence_file = sys.argv[2]
    #alignment_file = sys.argv[3]
    #frag_forests = initialize_fragment_forest(amr_file, sentence_file, alignment_file)
    parallel_forest_construct(sys.argv)
